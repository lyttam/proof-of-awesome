/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _angular2Angular2 = __webpack_require__(1);

	var _componentsAppComponent = __webpack_require__(110);

	(0, _angular2Angular2.bootstrap)(_componentsAppComponent.AppComponent);

	//import greeting from './content'
	// We can use any ES6 syntax supported by Babel here now!
	//alert(`${greeting} and with ES6!!`)

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__change_95_detection__, $__core__, $__annotations__, $__directives__, $__forms__;
	var $__change_95_detection__ = ($__change_95_detection__ = __webpack_require__(2), $__change_95_detection__ && $__change_95_detection__.__esModule && $__change_95_detection__ || { "default": $__change_95_detection__ });
	var $__core__ = ($__core__ = __webpack_require__(41), $__core__ && $__core__.__esModule && $__core__ || { "default": $__core__ });
	var $__annotations__ = ($__annotations__ = __webpack_require__(98), $__annotations__ && $__annotations__.__esModule && $__annotations__ || { "default": $__annotations__ });
	var $__directives__ = ($__directives__ = __webpack_require__(99), $__directives__ && $__directives__.__esModule && $__directives__ || { "default": $__directives__ });
	var $__forms__ = ($__forms__ = __webpack_require__(104), $__forms__ && $__forms__.__esModule && $__forms__ || { "default": $__forms__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__change_95_detection__, $__core__, $__annotations__, $__directives__, $__forms__);
	//# sourceMappingURL=angular2.js.map

	//# sourceMappingURL=./angular2.map

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__rtts_95_assert_47_rtts_95_assert__, $__src_47_change_95_detection_47_parser_47_ast__, $__src_47_change_95_detection_47_parser_47_lexer__, $__src_47_change_95_detection_47_parser_47_parser__, $__src_47_change_95_detection_47_parser_47_locals__, $__src_47_change_95_detection_47_exceptions__, $__src_47_change_95_detection_47_interfaces__, $__src_47_change_95_detection_47_proto_95_change_95_detector__, $__src_47_change_95_detection_47_dynamic_95_change_95_detector__, $__src_47_change_95_detection_47_binding_95_propagation_95_config__, $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__, $__src_47_change_95_detection_47_change_95_detection_95_util__, $__src_47_change_95_detection_47_pipes_47_pipe__, $__src_47_change_95_detection_47_proto_95_change_95_detector__, $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__, $__src_47_change_95_detection_47_pipes_47_iterable_95_changes__, $__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__, $__src_47_change_95_detection_47_pipes_47_null_95_pipe__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__src_47_change_95_detection_47_parser_47_ast__ = ($__src_47_change_95_detection_47_parser_47_ast__ = __webpack_require__(5), $__src_47_change_95_detection_47_parser_47_ast__ && $__src_47_change_95_detection_47_parser_47_ast__.__esModule && $__src_47_change_95_detection_47_parser_47_ast__ || { "default": $__src_47_change_95_detection_47_parser_47_ast__ });
	var $__src_47_change_95_detection_47_parser_47_lexer__ = ($__src_47_change_95_detection_47_parser_47_lexer__ = __webpack_require__(8), $__src_47_change_95_detection_47_parser_47_lexer__ && $__src_47_change_95_detection_47_parser_47_lexer__.__esModule && $__src_47_change_95_detection_47_parser_47_lexer__ || { "default": $__src_47_change_95_detection_47_parser_47_lexer__ });
	var $__src_47_change_95_detection_47_parser_47_parser__ = ($__src_47_change_95_detection_47_parser_47_parser__ = __webpack_require__(24), $__src_47_change_95_detection_47_parser_47_parser__ && $__src_47_change_95_detection_47_parser_47_parser__.__esModule && $__src_47_change_95_detection_47_parser_47_parser__ || { "default": $__src_47_change_95_detection_47_parser_47_parser__ });
	var $__src_47_change_95_detection_47_parser_47_locals__ = ($__src_47_change_95_detection_47_parser_47_locals__ = __webpack_require__(25), $__src_47_change_95_detection_47_parser_47_locals__ && $__src_47_change_95_detection_47_parser_47_locals__.__esModule && $__src_47_change_95_detection_47_parser_47_locals__ || { "default": $__src_47_change_95_detection_47_parser_47_locals__ });
	var $__src_47_change_95_detection_47_exceptions__ = ($__src_47_change_95_detection_47_exceptions__ = __webpack_require__(26), $__src_47_change_95_detection_47_exceptions__ && $__src_47_change_95_detection_47_exceptions__.__esModule && $__src_47_change_95_detection_47_exceptions__ || { "default": $__src_47_change_95_detection_47_exceptions__ });
	var $__src_47_change_95_detection_47_interfaces__ = ($__src_47_change_95_detection_47_interfaces__ = __webpack_require__(28), $__src_47_change_95_detection_47_interfaces__ && $__src_47_change_95_detection_47_interfaces__.__esModule && $__src_47_change_95_detection_47_interfaces__ || { "default": $__src_47_change_95_detection_47_interfaces__ });
	var $__src_47_change_95_detection_47_proto_95_change_95_detector__ = ($__src_47_change_95_detection_47_proto_95_change_95_detector__ = __webpack_require__(29), $__src_47_change_95_detection_47_proto_95_change_95_detector__ && $__src_47_change_95_detection_47_proto_95_change_95_detector__.__esModule && $__src_47_change_95_detection_47_proto_95_change_95_detector__ || { "default": $__src_47_change_95_detection_47_proto_95_change_95_detector__ });
	var $__src_47_change_95_detection_47_dynamic_95_change_95_detector__ = ($__src_47_change_95_detection_47_dynamic_95_change_95_detector__ = __webpack_require__(32), $__src_47_change_95_detection_47_dynamic_95_change_95_detector__ && $__src_47_change_95_detection_47_dynamic_95_change_95_detector__.__esModule && $__src_47_change_95_detection_47_dynamic_95_change_95_detector__ || { "default": $__src_47_change_95_detection_47_dynamic_95_change_95_detector__ });
	var $__src_47_change_95_detection_47_binding_95_propagation_95_config__ = ($__src_47_change_95_detection_47_binding_95_propagation_95_config__ = __webpack_require__(34), $__src_47_change_95_detection_47_binding_95_propagation_95_config__ && $__src_47_change_95_detection_47_binding_95_propagation_95_config__.__esModule && $__src_47_change_95_detection_47_binding_95_propagation_95_config__ || { "default": $__src_47_change_95_detection_47_binding_95_propagation_95_config__ });
	var $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ = ($__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ = __webpack_require__(35), $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ && $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__.__esModule && $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ || { "default": $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ });
	var $__src_47_change_95_detection_47_change_95_detection_95_util__ = ($__src_47_change_95_detection_47_change_95_detection_95_util__ = __webpack_require__(30), $__src_47_change_95_detection_47_change_95_detection_95_util__ && $__src_47_change_95_detection_47_change_95_detection_95_util__.__esModule && $__src_47_change_95_detection_47_change_95_detection_95_util__ || { "default": $__src_47_change_95_detection_47_change_95_detection_95_util__ });
	var $__src_47_change_95_detection_47_pipes_47_pipe__ = ($__src_47_change_95_detection_47_pipes_47_pipe__ = __webpack_require__(31), $__src_47_change_95_detection_47_pipes_47_pipe__ && $__src_47_change_95_detection_47_pipes_47_pipe__.__esModule && $__src_47_change_95_detection_47_pipes_47_pipe__ || { "default": $__src_47_change_95_detection_47_pipes_47_pipe__ });
	var $__1 = ($__src_47_change_95_detection_47_proto_95_change_95_detector__ = __webpack_require__(29), $__src_47_change_95_detection_47_proto_95_change_95_detector__ && $__src_47_change_95_detection_47_proto_95_change_95_detector__.__esModule && $__src_47_change_95_detection_47_proto_95_change_95_detector__ || { "default": $__src_47_change_95_detection_47_proto_95_change_95_detector__ }),
	    ProtoChangeDetector = $__1.ProtoChangeDetector,
	    DynamicProtoChangeDetector = $__1.DynamicProtoChangeDetector,
	    JitProtoChangeDetector = $__1.JitProtoChangeDetector;
	var PipeRegistry = ($__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ = __webpack_require__(35), $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ && $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__.__esModule && $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ || { "default": $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__ }).PipeRegistry;
	var IterableChangesFactory = ($__src_47_change_95_detection_47_pipes_47_iterable_95_changes__ = __webpack_require__(38), $__src_47_change_95_detection_47_pipes_47_iterable_95_changes__ && $__src_47_change_95_detection_47_pipes_47_iterable_95_changes__.__esModule && $__src_47_change_95_detection_47_pipes_47_iterable_95_changes__ || { "default": $__src_47_change_95_detection_47_pipes_47_iterable_95_changes__ }).IterableChangesFactory;
	var KeyValueChangesFactory = ($__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__ = __webpack_require__(39), $__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__ && $__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__.__esModule && $__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__ || { "default": $__src_47_change_95_detection_47_pipes_47_keyvalue_95_changes__ }).KeyValueChangesFactory;
	var NullPipeFactory = ($__src_47_change_95_detection_47_pipes_47_null_95_pipe__ = __webpack_require__(40), $__src_47_change_95_detection_47_pipes_47_null_95_pipe__ && $__src_47_change_95_detection_47_pipes_47_null_95_pipe__.__esModule && $__src_47_change_95_detection_47_pipes_47_null_95_pipe__ || { "default": $__src_47_change_95_detection_47_pipes_47_null_95_pipe__ }).NullPipeFactory;
	var ChangeDetection = function ChangeDetection() {
	  ;
	};
	$traceurRuntime.createClass(ChangeDetection, { createProtoChangeDetector: function createProtoChangeDetector(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(null, ProtoChangeDetector);
	  } }, {});
	Object.defineProperty(ChangeDetection.prototype.createProtoChangeDetector, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var defaultPipes = {
	  "iterableDiff": [new IterableChangesFactory(), new NullPipeFactory()],
	  "keyValDiff": [new KeyValueChangesFactory(), new NullPipeFactory()]
	};
	var DynamicChangeDetection = function DynamicChangeDetection(registry) {
	  assert.argumentTypes(registry, PipeRegistry);
	  $traceurRuntime.superConstructor($DynamicChangeDetection).call(this);
	  this.registry = registry;
	};
	var $DynamicChangeDetection = DynamicChangeDetection;
	$traceurRuntime.createClass(DynamicChangeDetection, { createProtoChangeDetector: function createProtoChangeDetector(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(new DynamicProtoChangeDetector(this.registry), ProtoChangeDetector);
	  } }, {}, ChangeDetection);
	Object.defineProperty(DynamicChangeDetection, "parameters", { get: function get() {
	    return [[PipeRegistry]];
	  } });
	Object.defineProperty(DynamicChangeDetection.prototype.createProtoChangeDetector, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var JitChangeDetection = function JitChangeDetection(registry) {
	  assert.argumentTypes(registry, PipeRegistry);
	  $traceurRuntime.superConstructor($JitChangeDetection).call(this);
	  this.registry = registry;
	};
	var $JitChangeDetection = JitChangeDetection;
	$traceurRuntime.createClass(JitChangeDetection, { createProtoChangeDetector: function createProtoChangeDetector(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(new JitProtoChangeDetector(this.registry), ProtoChangeDetector);
	  } }, {}, ChangeDetection);
	Object.defineProperty(JitChangeDetection, "parameters", { get: function get() {
	    return [[PipeRegistry]];
	  } });
	Object.defineProperty(JitChangeDetection.prototype.createProtoChangeDetector, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var _registry = new PipeRegistry(defaultPipes);
	var dynamicChangeDetection = new DynamicChangeDetection(_registry);
	var jitChangeDetection = new JitChangeDetection(_registry);
	module.exports = $traceurRuntime.exportStar(Object.defineProperties({
	  __esModule: true
	}, {
	  AST: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_parser_47_ast__.AST;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  Lexer: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_parser_47_lexer__.Lexer;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  Parser: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_parser_47_parser__.Parser;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  Locals: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_parser_47_locals__.Locals;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ExpressionChangedAfterItHasBeenChecked: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_exceptions__.ExpressionChangedAfterItHasBeenChecked;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ChangeDetectionError: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_exceptions__.ChangeDetectionError;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ChangeRecord: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.ChangeRecord;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ChangeDispatcher: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.ChangeDispatcher;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ChangeDetector: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.ChangeDetector;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  CHECK_ONCE: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.CHECK_ONCE;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  CHECK_ALWAYS: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.CHECK_ALWAYS;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  DETACHED: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.DETACHED;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  CHECKED: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_interfaces__.CHECKED;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ProtoChangeDetector: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_proto_95_change_95_detector__.ProtoChangeDetector;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  DynamicProtoChangeDetector: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_proto_95_change_95_detector__.DynamicProtoChangeDetector;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  JitProtoChangeDetector: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_proto_95_change_95_detector__.JitProtoChangeDetector;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  BindingRecord: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_proto_95_change_95_detector__.BindingRecord;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  DynamicChangeDetector: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_dynamic_95_change_95_detector__.DynamicChangeDetector;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  BindingPropagationConfig: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_binding_95_propagation_95_config__.BindingPropagationConfig;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  uninitialized: {
	    get: function get() {
	      return $__src_47_change_95_detection_47_change_95_detection_95_util__.uninitialized;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  ChangeDetection: {
	    get: function get() {
	      return ChangeDetection;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  defaultPipes: {
	    get: function get() {
	      return defaultPipes;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  DynamicChangeDetection: {
	    get: function get() {
	      return DynamicChangeDetection;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  JitChangeDetection: {
	    get: function get() {
	      return JitChangeDetection;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  dynamicChangeDetection: {
	    get: function get() {
	      return dynamicChangeDetection;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  jitChangeDetection: {
	    get: function get() {
	      return jitChangeDetection;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), $__src_47_change_95_detection_47_pipes_47_pipe_95_registry__, $__src_47_change_95_detection_47_pipes_47_pipe__);
	//# sourceMappingURL=change_detection.js.map

	//# sourceMappingURL=./change_detection.map

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__src_47_rtts_95_assert__;
	var $__src_47_rtts_95_assert__ = ($__src_47_rtts_95_assert__ = __webpack_require__(4), $__src_47_rtts_95_assert__ && $__src_47_rtts_95_assert__.__esModule && $__src_47_rtts_95_assert__ || { "default": $__src_47_rtts_95_assert__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__src_47_rtts_95_assert__);
	//# sourceMappingURL=rtts_assert.es6.map

	//# sourceMappingURL=./rtts_assert.map

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	Object.defineProperties(module.exports, {
	  proxy: { get: function get() {
	      return proxy;
	    } },
	  assert: { get: function get() {
	      return assert;
	    } },
	  __esModule: { value: true }
	});
	var _global = typeof window === 'object' ? window : global;
	var POSITION_NAME = ['', '1st', '2nd', '3rd'];
	function argPositionName(i) {
	  var position = i / 2 + 1;
	  return POSITION_NAME[position] || position + 'th';
	}
	var primitives;
	var genericType;
	if (typeof $traceurRuntime === 'object') {
	  primitives = $traceurRuntime.type;
	  genericType = $traceurRuntime.genericType;
	} else {
	  primitives = {
	    any: { name: 'any' },
	    boolean: { name: 'boolean' },
	    number: { name: 'number' },
	    string: { name: 'string' },
	    symbol: { name: 'symbol' },
	    'void': { name: 'void' }
	  };
	  genericType = function (type, args) {
	    return {
	      type: type,
	      args: args
	    };
	  };
	}
	Object.keys(primitives).forEach(function (name) {
	  primitives[name].__assertName = name;
	});
	function proxy() {}
	function assertArgumentTypes() {
	  for (var params = [], $__0 = 0; $__0 < arguments.length; $__0++) params[$__0] = arguments[$__0];
	  var actual, type;
	  var currentArgErrors;
	  var errors = [];
	  var msg;
	  for (var i = 0, l = params.length; i < l; i = i + 2) {
	    actual = params[i];
	    type = params[i + 1];
	    currentArgErrors = [];
	    if (!isType(actual, type, currentArgErrors)) {
	      errors.push(argPositionName(i) + ' argument has to be an instance of ' + prettyPrint(type) + ', got ' + prettyPrint(actual));
	      if (currentArgErrors.length) {
	        errors.push(currentArgErrors);
	      }
	    }
	  }
	  if (errors.length) {
	    throw new Error('Invalid arguments given!\n' + formatErrors(errors));
	  }
	}
	function prettyPrint(value, depth) {
	  if (typeof depth === 'undefined') {
	    depth = 0;
	  }
	  if (depth++ > 3) {
	    return '[...]';
	  }
	  if (typeof value === 'undefined') {
	    return 'undefined';
	  }
	  if (typeof value === 'string') {
	    return '"' + value + '"';
	  }
	  if (typeof value === 'boolean') {
	    return value.toString();
	  }
	  if (value === null) {
	    return 'null';
	  }
	  if (typeof value === 'object') {
	    if (value.__assertName) {
	      return value.__assertName;
	    }
	    if (value.map && typeof value.map === 'function') {
	      return '[' + value.map(function (v) {
	        return prettyPrint(v, depth);
	      }).join(', ') + ']';
	    }
	    var properties = Object.keys(value);
	    var suffix = '}';
	    if (properties.length > 20) {
	      properties.length = 20;
	      suffix = ', ... }';
	    }
	    return '{' + properties.map(function (p) {
	      return p + ': ' + prettyPrint(value[p], depth);
	    }).join(', ') + suffix;
	  }
	  return value.__assertName || value.name || value.toString();
	}
	function isType(value, T, errors) {
	  if (T && T.type) {
	    T = T.type;
	  }
	  if (T === primitives['void']) {
	    return typeof value === 'undefined';
	  }
	  if (_isProxy(value)) {
	    return true;
	  }
	  if (T === primitives.any || value === null) {
	    return true;
	  }
	  if (T === primitives.string) {
	    return typeof value === 'string';
	  }
	  if (T === primitives.number) {
	    return typeof value === 'number';
	  }
	  if (T === primitives.boolean) {
	    return typeof value === 'boolean';
	  }
	  if (typeof T.assert === 'function') {
	    var parentStack = currentStack;
	    var isValid;
	    currentStack = errors;
	    try {
	      isValid = T.assert(value);
	    } catch (e) {
	      fail(e.message);
	      isValid = false;
	    }
	    currentStack = parentStack;
	    if (typeof isValid === 'undefined') {
	      isValid = errors.length === 0;
	    }
	    return isValid;
	  }
	  return value instanceof T;
	}
	function _isProxy(obj) {
	  if (!obj || !obj.constructor || !obj.constructor.annotations) return false;
	  return obj.constructor.annotations.filter(function (a) {
	    return a instanceof proxy;
	  }).length > 0;
	}
	function formatErrors(errors) {
	  var indent = arguments[1] !== void 0 ? arguments[1] : '  ';
	  return errors.map(function (e) {
	    if (typeof e === 'string') return indent + '- ' + e;
	    return formatErrors(e, indent + '  ');
	  }).join('\n');
	}
	function type(actual, T) {
	  var errors = [];
	  if (!isType(actual, T, errors)) {
	    var msg = 'Expected an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';
	    if (errors.length) {
	      msg += '\n' + formatErrors(errors);
	    }
	    throw new Error(msg);
	  }
	  return actual;
	}
	function returnType(actual, T) {
	  var errors = [];
	  if (!isType(actual, T, errors)) {
	    var msg = 'Expected to return an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';
	    if (errors.length) {
	      msg += '\n' + formatErrors(errors);
	    }
	    throw new Error(msg);
	  }
	  return actual;
	}
	var string = type.string = !(__WEBPACK_AMD_DEFINE_RESULT__ = function (value) {
	  return "function" === 'string';
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	var boolean = type.boolean = !(__WEBPACK_AMD_DEFINE_RESULT__ = function (value) {
	  return "function" === 'boolean';
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	var number = type.number = !(__WEBPACK_AMD_DEFINE_RESULT__ = function (value) {
	  return "function" === 'number';
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	function arrayOf() {
	  for (var types = [], $__1 = 0; $__1 < arguments.length; $__1++) types[$__1] = arguments[$__1];
	  return assert.define('array of ' + types.map(prettyPrint).join('/'), function (value) {
	    var $__3;
	    if (assert(value).is(Array)) {
	      for (var i = 0; i < value.length; i++) {
	        ($__3 = assert(value[i])).is.apply($__3, $traceurRuntime.spread(types));
	      }
	    }
	  });
	}
	function structure(definition) {
	  var properties = Object.keys(definition);
	  return assert.define('object with properties ' + properties.join(', '), function (value) {
	    if (assert(value).is(Object)) {
	      for (var i = 0; i < properties.length; i++) {
	        var property = properties[i];
	        assert(value[property]).is(definition[property]);
	      }
	    }
	  });
	}
	var currentStack = [];
	function fail(message) {
	  currentStack.push(message);
	}
	function define(classOrName, check) {
	  var cls = classOrName;
	  if (typeof classOrName === 'string') {
	    cls = function () {};
	    cls.__assertName = classOrName;
	  }
	  cls.assert = function (value) {
	    return check(value);
	  };
	  return cls;
	}
	function assert(value) {
	  return { is: function is() {
	      var $__3;
	      for (var types = [], $__2 = 0; $__2 < arguments.length; $__2++) types[$__2] = arguments[$__2];
	      var allErrors = [];
	      var errors;
	      for (var i = 0; i < types.length; i++) {
	        var type = types[i];
	        errors = [];
	        if (isType(value, type, errors)) {
	          return true;
	        }
	        allErrors.push(prettyPrint(value) + ' is not instance of ' + prettyPrint(type));
	        if (errors.length) {
	          allErrors.push(errors);
	        }
	      }
	      ($__3 = currentStack).push.apply($__3, $traceurRuntime.spread(allErrors));
	      return false;
	    } };
	}
	assert.type = type;
	for (var prop in primitives) {
	  assert.type[prop] = primitives[prop];
	}
	assert.genericType = genericType;
	assert.argumentTypes = assertArgumentTypes;
	assert.returnType = returnType;
	assert.define = define;
	assert.fail = fail;
	assert.string = string;
	assert.number = number;
	assert.boolean = boolean;
	assert.arrayOf = arrayOf;
	assert.structure = structure;
	;
	//# sourceMappingURL=rtts_assert.es6.map

	//# sourceMappingURL=./rtts_assert.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  AST: { get: function get() {
	      return AST;
	    } },
	  EmptyExpr: { get: function get() {
	      return EmptyExpr;
	    } },
	  ImplicitReceiver: { get: function get() {
	      return ImplicitReceiver;
	    } },
	  Chain: { get: function get() {
	      return Chain;
	    } },
	  Conditional: { get: function get() {
	      return Conditional;
	    } },
	  AccessMember: { get: function get() {
	      return AccessMember;
	    } },
	  KeyedAccess: { get: function get() {
	      return KeyedAccess;
	    } },
	  Pipe: { get: function get() {
	      return Pipe;
	    } },
	  LiteralPrimitive: { get: function get() {
	      return LiteralPrimitive;
	    } },
	  LiteralArray: { get: function get() {
	      return LiteralArray;
	    } },
	  LiteralMap: { get: function get() {
	      return LiteralMap;
	    } },
	  Interpolation: { get: function get() {
	      return Interpolation;
	    } },
	  Binary: { get: function get() {
	      return Binary;
	    } },
	  PrefixNot: { get: function get() {
	      return PrefixNot;
	    } },
	  Assignment: { get: function get() {
	      return Assignment;
	    } },
	  MethodCall: { get: function get() {
	      return MethodCall;
	    } },
	  FunctionCall: { get: function get() {
	      return FunctionCall;
	    } },
	  ASTWithSource: { get: function get() {
	      return ASTWithSource;
	    } },
	  TemplateBinding: { get: function get() {
	      return TemplateBinding;
	    } },
	  AstVisitor: { get: function get() {
	      return AstVisitor;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    autoConvertAdd = $__1.autoConvertAdd,
	    isBlank = $__1.isBlank,
	    isPresent = $__1.isPresent,
	    FunctionWrapper = $__1.FunctionWrapper,
	    BaseException = $__1.BaseException;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    Map = $__2.Map,
	    ListWrapper = $__2.ListWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var AST = function AST() {
	  ;
	};
	$traceurRuntime.createClass(AST, Object.defineProperties({
	  eval: function _eval(context, locals) {
	    throw new BaseException("Not supported");
	  },

	  assign: function assign(context, locals, value) {
	    throw new BaseException("Not supported");
	  },
	  visit: function visit(visitor) {},
	  toString: function toString() {
	    return assert.returnType("AST", assert.type.string);
	  }
	}, {
	  isAssignable: {
	    get: function get() {
	      return false;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	var EmptyExpr = function EmptyExpr() {
	  $traceurRuntime.superConstructor($EmptyExpr).apply(this, arguments);
	  ;
	};
	var $EmptyExpr = EmptyExpr;
	$traceurRuntime.createClass(EmptyExpr, {
	  eval: function _eval(context, locals) {
	    return null;
	  },
	  visit: function visit(visitor) {}
	}, {}, AST);
	var ImplicitReceiver = function ImplicitReceiver() {
	  $traceurRuntime.superConstructor($ImplicitReceiver).apply(this, arguments);
	  ;
	};
	var $ImplicitReceiver = ImplicitReceiver;
	$traceurRuntime.createClass(ImplicitReceiver, {
	  eval: function _eval(context, locals) {
	    return context;
	  },
	  visit: function visit(visitor) {
	    return visitor.visitImplicitReceiver(this);
	  }
	}, {}, AST);
	var Chain = function Chain(expressions) {
	  assert.argumentTypes(expressions, List);
	  $traceurRuntime.superConstructor($Chain).call(this);
	  this.expressions = expressions;
	};
	var $Chain = Chain;
	$traceurRuntime.createClass(Chain, {
	  eval: function _eval(context, locals) {
	    var result;
	    for (var i = 0; i < this.expressions.length; i++) {
	      var last = this.expressions[i].eval(context, locals);
	      if (isPresent(last)) result = last;
	    }
	    return result;
	  },
	  visit: function visit(visitor) {
	    return visitor.visitChain(this);
	  }
	}, {}, AST);
	Object.defineProperty(Chain, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var Conditional = function Conditional(condition, trueExp, falseExp) {
	  assert.argumentTypes(condition, AST, trueExp, AST, falseExp, AST);
	  $traceurRuntime.superConstructor($Conditional).call(this);
	  this.condition = condition;
	  this.trueExp = trueExp;
	  this.falseExp = falseExp;
	};
	var $Conditional = Conditional;
	$traceurRuntime.createClass(Conditional, {
	  eval: function _eval(context, locals) {
	    if (this.condition.eval(context, locals)) {
	      return this.trueExp.eval(context, locals);
	    } else {
	      return this.falseExp.eval(context, locals);
	    }
	  },
	  visit: function visit(visitor) {
	    return visitor.visitConditional(this);
	  }
	}, {}, AST);
	Object.defineProperty(Conditional, "parameters", { get: function get() {
	    return [[AST], [AST], [AST]];
	  } });
	var AccessMember = function AccessMember(receiver, name, getter, setter) {
	  assert.argumentTypes(receiver, AST, name, assert.type.string, getter, Function, setter, Function);
	  $traceurRuntime.superConstructor($AccessMember).call(this);
	  this.receiver = receiver;
	  this.name = name;
	  this.getter = getter;
	  this.setter = setter;
	};
	var $AccessMember = AccessMember;
	$traceurRuntime.createClass(AccessMember, Object.defineProperties({
	  eval: function _eval(context, locals) {
	    if (this.receiver instanceof ImplicitReceiver && isPresent(locals) && locals.contains(this.name)) {
	      return locals.get(this.name);
	    } else {
	      var evaluatedReceiver = this.receiver.eval(context, locals);
	      return this.getter(evaluatedReceiver);
	    }
	  },

	  assign: function assign(context, locals, value) {
	    var evaluatedContext = this.receiver.eval(context, locals);
	    if (this.receiver instanceof ImplicitReceiver && isPresent(locals) && locals.contains(this.name)) {
	      throw new BaseException("Cannot reassign a variable binding " + this.name);
	    } else {
	      return this.setter(evaluatedContext, value);
	    }
	  },
	  visit: function visit(visitor) {
	    return visitor.visitAccessMember(this);
	  }
	}, {
	  isAssignable: {
	    get: function get() {
	      return true;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {}, AST);
	Object.defineProperty(AccessMember, "parameters", { get: function get() {
	    return [[AST], [assert.type.string], [Function], [Function]];
	  } });
	var KeyedAccess = function KeyedAccess(obj, key) {
	  assert.argumentTypes(obj, AST, key, AST);
	  $traceurRuntime.superConstructor($KeyedAccess).call(this);
	  this.obj = obj;
	  this.key = key;
	};
	var $KeyedAccess = KeyedAccess;
	$traceurRuntime.createClass(KeyedAccess, Object.defineProperties({
	  eval: function _eval(context, locals) {
	    var obj = this.obj.eval(context, locals);
	    var key = this.key.eval(context, locals);
	    return obj[key];
	  },

	  assign: function assign(context, locals, value) {
	    var obj = this.obj.eval(context, locals);
	    var key = this.key.eval(context, locals);
	    obj[key] = value;
	    return value;
	  },
	  visit: function visit(visitor) {
	    return visitor.visitKeyedAccess(this);
	  }
	}, {
	  isAssignable: {
	    get: function get() {
	      return true;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {}, AST);
	Object.defineProperty(KeyedAccess, "parameters", { get: function get() {
	    return [[AST], [AST]];
	  } });
	var Pipe = function Pipe(exp, name, args, inBinding) {
	  assert.argumentTypes(exp, AST, name, assert.type.string, args, List, inBinding, assert.type.boolean);
	  $traceurRuntime.superConstructor($Pipe).call(this);
	  this.exp = exp;
	  this.name = name;
	  this.args = args;
	  this.inBinding = inBinding;
	};
	var $Pipe = Pipe;
	$traceurRuntime.createClass(Pipe, { visit: function visit(visitor) {
	    return visitor.visitPipe(this);
	  } }, {}, AST);
	Object.defineProperty(Pipe, "parameters", { get: function get() {
	    return [[AST], [assert.type.string], [List], [assert.type.boolean]];
	  } });
	var LiteralPrimitive = function LiteralPrimitive(value) {
	  $traceurRuntime.superConstructor($LiteralPrimitive).call(this);
	  this.value = value;
	};
	var $LiteralPrimitive = LiteralPrimitive;
	$traceurRuntime.createClass(LiteralPrimitive, {
	  eval: function _eval(context, locals) {
	    return this.value;
	  },
	  visit: function visit(visitor) {
	    return visitor.visitLiteralPrimitive(this);
	  }
	}, {}, AST);
	var LiteralArray = function LiteralArray(expressions) {
	  assert.argumentTypes(expressions, List);
	  $traceurRuntime.superConstructor($LiteralArray).call(this);
	  this.expressions = expressions;
	};
	var $LiteralArray = LiteralArray;
	$traceurRuntime.createClass(LiteralArray, {
	  eval: function _eval(context, locals) {
	    return ListWrapper.map(this.expressions, function (e) {
	      return e.eval(context, locals);
	    });
	  },
	  visit: function visit(visitor) {
	    return visitor.visitLiteralArray(this);
	  }
	}, {}, AST);
	Object.defineProperty(LiteralArray, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var LiteralMap = function LiteralMap(keys, values) {
	  assert.argumentTypes(keys, List, values, List);
	  $traceurRuntime.superConstructor($LiteralMap).call(this);
	  this.keys = keys;
	  this.values = values;
	};
	var $LiteralMap = LiteralMap;
	$traceurRuntime.createClass(LiteralMap, {
	  eval: function _eval(context, locals) {
	    var res = StringMapWrapper.create();
	    for (var i = 0; i < this.keys.length; ++i) {
	      StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
	    }
	    return res;
	  },
	  visit: function visit(visitor) {
	    return visitor.visitLiteralMap(this);
	  }
	}, {}, AST);
	Object.defineProperty(LiteralMap, "parameters", { get: function get() {
	    return [[List], [List]];
	  } });
	var Interpolation = function Interpolation(strings, expressions) {
	  assert.argumentTypes(strings, List, expressions, List);
	  $traceurRuntime.superConstructor($Interpolation).call(this);
	  this.strings = strings;
	  this.expressions = expressions;
	};
	var $Interpolation = Interpolation;
	$traceurRuntime.createClass(Interpolation, {
	  eval: function _eval(context, locals) {
	    throw new BaseException("evaluating an Interpolation is not supported");
	  },
	  visit: function visit(visitor) {
	    visitor.visitInterpolation(this);
	  }
	}, {}, AST);
	Object.defineProperty(Interpolation, "parameters", { get: function get() {
	    return [[List], [List]];
	  } });
	var Binary = function Binary(operation, left, right) {
	  assert.argumentTypes(operation, assert.type.string, left, AST, right, AST);
	  $traceurRuntime.superConstructor($Binary).call(this);
	  this.operation = operation;
	  this.left = left;
	  this.right = right;
	};
	var $Binary = Binary;
	$traceurRuntime.createClass(Binary, {
	  eval: function _eval(context, locals) {
	    var left = this.left.eval(context, locals);
	    switch (this.operation) {
	      case '&&':
	        return left && this.right.eval(context, locals);
	      case '||':
	        return left || this.right.eval(context, locals);
	    }
	    var right = this.right.eval(context, locals);
	    switch (this.operation) {
	      case '+':
	        return left + right;
	      case '-':
	        return left - right;
	      case '*':
	        return left * right;
	      case '/':
	        return left / right;
	      case '%':
	        return left % right;
	      case '==':
	        return left == right;
	      case '!=':
	        return left != right;
	      case '<':
	        return left < right;
	      case '>':
	        return left > right;
	      case '<=':
	        return left <= right;
	      case '>=':
	        return left >= right;
	      case '^':
	        return left ^ right;
	      case '&':
	        return left & right;
	    }
	    throw 'Internal error [$operation] not handled';
	  },
	  visit: function visit(visitor) {
	    return visitor.visitBinary(this);
	  }
	}, {}, AST);
	Object.defineProperty(Binary, "parameters", { get: function get() {
	    return [[assert.type.string], [AST], [AST]];
	  } });
	var PrefixNot = function PrefixNot(expression) {
	  assert.argumentTypes(expression, AST);
	  $traceurRuntime.superConstructor($PrefixNot).call(this);
	  this.expression = expression;
	};
	var $PrefixNot = PrefixNot;
	$traceurRuntime.createClass(PrefixNot, {
	  eval: function _eval(context, locals) {
	    return !this.expression.eval(context, locals);
	  },
	  visit: function visit(visitor) {
	    return visitor.visitPrefixNot(this);
	  }
	}, {}, AST);
	Object.defineProperty(PrefixNot, "parameters", { get: function get() {
	    return [[AST]];
	  } });
	var Assignment = function Assignment(target, value) {
	  assert.argumentTypes(target, AST, value, AST);
	  $traceurRuntime.superConstructor($Assignment).call(this);
	  this.target = target;
	  this.value = value;
	};
	var $Assignment = Assignment;
	$traceurRuntime.createClass(Assignment, {
	  eval: function _eval(context, locals) {
	    return this.target.assign(context, locals, this.value.eval(context, locals));
	  },
	  visit: function visit(visitor) {
	    return visitor.visitAssignment(this);
	  }
	}, {}, AST);
	Object.defineProperty(Assignment, "parameters", { get: function get() {
	    return [[AST], [AST]];
	  } });
	var MethodCall = function MethodCall(receiver, name, fn, args) {
	  assert.argumentTypes(receiver, AST, name, assert.type.string, fn, Function, args, List);
	  $traceurRuntime.superConstructor($MethodCall).call(this);
	  this.receiver = receiver;
	  this.fn = fn;
	  this.args = args;
	  this.name = name;
	};
	var $MethodCall = MethodCall;
	$traceurRuntime.createClass(MethodCall, {
	  eval: function _eval(context, locals) {
	    var evaluatedArgs = evalList(context, locals, this.args);
	    if (this.receiver instanceof ImplicitReceiver && isPresent(locals) && locals.contains(this.name)) {
	      var fn = locals.get(this.name);
	      return FunctionWrapper.apply(fn, evaluatedArgs);
	    } else {
	      var evaluatedReceiver = this.receiver.eval(context, locals);
	      return this.fn(evaluatedReceiver, evaluatedArgs);
	    }
	  },
	  visit: function visit(visitor) {
	    return visitor.visitMethodCall(this);
	  }
	}, {}, AST);
	Object.defineProperty(MethodCall, "parameters", { get: function get() {
	    return [[AST], [assert.type.string], [Function], [List]];
	  } });
	var FunctionCall = function FunctionCall(target, args) {
	  assert.argumentTypes(target, AST, args, List);
	  $traceurRuntime.superConstructor($FunctionCall).call(this);
	  this.target = target;
	  this.args = args;
	};
	var $FunctionCall = FunctionCall;
	$traceurRuntime.createClass(FunctionCall, {
	  eval: function _eval(context, locals) {
	    var obj = this.target.eval(context, locals);
	    if (!(obj instanceof Function)) {
	      throw new BaseException(obj + " is not a function");
	    }
	    return FunctionWrapper.apply(obj, evalList(context, locals, this.args));
	  },
	  visit: function visit(visitor) {
	    return visitor.visitFunctionCall(this);
	  }
	}, {}, AST);
	Object.defineProperty(FunctionCall, "parameters", { get: function get() {
	    return [[AST], [List]];
	  } });
	var ASTWithSource = function ASTWithSource(ast, source, location) {
	  assert.argumentTypes(ast, AST, source, assert.type.string, location, assert.type.string);
	  $traceurRuntime.superConstructor($ASTWithSource).call(this);
	  this.source = source;
	  this.location = location;
	  this.ast = ast;
	};
	var $ASTWithSource = ASTWithSource;
	$traceurRuntime.createClass(ASTWithSource, Object.defineProperties({
	  eval: function _eval(context, locals) {
	    return this.ast.eval(context, locals);
	  },

	  assign: function assign(context, locals, value) {
	    return this.ast.assign(context, locals, value);
	  },
	  visit: function visit(visitor) {
	    return this.ast.visit(visitor);
	  },
	  toString: function toString() {
	    return assert.returnType(this.source + " in " + this.location, assert.type.string);
	  }
	}, {
	  isAssignable: {
	    get: function get() {
	      return this.ast.isAssignable;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {}, AST);
	Object.defineProperty(ASTWithSource, "parameters", { get: function get() {
	    return [[AST], [assert.type.string], [assert.type.string]];
	  } });
	var TemplateBinding = function TemplateBinding(key, keyIsVar, name, expression) {
	  assert.argumentTypes(key, assert.type.string, keyIsVar, assert.type.boolean, name, assert.type.string, expression, ASTWithSource);
	  this.key = key;
	  this.keyIsVar = keyIsVar;
	  this.name = name;
	  this.expression = expression;
	};
	$traceurRuntime.createClass(TemplateBinding, {}, {});
	Object.defineProperty(TemplateBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.boolean], [assert.type.string], [ASTWithSource]];
	  } });
	var AstVisitor = function AstVisitor() {
	  ;
	};
	$traceurRuntime.createClass(AstVisitor, {
	  visitAccessMember: function visitAccessMember(ast) {
	    assert.argumentTypes(ast, AccessMember);
	  },
	  visitAssignment: function visitAssignment(ast) {
	    assert.argumentTypes(ast, Assignment);
	  },
	  visitBinary: function visitBinary(ast) {
	    assert.argumentTypes(ast, Binary);
	  },
	  visitChain: function visitChain(ast) {
	    assert.argumentTypes(ast, Chain);
	  },
	  visitConditional: function visitConditional(ast) {
	    assert.argumentTypes(ast, Conditional);
	  },
	  visitPipe: function visitPipe(ast) {
	    assert.argumentTypes(ast, Pipe);
	  },
	  visitFunctionCall: function visitFunctionCall(ast) {
	    assert.argumentTypes(ast, FunctionCall);
	  },
	  visitImplicitReceiver: function visitImplicitReceiver(ast) {
	    assert.argumentTypes(ast, ImplicitReceiver);
	  },
	  visitKeyedAccess: function visitKeyedAccess(ast) {
	    assert.argumentTypes(ast, KeyedAccess);
	  },
	  visitLiteralArray: function visitLiteralArray(ast) {
	    assert.argumentTypes(ast, LiteralArray);
	  },
	  visitLiteralMap: function visitLiteralMap(ast) {
	    assert.argumentTypes(ast, LiteralMap);
	  },
	  visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
	    assert.argumentTypes(ast, LiteralPrimitive);
	  },
	  visitMethodCall: function visitMethodCall(ast) {
	    assert.argumentTypes(ast, MethodCall);
	  },
	  visitPrefixNot: function visitPrefixNot(ast) {
	    assert.argumentTypes(ast, PrefixNot);
	  }
	}, {});
	Object.defineProperty(AstVisitor.prototype.visitAccessMember, "parameters", { get: function get() {
	    return [[AccessMember]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitAssignment, "parameters", { get: function get() {
	    return [[Assignment]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitBinary, "parameters", { get: function get() {
	    return [[Binary]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitChain, "parameters", { get: function get() {
	    return [[Chain]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitConditional, "parameters", { get: function get() {
	    return [[Conditional]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitPipe, "parameters", { get: function get() {
	    return [[Pipe]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitFunctionCall, "parameters", { get: function get() {
	    return [[FunctionCall]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitImplicitReceiver, "parameters", { get: function get() {
	    return [[ImplicitReceiver]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitKeyedAccess, "parameters", { get: function get() {
	    return [[KeyedAccess]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralArray, "parameters", { get: function get() {
	    return [[LiteralArray]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralMap, "parameters", { get: function get() {
	    return [[LiteralMap]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralPrimitive, "parameters", { get: function get() {
	    return [[LiteralPrimitive]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitMethodCall, "parameters", { get: function get() {
	    return [[MethodCall]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitPrefixNot, "parameters", { get: function get() {
	    return [[PrefixNot]];
	  } });
	var _evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
	function evalList(context, locals, exps) {
	  assert.argumentTypes(context, assert.type.any, locals, assert.type.any, exps, List);
	  var length = exps.length;
	  if (length > 10) {
	    throw new BaseException("Cannot have more than 10 argument");
	  }
	  var result = _evalListCache[length];
	  for (var i = 0; i < length; i++) {
	    result[i] = exps[i].eval(context, locals);
	  }
	  return result;
	}
	Object.defineProperty(evalList, "parameters", { get: function get() {
	    return [[], [], [List]];
	  } });
	//# sourceMappingURL=ast.js.map

	//# sourceMappingURL=./ast.map

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	Object.defineProperties(module.exports, {
	  global: { get: function get() {
	      return _global;
	    } },
	  Type: { get: function get() {
	      return Type;
	    } },
	  Math: { get: function get() {
	      return Math;
	    } },
	  Date: { get: function get() {
	      return Date;
	    } },
	  int: { get: function get() {
	      return int;
	    } },
	  CONST: { get: function get() {
	      return CONST;
	    } },
	  ABSTRACT: { get: function get() {
	      return ABSTRACT;
	    } },
	  IMPLEMENTS: { get: function get() {
	      return IMPLEMENTS;
	    } },
	  isPresent: { get: function get() {
	      return isPresent;
	    } },
	  isBlank: { get: function get() {
	      return isBlank;
	    } },
	  isString: { get: function get() {
	      return isString;
	    } },
	  isFunction: { get: function get() {
	      return isFunction;
	    } },
	  stringify: { get: function get() {
	      return stringify;
	    } },
	  StringWrapper: { get: function get() {
	      return StringWrapper;
	    } },
	  StringJoiner: { get: function get() {
	      return StringJoiner;
	    } },
	  NumberParseError: { get: function get() {
	      return NumberParseError;
	    } },
	  NumberWrapper: { get: function get() {
	      return NumberWrapper;
	    } },
	  RegExp: { get: function get() {
	      return RegExp;
	    } },
	  RegExpWrapper: { get: function get() {
	      return RegExpWrapper;
	    } },
	  RegExpMatcherWrapper: { get: function get() {
	      return RegExpMatcherWrapper;
	    } },
	  FunctionWrapper: { get: function get() {
	      return FunctionWrapper;
	    } },
	  BaseException: { get: function get() {
	      return BaseException;
	    } },
	  looseIdentical: { get: function get() {
	      return looseIdentical;
	    } },
	  getMapKey: { get: function get() {
	      return getMapKey;
	    } },
	  normalizeBlank: { get: function get() {
	      return normalizeBlank;
	    } },
	  isJsObject: { get: function get() {
	      return isJsObject;
	    } },
	  assertionsEnabled: { get: function get() {
	      return assertionsEnabled;
	    } },
	  print: { get: function get() {
	      return print;
	    } },
	  Json: { get: function get() {
	      return Json;
	    } },
	  DateWrapper: { get: function get() {
	      return DateWrapper;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var _global = typeof window === 'undefined' ? global : window;
	;
	var Type = Function;
	var Math = _global.Math;
	var Date = _global.Date;
	var assertionsEnabled_ = typeof assert !== 'undefined';
	var int;
	if (assertionsEnabled_) {
	  _global.assert = assert;
	  int = assert.define('int', function (value) {
	    return typeof value === 'number' && value % 1 === 0;
	  });
	} else {
	  int = {};
	  _global.assert = function () {};
	}
	;
	var CONST = function CONST() {
	  ;
	};
	$traceurRuntime.createClass(CONST, {}, {});
	var ABSTRACT = function ABSTRACT() {
	  ;
	};
	$traceurRuntime.createClass(ABSTRACT, {}, {});
	var IMPLEMENTS = function IMPLEMENTS() {
	  ;
	};
	$traceurRuntime.createClass(IMPLEMENTS, {}, {});
	function isPresent(obj) {
	  return assert.returnType(obj !== undefined && obj !== null, assert.type.boolean);
	}
	function isBlank(obj) {
	  return assert.returnType(obj === undefined || obj === null, assert.type.boolean);
	}
	function isString(obj) {
	  return assert.returnType(typeof obj === "string", assert.type.boolean);
	}
	function isFunction(obj) {
	  return assert.returnType(typeof obj === "function", assert.type.boolean);
	}
	function stringify(token) {
	  if (typeof token === 'string') {
	    return assert.returnType(token, assert.type.string);
	  }
	  if (token === undefined || token === null) {
	    return assert.returnType('' + token, assert.type.string);
	  }
	  if (token.name) {
	    return assert.returnType(token.name, assert.type.string);
	  }
	  return assert.returnType(token.toString(), assert.type.string);
	}
	var StringWrapper = function StringWrapper() {
	  ;
	};
	$traceurRuntime.createClass(StringWrapper, {}, {
	  fromCharCode: function fromCharCode(code) {
	    assert.argumentTypes(code, int);
	    return assert.returnType(String.fromCharCode(code), assert.type.string);
	  },
	  charCodeAt: function charCodeAt(s, index) {
	    assert.argumentTypes(s, assert.type.string, index, int);
	    return s.charCodeAt(index);
	  },
	  split: function split(s, regExp) {
	    assert.argumentTypes(s, assert.type.string, regExp, RegExp);
	    return s.split(regExp.multiple);
	  },
	  equals: function equals(s, s2) {
	    assert.argumentTypes(s, assert.type.string, s2, assert.type.string);
	    return assert.returnType(s === s2, assert.type.boolean);
	  },
	  replace: function replace(s, from, _replace) {
	    assert.argumentTypes(s, assert.type.string, from, assert.type.any, _replace, assert.type.string);
	    if (typeof from === "string") {
	      return assert.returnType(s.replace(from, _replace), assert.type.string);
	    } else {
	      return assert.returnType(s.replace(from.single, _replace), assert.type.string);
	    }
	  },
	  replaceAll: function replaceAll(s, from, replace) {
	    assert.argumentTypes(s, assert.type.string, from, RegExp, replace, assert.type.string);
	    return assert.returnType(s.replace(from.multiple, replace), assert.type.string);
	  },
	  startsWith: function startsWith(s, start) {
	    assert.argumentTypes(s, assert.type.string, start, assert.type.string);
	    return s.startsWith(start);
	  },
	  substring: function substring(s, start) {
	    var end = arguments[2] !== void 0 ? arguments[2] : null;
	    assert.argumentTypes(s, assert.type.string, start, int, end, int);
	    return s.substring(start, end === null ? undefined : end);
	  },
	  replaceAllMapped: function replaceAllMapped(s, from, cb) {
	    assert.argumentTypes(s, assert.type.string, from, RegExp, cb, Function);
	    return assert.returnType(s.replace(from.multiple, function () {
	      for (var matches = [], $__2 = 0; $__2 < arguments.length; $__2++) matches[$__2] = arguments[$__2];
	      matches.splice(-2, 2);
	      return cb(matches);
	    }), assert.type.string);
	  },
	  contains: function contains(s, substr) {
	    assert.argumentTypes(s, assert.type.string, substr, assert.type.string);
	    return assert.returnType(s.indexOf(substr) != -1, assert.type.boolean);
	  }
	});
	Object.defineProperty(StringWrapper.fromCharCode, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(StringWrapper.charCodeAt, "parameters", { get: function get() {
	    return [[assert.type.string], [int]];
	  } });
	Object.defineProperty(StringWrapper.split, "parameters", { get: function get() {
	    return [[assert.type.string], [RegExp]];
	  } });
	Object.defineProperty(StringWrapper.equals, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.replace, "parameters", { get: function get() {
	    return [[assert.type.string], [], [assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.replaceAll, "parameters", { get: function get() {
	    return [[assert.type.string], [RegExp], [assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.startsWith, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.substring, "parameters", { get: function get() {
	    return [[assert.type.string], [int], [int]];
	  } });
	Object.defineProperty(StringWrapper.replaceAllMapped, "parameters", { get: function get() {
	    return [[assert.type.string], [RegExp], [Function]];
	  } });
	Object.defineProperty(StringWrapper.contains, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	var StringJoiner = function StringJoiner() {
	  this.parts = [];
	};
	$traceurRuntime.createClass(StringJoiner, {
	  add: function add(part) {
	    assert.argumentTypes(part, assert.type.string);
	    this.parts.push(part);
	  },
	  toString: function toString() {
	    return assert.returnType(this.parts.join(""), assert.type.string);
	  }
	}, {});
	Object.defineProperty(StringJoiner.prototype.add, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var NumberParseError = function NumberParseError(message) {
	  $traceurRuntime.superConstructor($NumberParseError).call(this);
	  this.message = message;
	};
	var $NumberParseError = NumberParseError;
	$traceurRuntime.createClass(NumberParseError, { toString: function toString() {
	    return this.message;
	  } }, {}, Error);
	var NumberWrapper = function NumberWrapper() {
	  ;
	};
	$traceurRuntime.createClass(NumberWrapper, {}, Object.defineProperties({
	  toFixed: function toFixed(n, fractionDigits) {
	    assert.argumentTypes(n, assert.type.number, fractionDigits, int);
	    return assert.returnType(n.toFixed(fractionDigits), assert.type.string);
	  },
	  equal: function equal(a, b) {
	    return assert.returnType(a === b, assert.type.boolean);
	  },
	  parseIntAutoRadix: function parseIntAutoRadix(text) {
	    assert.argumentTypes(text, assert.type.string);
	    var result = assert.type(parseInt(text), int);
	    if (isNaN(result)) {
	      throw new NumberParseError("Invalid integer literal when parsing " + text);
	    }
	    return assert.returnType(result, int);
	  },
	  parseInt: (function (_parseInt) {
	    function parseInt(_x, _x2) {
	      return _parseInt.apply(this, arguments);
	    }

	    parseInt.toString = function () {
	      return _parseInt.toString();
	    };

	    return parseInt;
	  })(function (text, radix) {
	    assert.argumentTypes(text, assert.type.string, radix, int);
	    if (radix == 10) {
	      if (/^(\-|\+)?[0-9]+$/.test(text)) {
	        return assert.returnType(parseInt(text, radix), int);
	      }
	    } else if (radix == 16) {
	      if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	        return assert.returnType(parseInt(text, radix), int);
	      }
	    } else {
	      var result = assert.type(parseInt(text, radix), int);
	      if (!isNaN(result)) {
	        return assert.returnType(result, int);
	      }
	    }
	    throw new NumberParseError("Invalid integer literal when parsing " + text + " in base " + radix);
	  }),
	  parseFloat: (function (_parseFloat) {
	    function parseFloat(_x3) {
	      return _parseFloat.apply(this, arguments);
	    }

	    parseFloat.toString = function () {
	      return _parseFloat.toString();
	    };

	    return parseFloat;
	  })(function (text) {
	    assert.argumentTypes(text, assert.type.string);
	    return assert.returnType(parseFloat(text), assert.type.number);
	  }),

	  isNaN: (function (_isNaN) {
	    function isNaN(_x4) {
	      return _isNaN.apply(this, arguments);
	    }

	    isNaN.toString = function () {
	      return _isNaN.toString();
	    };

	    return isNaN;
	  })(function (value) {
	    return assert.returnType(isNaN(value), assert.type.boolean);
	  }),
	  isInteger: function isInteger(value) {
	    return assert.returnType(Number.isInteger(value), assert.type.boolean);
	  }
	}, {
	  NaN: {
	    get: function get() {
	      return assert.returnType(NaN, assert.type.number);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}));
	Object.defineProperty(NumberWrapper.toFixed, "parameters", { get: function get() {
	    return [[assert.type.number], [int]];
	  } });
	Object.defineProperty(NumberWrapper.parseIntAutoRadix, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(NumberWrapper.parseInt, "parameters", { get: function get() {
	    return [[assert.type.string], [int]];
	  } });
	Object.defineProperty(NumberWrapper.parseFloat, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var RegExp;
	if (assertionsEnabled_) {
	  RegExp = assert.define('RegExp', function (obj) {
	    assert(obj).is(assert.structure({
	      single: _global.RegExp,
	      multiple: _global.RegExp
	    }));
	  });
	} else {
	  RegExp = {};
	}
	var RegExpWrapper = function RegExpWrapper() {
	  ;
	};
	$traceurRuntime.createClass(RegExpWrapper, {}, {
	  create: function create(regExpStr) {
	    var flags = arguments[1] !== void 0 ? arguments[1] : '';
	    assert.argumentTypes(regExpStr, assert.type.any, flags, assert.type.string);
	    flags = flags.replace(/g/g, '');
	    return assert.returnType({
	      multiple: new _global.RegExp(regExpStr, flags + 'g'),
	      single: new _global.RegExp(regExpStr, flags)
	    }, RegExp);
	  },
	  firstMatch: function firstMatch(regExp, input) {
	    return input.match(regExp.single);
	  },
	  matcher: function matcher(regExp, input) {
	    regExp.multiple.lastIndex = 0;
	    return {
	      re: regExp.multiple,
	      input: input
	    };
	  }
	});
	Object.defineProperty(RegExpWrapper.create, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	var RegExpMatcherWrapper = function RegExpMatcherWrapper() {
	  ;
	};
	$traceurRuntime.createClass(RegExpMatcherWrapper, {}, { next: function next(matcher) {
	    return matcher.re.exec(matcher.input);
	  } });
	var FunctionWrapper = function FunctionWrapper() {
	  ;
	};
	$traceurRuntime.createClass(FunctionWrapper, {}, { apply: function apply(fn, posArgs) {
	    assert.argumentTypes(fn, Function, posArgs, assert.type.any);
	    return fn.apply(null, posArgs);
	  } });
	Object.defineProperty(FunctionWrapper.apply, "parameters", { get: function get() {
	    return [[Function], []];
	  } });
	var BaseException = Error;
	function looseIdentical(a, b) {
	  return assert.returnType(a === b || typeof a === "number" && typeof b === "number" && isNaN(a) && isNaN(b), assert.type.boolean);
	}
	function getMapKey(value) {
	  return value;
	}
	function normalizeBlank(obj) {
	  return isBlank(obj) ? null : obj;
	}
	function isJsObject(o) {
	  return assert.returnType(o !== null && (typeof o === "function" || typeof o === "object"), assert.type.boolean);
	}
	function assertionsEnabled() {
	  return assert.returnType(assertionsEnabled_, assert.type.boolean);
	}
	function print(obj) {
	  if (obj instanceof Error) {
	    console.log(obj.stack);
	  } else {
	    console.log(obj);
	  }
	}
	var Json = _global.JSON;
	var DateWrapper = function DateWrapper() {
	  ;
	};
	$traceurRuntime.createClass(DateWrapper, {}, {
	  fromMillis: function fromMillis(ms) {
	    return new Date(ms);
	  },
	  toMillis: function toMillis(date) {
	    assert.argumentTypes(date, Date);
	    return date.getTime();
	  },
	  now: function now() {
	    return new Date();
	  },
	  toJson: function toJson(date) {
	    return date.toJSON();
	  }
	});
	Object.defineProperty(DateWrapper.toMillis, "parameters", { get: function get() {
	    return [[Date]];
	  } });
	//# sourceMappingURL=lang.es6.map

	//# sourceMappingURL=./lang.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  List: { get: function get() {
	      return List;
	    } },
	  Map: { get: function get() {
	      return Map;
	    } },
	  Set: { get: function get() {
	      return Set;
	    } },
	  StringMap: { get: function get() {
	      return StringMap;
	    } },
	  MapWrapper: { get: function get() {
	      return MapWrapper;
	    } },
	  StringMapWrapper: { get: function get() {
	      return StringMapWrapper;
	    } },
	  ListWrapper: { get: function get() {
	      return ListWrapper;
	    } },
	  isListLikeIterable: { get: function get() {
	      return isListLikeIterable;
	    } },
	  iterateListLike: { get: function get() {
	      return iterateListLike;
	    } },
	  SetWrapper: { get: function get() {
	      return SetWrapper;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__1.int,
	    isJsObject = $__1.isJsObject,
	    global = $__1.global;
	var List = global.Array;
	var Map = global.Map;
	var Set = global.Set;
	var StringMap = global.Object;
	var MapWrapper = function MapWrapper() {
	  ;
	};
	var $MapWrapper = MapWrapper;
	$traceurRuntime.createClass(MapWrapper, {}, {
	  create: function create() {
	    return assert.returnType(new Map(), Map);
	  },
	  clone: function clone(m) {
	    assert.argumentTypes(m, Map);
	    return assert.returnType(new Map(m), Map);
	  },
	  createFromStringMap: function createFromStringMap(stringMap) {
	    var result = $MapWrapper.create();
	    for (var prop in stringMap) {
	      $MapWrapper.set(result, prop, stringMap[prop]);
	    }
	    return assert.returnType(result, Map);
	  },
	  createFromPairs: function createFromPairs(pairs) {
	    assert.argumentTypes(pairs, List);
	    return assert.returnType(new Map(pairs), Map);
	  },
	  get: function get(m, k) {
	    return m.get(k);
	  },
	  set: function set(m, k, v) {
	    m.set(k, v);
	  },
	  contains: function contains(m, k) {
	    return m.has(k);
	  },
	  forEach: function forEach(m, fn) {
	    m.forEach(fn);
	  },
	  size: function size(m) {
	    return m.size;
	  },
	  "delete": function _delete(m, k) {
	    m["delete"](k);
	  },
	  clear: function clear(m) {
	    m.clear();
	  },
	  clearValues: function clearValues(m) {
	    var keyIterator = m.keys();
	    var k;
	    while (!(k = keyIterator.next()).done) {
	      m.set(k.value, null);
	    }
	  },
	  iterable: function iterable(m) {
	    return m;
	  },
	  keys: function keys(m) {
	    return m.keys();
	  },
	  values: function values(m) {
	    return m.values();
	  }
	});
	Object.defineProperty(MapWrapper.clone, "parameters", { get: function get() {
	    return [[Map]];
	  } });
	Object.defineProperty(MapWrapper.createFromPairs, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var StringMapWrapper = function StringMapWrapper() {
	  ;
	};
	$traceurRuntime.createClass(StringMapWrapper, {}, {
	  create: function create() {
	    return assert.returnType({}, Object);
	  },
	  contains: function contains(map, key) {
	    return map.hasOwnProperty(key);
	  },
	  get: function get(map, key) {
	    return map.hasOwnProperty(key) ? map[key] : undefined;
	  },
	  set: function set(map, key, value) {
	    map[key] = value;
	  },
	  isEmpty: function isEmpty(map) {
	    for (var prop in map) {
	      return false;
	    }
	    return true;
	  },
	  forEach: function forEach(map, callback) {
	    for (var prop in map) {
	      if (map.hasOwnProperty(prop)) {
	        callback(map[prop], prop);
	      }
	    }
	  },
	  merge: function merge(m1, m2) {
	    var m = {};
	    for (var attr in m1) {
	      if (m1.hasOwnProperty(attr)) {
	        m[attr] = m1[attr];
	      }
	    }
	    for (var attr in m2) {
	      if (m2.hasOwnProperty(attr)) {
	        m[attr] = m2[attr];
	      }
	    }
	    return m;
	  }
	});
	var ListWrapper = function ListWrapper() {
	  ;
	};
	var $ListWrapper = ListWrapper;
	$traceurRuntime.createClass(ListWrapper, {}, {
	  create: function create() {
	    return assert.returnType(new List(), List);
	  },
	  createFixedSize: function createFixedSize(size) {
	    return assert.returnType(new List(size), List);
	  },
	  get: function get(m, k) {
	    return m[k];
	  },
	  set: function set(m, k, v) {
	    m[k] = v;
	  },
	  clone: function clone(array) {
	    assert.argumentTypes(array, List);
	    return array.slice(0);
	  },
	  map: function map(array, fn) {
	    return array.map(fn);
	  },
	  forEach: function forEach(array, fn) {
	    assert.argumentTypes(array, List, fn, Function);
	    for (var i = 0; i < array.length; i++) {
	      fn(array[i]);
	    }
	  },
	  push: function push(array, el) {
	    array.push(el);
	  },
	  first: function first(array) {
	    if (!array) return null;
	    return array[0];
	  },
	  last: function last(array) {
	    if (!array || array.length == 0) return null;
	    return array[array.length - 1];
	  },
	  find: function find(list, pred) {
	    assert.argumentTypes(list, List, pred, Function);
	    for (var i = 0; i < list.length; ++i) {
	      if (pred(list[i])) return list[i];
	    }
	    return null;
	  },
	  reduce: function reduce(list, fn, init) {
	    assert.argumentTypes(list, List, fn, Function, init, assert.type.any);
	    return list.reduce(fn, init);
	  },
	  filter: function filter(array, pred) {
	    assert.argumentTypes(array, assert.type.any, pred, Function);
	    return array.filter(pred);
	  },
	  any: function any(list, pred) {
	    assert.argumentTypes(list, List, pred, Function);
	    for (var i = 0; i < list.length; ++i) {
	      if (pred(list[i])) return true;
	    }
	    return false;
	  },
	  contains: function contains(list, el) {
	    assert.argumentTypes(list, List, el, assert.type.any);
	    return list.indexOf(el) !== -1;
	  },
	  reversed: function reversed(array) {
	    var a = $ListWrapper.clone(array);
	    return a.reverse();
	  },
	  concat: function concat(a, b) {
	    return a.concat(b);
	  },
	  isList: function isList(list) {
	    return Array.isArray(list);
	  },
	  insert: function insert(list, index, value) {
	    assert.argumentTypes(list, assert.type.any, index, int, value, assert.type.any);
	    list.splice(index, 0, value);
	  },
	  removeAt: function removeAt(list, index) {
	    assert.argumentTypes(list, assert.type.any, index, int);
	    var res = list[index];
	    list.splice(index, 1);
	    return res;
	  },
	  removeAll: function removeAll(list, items) {
	    for (var i = 0; i < items.length; ++i) {
	      var index = list.indexOf(items[i]);
	      list.splice(index, 1);
	    }
	  },
	  removeLast: function removeLast(list) {
	    assert.argumentTypes(list, List);
	    return list.pop();
	  },
	  remove: function remove(list, el) {
	    var index = list.indexOf(el);
	    if (index > -1) {
	      list.splice(index, 1);
	      return assert.returnType(true, assert.type.boolean);
	    }
	    return assert.returnType(false, assert.type.boolean);
	  },
	  clear: function clear(list) {
	    list.splice(0, list.length);
	  },
	  join: function join(list, s) {
	    return list.join(s);
	  },
	  isEmpty: function isEmpty(list) {
	    return list.length == 0;
	  },
	  fill: function fill(list, value) {
	    var start = arguments[2] !== void 0 ? arguments[2] : 0;
	    var end = arguments[3] !== void 0 ? arguments[3] : null;
	    assert.argumentTypes(list, List, value, assert.type.any, start, int, end, int);
	    list.fill(value, start, end === null ? undefined : end);
	  },
	  equals: function equals(a, b) {
	    assert.argumentTypes(a, List, b, List);
	    if (a.length != b.length) return assert.returnType(false, assert.type.boolean);
	    for (var i = 0; i < a.length; ++i) {
	      if (a[i] !== b[i]) return assert.returnType(false, assert.type.boolean);
	    }
	    return assert.returnType(true, assert.type.boolean);
	  },
	  slice: function slice(l, from, to) {
	    assert.argumentTypes(l, List, from, int, to, int);
	    return assert.returnType(l.slice(from, to), List);
	  },
	  sort: function sort(l, compareFn) {
	    assert.argumentTypes(l, List, compareFn, Function);
	    l.sort(compareFn);
	  }
	});
	Object.defineProperty(ListWrapper.clone, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(ListWrapper.forEach, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.find, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.reduce, "parameters", { get: function get() {
	    return [[List], [Function], []];
	  } });
	Object.defineProperty(ListWrapper.filter, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	Object.defineProperty(ListWrapper.any, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.contains, "parameters", { get: function get() {
	    return [[List], []];
	  } });
	Object.defineProperty(ListWrapper.insert, "parameters", { get: function get() {
	    return [[], [int], []];
	  } });
	Object.defineProperty(ListWrapper.removeAt, "parameters", { get: function get() {
	    return [[], [int]];
	  } });
	Object.defineProperty(ListWrapper.removeLast, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(ListWrapper.fill, "parameters", { get: function get() {
	    return [[List], [], [int], [int]];
	  } });
	Object.defineProperty(ListWrapper.equals, "parameters", { get: function get() {
	    return [[List], [List]];
	  } });
	Object.defineProperty(ListWrapper.slice, "parameters", { get: function get() {
	    return [[List], [int], [int]];
	  } });
	Object.defineProperty(ListWrapper.sort, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	function isListLikeIterable(obj) {
	  if (!isJsObject(obj)) return assert.returnType(false, assert.type.boolean);
	  return assert.returnType(ListWrapper.isList(obj) || !(obj instanceof Map) && Symbol.iterator in obj, assert.type.boolean);
	}
	function iterateListLike(obj, fn) {
	  assert.argumentTypes(obj, assert.type.any, fn, Function);
	  if (ListWrapper.isList(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      fn(obj[i]);
	    }
	  } else {
	    var iterator = obj[Symbol.iterator]();
	    var item;
	    while (!(item = iterator.next()).done) {
	      fn(item.value);
	    }
	  }
	}
	Object.defineProperty(iterateListLike, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	var SetWrapper = function SetWrapper() {
	  ;
	};
	$traceurRuntime.createClass(SetWrapper, {}, {
	  createFromList: function createFromList(lst) {
	    assert.argumentTypes(lst, List);
	    return new Set(lst);
	  },
	  has: function has(s, key) {
	    assert.argumentTypes(s, Set, key, assert.type.any);
	    return assert.returnType(s.has(key), assert.type.boolean);
	  }
	});
	Object.defineProperty(SetWrapper.createFromList, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(SetWrapper.has, "parameters", { get: function get() {
	    return [[Set], []];
	  } });
	//# sourceMappingURL=collection.es6.map

	//# sourceMappingURL=./collection.map

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  TOKEN_TYPE_CHARACTER: { get: function get() {
	      return TOKEN_TYPE_CHARACTER;
	    } },
	  TOKEN_TYPE_IDENTIFIER: { get: function get() {
	      return TOKEN_TYPE_IDENTIFIER;
	    } },
	  TOKEN_TYPE_KEYWORD: { get: function get() {
	      return TOKEN_TYPE_KEYWORD;
	    } },
	  TOKEN_TYPE_STRING: { get: function get() {
	      return TOKEN_TYPE_STRING;
	    } },
	  TOKEN_TYPE_OPERATOR: { get: function get() {
	      return TOKEN_TYPE_OPERATOR;
	    } },
	  TOKEN_TYPE_NUMBER: { get: function get() {
	      return TOKEN_TYPE_NUMBER;
	    } },
	  Lexer: { get: function get() {
	      return Lexer;
	    } },
	  Token: { get: function get() {
	      return Token;
	    } },
	  EOF: { get: function get() {
	      return EOF;
	    } },
	  $EOF: { get: function get() {
	      return $EOF;
	    } },
	  $TAB: { get: function get() {
	      return $TAB;
	    } },
	  $LF: { get: function get() {
	      return $LF;
	    } },
	  $VTAB: { get: function get() {
	      return $VTAB;
	    } },
	  $FF: { get: function get() {
	      return $FF;
	    } },
	  $CR: { get: function get() {
	      return $CR;
	    } },
	  $SPACE: { get: function get() {
	      return $SPACE;
	    } },
	  $BANG: { get: function get() {
	      return $BANG;
	    } },
	  $DQ: { get: function get() {
	      return $DQ;
	    } },
	  $HASH: { get: function get() {
	      return $HASH;
	    } },
	  $$: { get: function get() {
	      return $$;
	    } },
	  $PERCENT: { get: function get() {
	      return $PERCENT;
	    } },
	  $AMPERSAND: { get: function get() {
	      return $AMPERSAND;
	    } },
	  $SQ: { get: function get() {
	      return $SQ;
	    } },
	  $LPAREN: { get: function get() {
	      return $LPAREN;
	    } },
	  $RPAREN: { get: function get() {
	      return $RPAREN;
	    } },
	  $STAR: { get: function get() {
	      return $STAR;
	    } },
	  $PLUS: { get: function get() {
	      return $PLUS;
	    } },
	  $COMMA: { get: function get() {
	      return $COMMA;
	    } },
	  $MINUS: { get: function get() {
	      return $MINUS;
	    } },
	  $PERIOD: { get: function get() {
	      return $PERIOD;
	    } },
	  $SLASH: { get: function get() {
	      return $SLASH;
	    } },
	  $COLON: { get: function get() {
	      return $COLON;
	    } },
	  $SEMICOLON: { get: function get() {
	      return $SEMICOLON;
	    } },
	  $LT: { get: function get() {
	      return $LT;
	    } },
	  $EQ: { get: function get() {
	      return $EQ;
	    } },
	  $GT: { get: function get() {
	      return $GT;
	    } },
	  $QUESTION: { get: function get() {
	      return $QUESTION;
	    } },
	  $LBRACKET: { get: function get() {
	      return $LBRACKET;
	    } },
	  $BACKSLASH: { get: function get() {
	      return $BACKSLASH;
	    } },
	  $RBRACKET: { get: function get() {
	      return $RBRACKET;
	    } },
	  $LBRACE: { get: function get() {
	      return $LBRACE;
	    } },
	  $BAR: { get: function get() {
	      return $BAR;
	    } },
	  $RBRACE: { get: function get() {
	      return $RBRACE;
	    } },
	  ScannerError: { get: function get() {
	      return ScannerError;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    SetWrapper = $__2.SetWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__3.int,
	    NumberWrapper = $__3.NumberWrapper,
	    StringJoiner = $__3.StringJoiner,
	    StringWrapper = $__3.StringWrapper;
	var TOKEN_TYPE_CHARACTER = 1;
	var TOKEN_TYPE_IDENTIFIER = 2;
	var TOKEN_TYPE_KEYWORD = 3;
	var TOKEN_TYPE_STRING = 4;
	var TOKEN_TYPE_OPERATOR = 5;
	var TOKEN_TYPE_NUMBER = 6;
	var Lexer = function Lexer() {
	  ;
	};
	$traceurRuntime.createClass(Lexer, { tokenize: function tokenize(text) {
	    assert.argumentTypes(text, assert.type.string);
	    var scanner = new _Scanner(text);
	    var tokens = [];
	    var token = scanner.scanToken();
	    while (token != null) {
	      ListWrapper.push(tokens, token);
	      token = scanner.scanToken();
	    }
	    return assert.returnType(tokens, List);
	  } }, {});
	Object.defineProperty(Lexer, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(Lexer.prototype.tokenize, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var Token = function Token(index, type, numValue, strValue) {
	  assert.argumentTypes(index, int, type, int, numValue, assert.type.number, strValue, assert.type.string);
	  this.index = index;
	  this.type = type;
	  this._numValue = numValue;
	  this._strValue = strValue;
	};
	$traceurRuntime.createClass(Token, {
	  isCharacter: function isCharacter(code) {
	    assert.argumentTypes(code, int);
	    return assert.returnType(this.type == TOKEN_TYPE_CHARACTER && this._numValue == code, assert.type.boolean);
	  },
	  isNumber: function isNumber() {
	    return assert.returnType(this.type == TOKEN_TYPE_NUMBER, assert.type.boolean);
	  },
	  isString: function isString() {
	    return assert.returnType(this.type == TOKEN_TYPE_STRING, assert.type.boolean);
	  },
	  isOperator: function isOperator(operater) {
	    assert.argumentTypes(operater, assert.type.string);
	    return assert.returnType(this.type == TOKEN_TYPE_OPERATOR && this._strValue == operater, assert.type.boolean);
	  },
	  isIdentifier: function isIdentifier() {
	    return assert.returnType(this.type == TOKEN_TYPE_IDENTIFIER, assert.type.boolean);
	  },
	  isKeyword: function isKeyword() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD, assert.type.boolean);
	  },
	  isKeywordVar: function isKeywordVar() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "var", assert.type.boolean);
	  },
	  isKeywordNull: function isKeywordNull() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "null", assert.type.boolean);
	  },
	  isKeywordUndefined: function isKeywordUndefined() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "undefined", assert.type.boolean);
	  },
	  isKeywordTrue: function isKeywordTrue() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "true", assert.type.boolean);
	  },
	  isKeywordFalse: function isKeywordFalse() {
	    return assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "false", assert.type.boolean);
	  },
	  toNumber: function toNumber() {
	    return assert.returnType(this.type == TOKEN_TYPE_NUMBER ? this._numValue : -1, assert.type.number);
	  },
	  toString: function toString() {
	    var type = assert.type(this.type, int);
	    if (type >= TOKEN_TYPE_CHARACTER && type <= TOKEN_TYPE_STRING) {
	      return assert.returnType(this._strValue, assert.type.string);
	    } else if (type == TOKEN_TYPE_NUMBER) {
	      return assert.returnType(this._numValue.toString(), assert.type.string);
	    } else {
	      return assert.returnType(null, assert.type.string);
	    }
	  }
	}, {});
	Object.defineProperty(Token, "parameters", { get: function get() {
	    return [[int], [int], [assert.type.number], [assert.type.string]];
	  } });
	Object.defineProperty(Token.prototype.isCharacter, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(Token.prototype.isOperator, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function newCharacterToken(index, code) {
	  assert.argumentTypes(index, int, code, int);
	  return assert.returnType(new Token(index, TOKEN_TYPE_CHARACTER, code, StringWrapper.fromCharCode(code)), Token);
	}
	Object.defineProperty(newCharacterToken, "parameters", { get: function get() {
	    return [[int], [int]];
	  } });
	function newIdentifierToken(index, text) {
	  assert.argumentTypes(index, int, text, assert.type.string);
	  return assert.returnType(new Token(index, TOKEN_TYPE_IDENTIFIER, 0, text), Token);
	}
	Object.defineProperty(newIdentifierToken, "parameters", { get: function get() {
	    return [[int], [assert.type.string]];
	  } });
	function newKeywordToken(index, text) {
	  assert.argumentTypes(index, int, text, assert.type.string);
	  return assert.returnType(new Token(index, TOKEN_TYPE_KEYWORD, 0, text), Token);
	}
	Object.defineProperty(newKeywordToken, "parameters", { get: function get() {
	    return [[int], [assert.type.string]];
	  } });
	function newOperatorToken(index, text) {
	  assert.argumentTypes(index, int, text, assert.type.string);
	  return assert.returnType(new Token(index, TOKEN_TYPE_OPERATOR, 0, text), Token);
	}
	Object.defineProperty(newOperatorToken, "parameters", { get: function get() {
	    return [[int], [assert.type.string]];
	  } });
	function newStringToken(index, text) {
	  assert.argumentTypes(index, int, text, assert.type.string);
	  return assert.returnType(new Token(index, TOKEN_TYPE_STRING, 0, text), Token);
	}
	Object.defineProperty(newStringToken, "parameters", { get: function get() {
	    return [[int], [assert.type.string]];
	  } });
	function newNumberToken(index, n) {
	  assert.argumentTypes(index, int, n, assert.type.number);
	  return assert.returnType(new Token(index, TOKEN_TYPE_NUMBER, n, ""), Token);
	}
	Object.defineProperty(newNumberToken, "parameters", { get: function get() {
	    return [[int], [assert.type.number]];
	  } });
	var EOF = assert.type(new Token(-1, 0, 0, ""), Token);
	var $EOF = 0;
	var $TAB = 9;
	var $LF = 10;
	var $VTAB = 11;
	var $FF = 12;
	var $CR = 13;
	var $SPACE = 32;
	var $BANG = 33;
	var $DQ = 34;
	var $HASH = 35;
	var $$ = 36;
	var $PERCENT = 37;
	var $AMPERSAND = 38;
	var $SQ = 39;
	var $LPAREN = 40;
	var $RPAREN = 41;
	var $STAR = 42;
	var $PLUS = 43;
	var $COMMA = 44;
	var $MINUS = 45;
	var $PERIOD = 46;
	var $SLASH = 47;
	var $COLON = 58;
	var $SEMICOLON = 59;
	var $LT = 60;
	var $EQ = 61;
	var $GT = 62;
	var $QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65,
	    $B = 66,
	    $C = 67,
	    $D = 68,
	    $E = 69,
	    $F = 70,
	    $G = 71,
	    $H = 72,
	    $I = 73,
	    $J = 74,
	    $K = 75,
	    $L = 76,
	    $M = 77,
	    $N = 78,
	    $O = 79,
	    $P = 80,
	    $Q = 81,
	    $R = 82,
	    $S = 83,
	    $T = 84,
	    $U = 85,
	    $V = 86,
	    $W = 87,
	    $X = 88,
	    $Y = 89,
	    $Z = 90;
	var $LBRACKET = 91;
	var $BACKSLASH = 92;
	var $RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97,
	    $b = 98,
	    $c = 99,
	    $d = 100,
	    $e = 101,
	    $f = 102,
	    $g = 103,
	    $h = 104,
	    $i = 105,
	    $j = 106,
	    $k = 107,
	    $l = 108,
	    $m = 109,
	    $n = 110,
	    $o = 111,
	    $p = 112,
	    $q = 113,
	    $r = 114,
	    $s = 115,
	    $t = 116,
	    $u = 117,
	    $v = 118,
	    $w = 119,
	    $x = 120,
	    $y = 121,
	    $z = 122;
	var $LBRACE = 123;
	var $BAR = 124;
	var $RBRACE = 125;
	var $TILDE = 126;
	var $NBSP = 160;
	var ScannerError = function ScannerError(message) {
	  $traceurRuntime.superConstructor($ScannerError).call(this);
	  this.message = message;
	};
	var $ScannerError = ScannerError;
	$traceurRuntime.createClass(ScannerError, { toString: function toString() {
	    return this.message;
	  } }, {}, Error);
	var _Scanner = function _Scanner(input) {
	  assert.argumentTypes(input, assert.type.string);
	  this.input = input;
	  this.length = input.length;
	  this.peek = 0;
	  this.index = -1;
	  this.advance();
	};
	$traceurRuntime.createClass(_Scanner, {
	  advance: function advance() {
	    this.peek = ++this.index >= this.length ? $EOF : StringWrapper.charCodeAt(this.input, this.index);
	  },
	  scanToken: function scanToken() {
	    var input = this.input,
	        length = this.length,
	        peek = this.peek,
	        index = this.index;
	    while (peek <= $SPACE) {
	      if (++index >= length) {
	        peek = $EOF;
	        break;
	      } else {
	        peek = StringWrapper.charCodeAt(input, index);
	      }
	    }
	    this.peek = peek;
	    this.index = index;
	    if (index >= length) {
	      return assert.returnType(null, Token);
	    }
	    if (isIdentifierStart(peek)) return assert.returnType(this.scanIdentifier(), Token);
	    if (isDigit(peek)) return assert.returnType(this.scanNumber(index), Token);
	    var start = assert.type(index, int);
	    switch (peek) {
	      case $PERIOD:
	        this.advance();
	        return assert.returnType(isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD), Token);
	      case $LPAREN:
	      case $RPAREN:
	      case $LBRACE:
	      case $RBRACE:
	      case $LBRACKET:
	      case $RBRACKET:
	      case $COMMA:
	      case $COLON:
	      case $SEMICOLON:
	        return assert.returnType(this.scanCharacter(start, peek), Token);
	      case $SQ:
	      case $DQ:
	        return assert.returnType(this.scanString(), Token);
	      case $HASH:
	        return assert.returnType(this.scanOperator(start, StringWrapper.fromCharCode(peek)), Token);
	      case $PLUS:
	      case $MINUS:
	      case $STAR:
	      case $SLASH:
	      case $PERCENT:
	      case $CARET:
	      case $QUESTION:
	        return assert.returnType(this.scanOperator(start, StringWrapper.fromCharCode(peek)), Token);
	      case $LT:
	      case $GT:
	      case $BANG:
	      case $EQ:
	        return assert.returnType(this.scanComplexOperator(start, $EQ, StringWrapper.fromCharCode(peek), '='), Token);
	      case $AMPERSAND:
	        return assert.returnType(this.scanComplexOperator(start, $AMPERSAND, '&', '&'), Token);
	      case $BAR:
	        return assert.returnType(this.scanComplexOperator(start, $BAR, '|', '|'), Token);
	      case $TILDE:
	        return assert.returnType(this.scanComplexOperator(start, $SLASH, '~', '/'), Token);
	      case $NBSP:
	        while (isWhitespace(this.peek)) this.advance();
	        return assert.returnType(this.scanToken(), Token);
	    }
	    this.error("Unexpected character [" + StringWrapper.fromCharCode(peek) + "]", 0);
	    return assert.returnType(null, Token);
	  },
	  scanCharacter: function scanCharacter(start, code) {
	    assert.argumentTypes(start, int, code, int);
	    assert(this.peek == code);
	    this.advance();
	    return assert.returnType(newCharacterToken(start, code), Token);
	  },
	  scanOperator: function scanOperator(start, str) {
	    assert.argumentTypes(start, int, str, assert.type.string);
	    assert(this.peek == StringWrapper.charCodeAt(str, 0));
	    assert(SetWrapper.has(OPERATORS, str));
	    this.advance();
	    return assert.returnType(newOperatorToken(start, str), Token);
	  },
	  scanComplexOperator: function scanComplexOperator(start, code, one, two) {
	    assert.argumentTypes(start, int, code, int, one, assert.type.string, two, assert.type.string);
	    assert(this.peek == StringWrapper.charCodeAt(one, 0));
	    this.advance();
	    var str = assert.type(one, assert.type.string);
	    if (this.peek == code) {
	      this.advance();
	      str += two;
	    }
	    assert(SetWrapper.has(OPERATORS, str));
	    return assert.returnType(newOperatorToken(start, str), Token);
	  },
	  scanIdentifier: function scanIdentifier() {
	    assert(isIdentifierStart(this.peek));
	    var start = assert.type(this.index, int);
	    this.advance();
	    while (isIdentifierPart(this.peek)) this.advance();
	    var str = assert.type(this.input.substring(start, this.index), assert.type.string);
	    if (SetWrapper.has(KEYWORDS, str)) {
	      return assert.returnType(newKeywordToken(start, str), Token);
	    } else {
	      return assert.returnType(newIdentifierToken(start, str), Token);
	    }
	  },
	  scanNumber: function scanNumber(start) {
	    assert.argumentTypes(start, int);
	    assert(isDigit(this.peek));
	    var simple = assert.type(this.index === start, assert.type.boolean);
	    this.advance();
	    while (true) {
	      if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
	        simple = false;
	      } else if (isExponentStart(this.peek)) {
	        this.advance();
	        if (isExponentSign(this.peek)) this.advance();
	        if (!isDigit(this.peek)) this.error('Invalid exponent', -1);
	        simple = false;
	      } else {
	        break;
	      }
	      this.advance();
	    }
	    var str = assert.type(this.input.substring(start, this.index), assert.type.string);
	    var value = assert.type(simple ? NumberWrapper.parseIntAutoRadix(str) : NumberWrapper.parseFloat(str), assert.type.number);
	    return assert.returnType(newNumberToken(start, value), Token);
	  },
	  scanString: function scanString() {
	    assert(this.peek == $SQ || this.peek == $DQ);
	    var start = assert.type(this.index, int);
	    var quote = assert.type(this.peek, int);
	    this.advance();
	    var buffer;
	    var marker = assert.type(this.index, int);
	    var input = assert.type(this.input, assert.type.string);
	    while (this.peek != quote) {
	      if (this.peek == $BACKSLASH) {
	        if (buffer == null) buffer = new StringJoiner();
	        buffer.add(input.substring(marker, this.index));
	        this.advance();
	        var unescapedCode = void 0;
	        if (this.peek == $u) {
	          var hex = assert.type(input.substring(this.index + 1, this.index + 5), assert.type.string);
	          try {
	            unescapedCode = NumberWrapper.parseInt(hex, 16);
	          } catch (e) {
	            this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	          }
	          for (var i = assert.type(0, int); i < 5; i++) {
	            this.advance();
	          }
	        } else {
	          unescapedCode = unescape(this.peek);
	          this.advance();
	        }
	        buffer.add(StringWrapper.fromCharCode(unescapedCode));
	        marker = this.index;
	      } else if (this.peek == $EOF) {
	        this.error('Unterminated quote', 0);
	      } else {
	        this.advance();
	      }
	    }
	    var last = assert.type(input.substring(marker, this.index), assert.type.string);
	    this.advance();
	    var unescaped = assert.type(last, assert.type.string);
	    if (buffer != null) {
	      buffer.add(last);
	      unescaped = buffer.toString();
	    }
	    return assert.returnType(newStringToken(start, unescaped), Token);
	  },
	  error: function error(message, offset) {
	    assert.argumentTypes(message, assert.type.string, offset, int);
	    var position = assert.type(this.index + offset, int);
	    throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	  }
	}, {});
	Object.defineProperty(_Scanner, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanCharacter, "parameters", { get: function get() {
	    return [[int], [int]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanOperator, "parameters", { get: function get() {
	    return [[int], [assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanComplexOperator, "parameters", { get: function get() {
	    return [[int], [int], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanNumber, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(_Scanner.prototype.error, "parameters", { get: function get() {
	    return [[assert.type.string], [int]];
	  } });
	function isWhitespace(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType(code >= $TAB && code <= $SPACE || code == $NBSP, assert.type.boolean);
	}
	Object.defineProperty(isWhitespace, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function isIdentifierStart(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType($a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$, assert.type.boolean);
	}
	Object.defineProperty(isIdentifierStart, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function isIdentifierPart(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType($a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code == $_ || code == $$, assert.type.boolean);
	}
	Object.defineProperty(isIdentifierPart, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function isDigit(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType($0 <= code && code <= $9, assert.type.boolean);
	}
	Object.defineProperty(isDigit, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function isExponentStart(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType(code == $e || code == $E, assert.type.boolean);
	}
	Object.defineProperty(isExponentStart, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function isExponentSign(code) {
	  assert.argumentTypes(code, int);
	  return assert.returnType(code == $MINUS || code == $PLUS, assert.type.boolean);
	}
	Object.defineProperty(isExponentSign, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function unescape(code) {
	  assert.argumentTypes(code, int);
	  switch (code) {
	    case $n:
	      return assert.returnType($LF, int);
	    case $f:
	      return assert.returnType($FF, int);
	    case $r:
	      return assert.returnType($CR, int);
	    case $t:
	      return assert.returnType($TAB, int);
	    case $v:
	      return assert.returnType($VTAB, int);
	    default:
	      return assert.returnType(code, int);
	  }
	}
	Object.defineProperty(unescape, "parameters", { get: function get() {
	    return [[int]];
	  } });
	var OPERATORS = SetWrapper.createFromList(['+', '-', '*', '/', '~/', '%', '^', '=', '==', '!=', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?', '#']);
	var KEYWORDS = SetWrapper.createFromList(['var', 'null', 'undefined', 'true', 'false']);
	//# sourceMappingURL=lexer.js.map

	//# sourceMappingURL=./lexer.map

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Inject: { get: function get() {
	      return $__src_47_di_47_annotations__.Inject;
	    } },
	  InjectPromise: { get: function get() {
	      return $__src_47_di_47_annotations__.InjectPromise;
	    } },
	  InjectLazy: { get: function get() {
	      return $__src_47_di_47_annotations__.InjectLazy;
	    } },
	  Injectable: { get: function get() {
	      return $__src_47_di_47_annotations__.Injectable;
	    } },
	  Optional: { get: function get() {
	      return $__src_47_di_47_annotations__.Optional;
	    } },
	  DependencyAnnotation: { get: function get() {
	      return $__src_47_di_47_annotations__.DependencyAnnotation;
	    } },
	  Injector: { get: function get() {
	      return $__src_47_di_47_injector__.Injector;
	    } },
	  Binding: { get: function get() {
	      return $__src_47_di_47_binding__.Binding;
	    } },
	  Dependency: { get: function get() {
	      return $__src_47_di_47_binding__.Dependency;
	    } },
	  bind: { get: function get() {
	      return $__src_47_di_47_binding__.bind;
	    } },
	  Key: { get: function get() {
	      return $__src_47_di_47_key__.Key;
	    } },
	  KeyRegistry: { get: function get() {
	      return $__src_47_di_47_key__.KeyRegistry;
	    } },
	  KeyMetadataError: { get: function get() {
	      return $__src_47_di_47_exceptions__.KeyMetadataError;
	    } },
	  NoProviderError: { get: function get() {
	      return $__src_47_di_47_exceptions__.NoProviderError;
	    } },
	  ProviderError: { get: function get() {
	      return $__src_47_di_47_exceptions__.ProviderError;
	    } },
	  AsyncBindingError: { get: function get() {
	      return $__src_47_di_47_exceptions__.AsyncBindingError;
	    } },
	  CyclicDependencyError: { get: function get() {
	      return $__src_47_di_47_exceptions__.CyclicDependencyError;
	    } },
	  InstantiationError: { get: function get() {
	      return $__src_47_di_47_exceptions__.InstantiationError;
	    } },
	  InvalidBindingError: { get: function get() {
	      return $__src_47_di_47_exceptions__.InvalidBindingError;
	    } },
	  NoAnnotationError: { get: function get() {
	      return $__src_47_di_47_exceptions__.NoAnnotationError;
	    } },
	  OpaqueToken: { get: function get() {
	      return $__src_47_di_47_opaque_95_token__.OpaqueToken;
	    } },
	  __esModule: { value: true }
	});
	var $__src_47_di_47_annotations__, $__src_47_di_47_injector__, $__src_47_di_47_binding__, $__src_47_di_47_key__, $__src_47_di_47_exceptions__, $__src_47_di_47_opaque_95_token__;
	var $__src_47_di_47_annotations__ = ($__src_47_di_47_annotations__ = __webpack_require__(10), $__src_47_di_47_annotations__ && $__src_47_di_47_annotations__.__esModule && $__src_47_di_47_annotations__ || { "default": $__src_47_di_47_annotations__ });
	var $__src_47_di_47_injector__ = ($__src_47_di_47_injector__ = __webpack_require__(11), $__src_47_di_47_injector__ && $__src_47_di_47_injector__.__esModule && $__src_47_di_47_injector__ || { "default": $__src_47_di_47_injector__ });
	var $__src_47_di_47_binding__ = ($__src_47_di_47_binding__ = __webpack_require__(12), $__src_47_di_47_binding__ && $__src_47_di_47_binding__.__esModule && $__src_47_di_47_binding__ || { "default": $__src_47_di_47_binding__ });
	var $__src_47_di_47_key__ = ($__src_47_di_47_key__ = __webpack_require__(17), $__src_47_di_47_key__ && $__src_47_di_47_key__.__esModule && $__src_47_di_47_key__ || { "default": $__src_47_di_47_key__ });
	var $__src_47_di_47_exceptions__ = ($__src_47_di_47_exceptions__ = __webpack_require__(18), $__src_47_di_47_exceptions__ && $__src_47_di_47_exceptions__.__esModule && $__src_47_di_47_exceptions__ || { "default": $__src_47_di_47_exceptions__ });
	var $__src_47_di_47_opaque_95_token__ = ($__src_47_di_47_opaque_95_token__ = __webpack_require__(23), $__src_47_di_47_opaque_95_token__ && $__src_47_di_47_opaque_95_token__.__esModule && $__src_47_di_47_opaque_95_token__ || { "default": $__src_47_di_47_opaque_95_token__ });
	//# sourceMappingURL=di.js.map

	//# sourceMappingURL=./di.map

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Inject: { get: function get() {
	      return Inject;
	    } },
	  InjectPromise: { get: function get() {
	      return InjectPromise;
	    } },
	  InjectLazy: { get: function get() {
	      return InjectLazy;
	    } },
	  Optional: { get: function get() {
	      return Optional;
	    } },
	  DependencyAnnotation: { get: function get() {
	      return DependencyAnnotation;
	    } },
	  Injectable: { get: function get() {
	      return Injectable;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__;
	var CONST = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).CONST;
	var Inject = function Inject(token) {
	  this.token = token;
	};
	$traceurRuntime.createClass(Inject, {}, {});
	Object.defineProperty(Inject, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var InjectPromise = function InjectPromise(token) {
	  this.token = token;
	};
	$traceurRuntime.createClass(InjectPromise, {}, {});
	Object.defineProperty(InjectPromise, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var InjectLazy = function InjectLazy(token) {
	  this.token = token;
	};
	$traceurRuntime.createClass(InjectLazy, {}, {});
	Object.defineProperty(InjectLazy, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Optional = function Optional() {};
	$traceurRuntime.createClass(Optional, {}, {});
	Object.defineProperty(Optional, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var DependencyAnnotation = function DependencyAnnotation() {};
	$traceurRuntime.createClass(DependencyAnnotation, {}, {});
	Object.defineProperty(DependencyAnnotation, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Injectable = function Injectable() {};
	$traceurRuntime.createClass(Injectable, {}, {});
	Object.defineProperty(Injectable, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	//# sourceMappingURL=annotations.js.map

	//# sourceMappingURL=./annotations.map

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Injector: { get: function get() {
	      return Injector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__binding__, $__exceptions__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_async__, $__key__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    Map = $__1.Map,
	    List = $__1.List,
	    MapWrapper = $__1.MapWrapper,
	    ListWrapper = $__1.ListWrapper;
	var $__2 = ($__binding__ = __webpack_require__(12), $__binding__ && $__binding__.__esModule && $__binding__ || { "default": $__binding__ }),
	    Binding = $__2.Binding,
	    BindingBuilder = $__2.BindingBuilder,
	    bind = $__2.bind;
	var $__3 = ($__exceptions__ = __webpack_require__(18), $__exceptions__ && $__exceptions__.__esModule && $__exceptions__ || { "default": $__exceptions__ }),
	    ProviderError = $__3.ProviderError,
	    NoProviderError = $__3.NoProviderError,
	    InvalidBindingError = $__3.InvalidBindingError,
	    AsyncBindingError = $__3.AsyncBindingError,
	    CyclicDependencyError = $__3.CyclicDependencyError,
	    InstantiationError = $__3.InstantiationError;
	var $__4 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    FunctionWrapper = $__4.FunctionWrapper,
	    Type = $__4.Type,
	    isPresent = $__4.isPresent,
	    isBlank = $__4.isBlank;
	var $__5 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Promise = $__5.Promise,
	    PromiseWrapper = $__5.PromiseWrapper;
	var Key = ($__key__ = __webpack_require__(17), $__key__ && $__key__.__esModule && $__key__ || { "default": $__key__ }).Key;
	var _constructing = new Object();
	var _notFound = new Object();
	var _Waiting = function _Waiting(promise) {
	  assert.argumentTypes(promise, Promise);
	  this.promise = promise;
	};
	$traceurRuntime.createClass(_Waiting, {}, {});
	Object.defineProperty(_Waiting, "parameters", { get: function get() {
	    return [[Promise]];
	  } });
	function _isWaiting(obj) {
	  return assert.returnType(obj instanceof _Waiting, assert.type.boolean);
	}
	var Injector = function Injector(bindings) {
	  var $__10, $__11;
	  var $__9 = arguments[1] !== void 0 ? arguments[1] : {},
	      parent = ($__10 = $__9.parent) === void 0 ? null : $__10,
	      defaultBindings = ($__11 = $__9.defaultBindings) === void 0 ? false : $__11;
	  assert.argumentTypes(bindings, List);
	  var flatten = _flattenBindings(bindings, MapWrapper.create());
	  this._bindings = this._createListOfBindings(flatten);
	  this._instances = this._createInstances();
	  this._parent = parent;
	  this._defaultBindings = defaultBindings;
	  this._asyncStrategy = new _AsyncInjectorStrategy(this);
	  this._syncStrategy = new _SyncInjectorStrategy(this);
	};
	var $Injector = Injector;
	$traceurRuntime.createClass(Injector, {
	  get: function get(token) {
	    return this._getByKey(Key.get(token), false, false, false);
	  },
	  getOptional: function getOptional(token) {
	    return this._getByKey(Key.get(token), false, false, true);
	  },
	  asyncGet: function asyncGet(token) {
	    return this._getByKey(Key.get(token), true, false, false);
	  },
	  createChild: function createChild(bindings) {
	    assert.argumentTypes(bindings, List);
	    return assert.returnType(new $Injector(bindings, { parent: this }), $Injector);
	  },
	  _createListOfBindings: function _createListOfBindings(flattenBindings) {
	    var bindings = ListWrapper.createFixedSize(Key.numberOfKeys + 1);
	    MapWrapper.forEach(flattenBindings, function (v, keyId) {
	      return bindings[keyId] = v;
	    });
	    return assert.returnType(bindings, List);
	  },
	  _createInstances: function _createInstances() {
	    return assert.returnType(ListWrapper.createFixedSize(Key.numberOfKeys + 1), List);
	  },
	  _getByKey: function _getByKey(key, returnPromise, returnLazy, optional) {
	    var $__7 = this;
	    if (returnLazy) {
	      return function () {
	        return $__7._getByKey(key, returnPromise, false, optional);
	      };
	    }
	    var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;
	    var instance = strategy.readFromCache(key);
	    if (instance !== _notFound) return instance;
	    instance = strategy.instantiate(key);
	    if (instance !== _notFound) return instance;
	    if (isPresent(this._parent)) {
	      return this._parent._getByKey(key, returnPromise, returnLazy, optional);
	    }
	    if (optional) {
	      return null;
	    } else {
	      throw new NoProviderError(key);
	    }
	  },
	  _resolveDependencies: function _resolveDependencies(key, binding, forceAsync) {
	    var $__7 = this;
	    try {
	      var getDependency = function getDependency(d) {
	        return $__7._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional);
	      };
	      return assert.returnType(ListWrapper.map(binding.dependencies, getDependency), List);
	    } catch (e) {
	      this._clear(key);
	      if (e instanceof ProviderError) e.addKey(key);
	      throw e;
	    }
	  },
	  _getInstance: function _getInstance(key) {
	    assert.argumentTypes(key, Key);
	    if (this._instances.length <= key.id) return null;
	    return ListWrapper.get(this._instances, key.id);
	  },
	  _setInstance: function _setInstance(key, obj) {
	    assert.argumentTypes(key, Key, obj, assert.type.any);
	    ListWrapper.set(this._instances, key.id, obj);
	  },
	  _getBinding: function _getBinding(key) {
	    assert.argumentTypes(key, Key);
	    var binding = this._bindings.length <= key.id ? null : ListWrapper.get(this._bindings, key.id);
	    if (isBlank(binding) && this._defaultBindings) {
	      return bind(key.token).toClass(key.token);
	    } else {
	      return binding;
	    }
	  },
	  _markAsConstructing: function _markAsConstructing(key) {
	    assert.argumentTypes(key, Key);
	    this._setInstance(key, _constructing);
	  },
	  _clear: function _clear(key) {
	    assert.argumentTypes(key, Key);
	    this._setInstance(key, null);
	  }
	}, {});
	Object.defineProperty(Injector, "parameters", { get: function get() {
	    return [[List], []];
	  } });
	Object.defineProperty(Injector.prototype.createChild, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(Injector.prototype._getByKey, "parameters", { get: function get() {
	    return [[Key], [assert.type.boolean], [assert.type.boolean], [assert.type.boolean]];
	  } });
	Object.defineProperty(Injector.prototype._resolveDependencies, "parameters", { get: function get() {
	    return [[Key], [Binding], [assert.type.boolean]];
	  } });
	Object.defineProperty(Injector.prototype._getInstance, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(Injector.prototype._setInstance, "parameters", { get: function get() {
	    return [[Key], []];
	  } });
	Object.defineProperty(Injector.prototype._getBinding, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(Injector.prototype._markAsConstructing, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(Injector.prototype._clear, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	var _SyncInjectorStrategy = function _SyncInjectorStrategy(injector) {
	  assert.argumentTypes(injector, Injector);
	  this.injector = injector;
	};
	$traceurRuntime.createClass(_SyncInjectorStrategy, {
	  readFromCache: function readFromCache(key) {
	    assert.argumentTypes(key, Key);
	    if (key.token === Injector) {
	      return this.injector;
	    }
	    var instance = this.injector._getInstance(key);
	    if (instance === _constructing) {
	      throw new CyclicDependencyError(key);
	    } else if (isPresent(instance) && !_isWaiting(instance)) {
	      return instance;
	    } else {
	      return _notFound;
	    }
	  },
	  instantiate: function instantiate(key) {
	    assert.argumentTypes(key, Key);
	    var binding = this.injector._getBinding(key);
	    if (isBlank(binding)) return _notFound;
	    if (binding.providedAsPromise) throw new AsyncBindingError(key);
	    this.injector._markAsConstructing(key);
	    var deps = this.injector._resolveDependencies(key, binding, false);
	    return this._createInstance(key, binding, deps);
	  },
	  _createInstance: function _createInstance(key, binding, deps) {
	    assert.argumentTypes(key, Key, binding, Binding, deps, List);
	    try {
	      var instance = FunctionWrapper.apply(binding.factory, deps);
	      this.injector._setInstance(key, instance);
	      return instance;
	    } catch (e) {
	      this.injector._clear(key);
	      throw new InstantiationError(e, key);
	    }
	  }
	}, {});
	Object.defineProperty(_SyncInjectorStrategy, "parameters", { get: function get() {
	    return [[Injector]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype.readFromCache, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype.instantiate, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype._createInstance, "parameters", { get: function get() {
	    return [[Key], [Binding], [List]];
	  } });
	var _AsyncInjectorStrategy = function _AsyncInjectorStrategy(injector) {
	  assert.argumentTypes(injector, Injector);
	  this.injector = injector;
	};
	$traceurRuntime.createClass(_AsyncInjectorStrategy, {
	  readFromCache: function readFromCache(key) {
	    assert.argumentTypes(key, Key);
	    if (key.token === Injector) {
	      return PromiseWrapper.resolve(this.injector);
	    }
	    var instance = this.injector._getInstance(key);
	    if (instance === _constructing) {
	      throw new CyclicDependencyError(key);
	    } else if (_isWaiting(instance)) {
	      return instance.promise;
	    } else if (isPresent(instance)) {
	      return PromiseWrapper.resolve(instance);
	    } else {
	      return _notFound;
	    }
	  },
	  instantiate: function instantiate(key) {
	    var $__7 = this;
	    var binding = this.injector._getBinding(key);
	    if (isBlank(binding)) return _notFound;
	    this.injector._markAsConstructing(key);
	    var deps = this.injector._resolveDependencies(key, binding, true);
	    var depsPromise = PromiseWrapper.all(deps);
	    var promise = PromiseWrapper.then(depsPromise, null, function (e) {
	      return $__7._errorHandler(key, e);
	    }).then(function (deps) {
	      return $__7._findOrCreate(key, binding, deps);
	    }).then(function (instance) {
	      return $__7._cacheInstance(key, instance);
	    });
	    this.injector._setInstance(key, new _Waiting(promise));
	    return promise;
	  },
	  _errorHandler: function _errorHandler(key, e) {
	    assert.argumentTypes(key, Key, e, assert.type.any);
	    if (e instanceof ProviderError) e.addKey(key);
	    return assert.returnType(PromiseWrapper.reject(e), Promise);
	  },
	  _findOrCreate: function _findOrCreate(key, binding, deps) {
	    assert.argumentTypes(key, Key, binding, Binding, deps, List);
	    try {
	      var instance = this.injector._getInstance(key);
	      if (!_isWaiting(instance)) return instance;
	      return FunctionWrapper.apply(binding.factory, deps);
	    } catch (e) {
	      this.injector._clear(key);
	      throw new InstantiationError(e, key);
	    }
	  },
	  _cacheInstance: function _cacheInstance(key, instance) {
	    this.injector._setInstance(key, instance);
	    return instance;
	  }
	}, {});
	Object.defineProperty(_AsyncInjectorStrategy, "parameters", { get: function get() {
	    return [[Injector]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype.readFromCache, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype.instantiate, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype._errorHandler, "parameters", { get: function get() {
	    return [[Key], []];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype._findOrCreate, "parameters", { get: function get() {
	    return [[Key], [Binding], [List]];
	  } });
	function _flattenBindings(bindings, res) {
	  assert.argumentTypes(bindings, List, res, Map);
	  ListWrapper.forEach(bindings, function (b) {
	    if (b instanceof Binding) {
	      MapWrapper.set(res, b.key.id, b);
	    } else if (b instanceof Type) {
	      var s = bind(b).toClass(b);
	      MapWrapper.set(res, s.key.id, s);
	    } else if (b instanceof List) {
	      _flattenBindings(b, res);
	    } else if (b instanceof BindingBuilder) {
	      throw new InvalidBindingError(b.token);
	    } else {
	      throw new InvalidBindingError(b);
	    }
	  });
	  return res;
	}
	Object.defineProperty(_flattenBindings, "parameters", { get: function get() {
	    return [[List], [Map]];
	  } });
	//# sourceMappingURL=injector.js.map

	//# sourceMappingURL=./injector.map

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Dependency: { get: function get() {
	      return Dependency;
	    } },
	  Binding: { get: function get() {
	      return Binding;
	    } },
	  bind: { get: function get() {
	      return bind;
	    } },
	  BindingBuilder: { get: function get() {
	      return BindingBuilder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_reflection_47_reflection__, $__key__, $__annotations__, $__exceptions__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__1.Type,
	    isBlank = $__1.isBlank,
	    isPresent = $__1.isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    MapWrapper = $__2.MapWrapper,
	    ListWrapper = $__2.ListWrapper;
	var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }).reflector;
	var Key = ($__key__ = __webpack_require__(17), $__key__ && $__key__.__esModule && $__key__ || { "default": $__key__ }).Key;
	var $__5 = ($__annotations__ = __webpack_require__(10), $__annotations__ && $__annotations__.__esModule && $__annotations__ || { "default": $__annotations__ }),
	    Inject = $__5.Inject,
	    InjectLazy = $__5.InjectLazy,
	    InjectPromise = $__5.InjectPromise,
	    Optional = $__5.Optional,
	    DependencyAnnotation = $__5.DependencyAnnotation;
	var NoAnnotationError = ($__exceptions__ = __webpack_require__(18), $__exceptions__ && $__exceptions__.__esModule && $__exceptions__ || { "default": $__exceptions__ }).NoAnnotationError;
	var Dependency = function Dependency(key, asPromise, lazy, optional, properties) {
	  assert.argumentTypes(key, Key, asPromise, assert.type.boolean, lazy, assert.type.boolean, optional, assert.type.boolean, properties, List);
	  this.key = key;
	  this.asPromise = asPromise;
	  this.lazy = lazy;
	  this.optional = optional;
	  this.properties = properties;
	};
	var $Dependency = Dependency;
	$traceurRuntime.createClass(Dependency, {}, { fromKey: function fromKey(key) {
	    assert.argumentTypes(key, Key);
	    return new $Dependency(key, false, false, false, []);
	  } });
	Object.defineProperty(Dependency, "parameters", { get: function get() {
	    return [[Key], [assert.type.boolean], [assert.type.boolean], [assert.type.boolean], [List]];
	  } });
	Object.defineProperty(Dependency.fromKey, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	var Binding = function Binding(key, factory, dependencies, providedAsPromise) {
	  assert.argumentTypes(key, Key, factory, Function, dependencies, List, providedAsPromise, assert.type.boolean);
	  this.key = key;
	  this.factory = factory;
	  this.dependencies = dependencies;
	  this.providedAsPromise = providedAsPromise;
	};
	$traceurRuntime.createClass(Binding, {}, {});
	Object.defineProperty(Binding, "parameters", { get: function get() {
	    return [[Key], [Function], [List], [assert.type.boolean]];
	  } });
	function bind(token) {
	  return assert.returnType(new BindingBuilder(token), BindingBuilder);
	}
	var BindingBuilder = function BindingBuilder(token) {
	  this.token = token;
	};
	$traceurRuntime.createClass(BindingBuilder, {
	  toClass: function toClass(type) {
	    assert.argumentTypes(type, Type);
	    return assert.returnType(new Binding(Key.get(this.token), reflector.factory(type), _dependenciesFor(type), false), Binding);
	  },
	  toValue: function toValue(value) {
	    return assert.returnType(new Binding(Key.get(this.token), function () {
	      return value;
	    }, [], false), Binding);
	  },
	  toAlias: function toAlias(aliasToken) {
	    return assert.returnType(new Binding(Key.get(this.token), function (aliasInstance) {
	      return aliasInstance;
	    }, [Dependency.fromKey(Key.get(aliasToken))], false), Binding);
	  },
	  toFactory: function toFactory(factoryFunction) {
	    var dependencies = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(factoryFunction, Function, dependencies, List);
	    return assert.returnType(new Binding(Key.get(this.token), factoryFunction, this._constructDependencies(factoryFunction, dependencies), false), Binding);
	  },
	  toAsyncFactory: function toAsyncFactory(factoryFunction) {
	    var dependencies = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(factoryFunction, Function, dependencies, List);
	    return assert.returnType(new Binding(Key.get(this.token), factoryFunction, this._constructDependencies(factoryFunction, dependencies), true), Binding);
	  },
	  _constructDependencies: function _constructDependencies(factoryFunction, dependencies) {
	    return isBlank(dependencies) ? _dependenciesFor(factoryFunction) : ListWrapper.map(dependencies, function (t) {
	      return Dependency.fromKey(Key.get(t));
	    });
	  }
	}, {});
	Object.defineProperty(BindingBuilder.prototype.toClass, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(BindingBuilder.prototype.toFactory, "parameters", { get: function get() {
	    return [[Function], [List]];
	  } });
	Object.defineProperty(BindingBuilder.prototype.toAsyncFactory, "parameters", { get: function get() {
	    return [[Function], [List]];
	  } });
	Object.defineProperty(BindingBuilder.prototype._constructDependencies, "parameters", { get: function get() {
	    return [[Function], [List]];
	  } });
	function _dependenciesFor(typeOrFunc) {
	  var params = reflector.parameters(typeOrFunc);
	  if (isBlank(params)) return assert.returnType([], List);
	  if (ListWrapper.any(params, function (p) {
	    return isBlank(p);
	  })) throw new NoAnnotationError(typeOrFunc);
	  return assert.returnType(ListWrapper.map(params, function (p) {
	    return _extractToken(typeOrFunc, p);
	  }), List);
	}
	function _extractToken(typeOrFunc, annotations) {
	  var depProps = [];
	  var token = null;
	  var optional = false;
	  var lazy = false;
	  var asPromise = false;
	  for (var i = 0; i < annotations.length; ++i) {
	    var paramAnnotation = annotations[i];
	    if (paramAnnotation instanceof Type) {
	      token = paramAnnotation;
	    } else if (paramAnnotation instanceof Inject) {
	      token = paramAnnotation.token;
	    } else if (paramAnnotation instanceof InjectPromise) {
	      token = paramAnnotation.token;
	      asPromise = true;
	    } else if (paramAnnotation instanceof InjectLazy) {
	      token = paramAnnotation.token;
	      lazy = true;
	    } else if (paramAnnotation instanceof Optional) {
	      optional = true;
	    } else if (paramAnnotation instanceof DependencyAnnotation) {
	      ListWrapper.push(depProps, paramAnnotation);
	    } else if (paramAnnotation.name === "string") {
	      token = paramAnnotation;
	    }
	  }
	  if (isPresent(token)) {
	    return _createDependency(token, asPromise, lazy, optional, depProps);
	  } else {
	    throw new NoAnnotationError(typeOrFunc);
	  }
	}
	function _createDependency(token, asPromise, lazy, optional, depProps) {
	  return assert.returnType(new Dependency(Key.get(token), asPromise, lazy, optional, depProps), Dependency);
	}
	//# sourceMappingURL=binding.js.map

	//# sourceMappingURL=./binding.map

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	    Reflector: { get: function get() {
	            return $__reflector__.Reflector;
	        } },
	    reflector: { get: function get() {
	            return reflector;
	        } },
	    __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__reflector__, $__reflector__, $__reflection_95_capabilities__;
	var $__0 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__0.Type,
	    isPresent = $__0.isPresent;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__1.List,
	    ListWrapper = $__1.ListWrapper;
	var Reflector = ($__reflector__ = __webpack_require__(14), $__reflector__ && $__reflector__.__esModule && $__reflector__ || { "default": $__reflector__ }).Reflector;
	var $__reflector__ = ($__reflector__ = __webpack_require__(14), $__reflector__ && $__reflector__.__esModule && $__reflector__ || { "default": $__reflector__ });
	var ReflectionCapabilities = ($__reflection_95_capabilities__ = __webpack_require__(16), $__reflection_95_capabilities__ && $__reflection_95_capabilities__.__esModule && $__reflection_95_capabilities__ || { "default": $__reflection_95_capabilities__ }).ReflectionCapabilities;
	var reflector = new Reflector(new ReflectionCapabilities());
	//# sourceMappingURL=reflection.es6.map

	//# sourceMappingURL=./reflection.map

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  SetterFn: { get: function get() {
	      return $__types__.SetterFn;
	    } },
	  GetterFn: { get: function get() {
	      return $__types__.GetterFn;
	    } },
	  MethodFn: { get: function get() {
	      return $__types__.MethodFn;
	    } },
	  Reflector: { get: function get() {
	      return Reflector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__types__, $__types__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__1.Type,
	    isPresent = $__1.isPresent,
	    stringify = $__1.stringify,
	    BaseException = $__1.BaseException;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    Map = $__2.Map,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var $__3 = ($__types__ = __webpack_require__(15), $__types__ && $__types__.__esModule && $__types__ || { "default": $__types__ }),
	    SetterFn = $__3.SetterFn,
	    GetterFn = $__3.GetterFn,
	    MethodFn = $__3.MethodFn;
	var $__types__ = ($__types__ = __webpack_require__(15), $__types__ && $__types__.__esModule && $__types__ || { "default": $__types__ });
	var Reflector = function Reflector(reflectionCapabilities) {
	  this._typeInfo = MapWrapper.create();
	  this._getters = MapWrapper.create();
	  this._setters = MapWrapper.create();
	  this._methods = MapWrapper.create();
	  this.reflectionCapabilities = reflectionCapabilities;
	};
	$traceurRuntime.createClass(Reflector, {
	  registerType: function registerType(type, typeInfo) {
	    MapWrapper.set(this._typeInfo, type, typeInfo);
	  },
	  registerGetters: function registerGetters(getters) {
	    _mergeMaps(this._getters, getters);
	  },
	  registerSetters: function registerSetters(setters) {
	    _mergeMaps(this._setters, setters);
	  },
	  registerMethods: function registerMethods(methods) {
	    _mergeMaps(this._methods, methods);
	  },
	  factory: function factory(type) {
	    assert.argumentTypes(type, Type);
	    if (MapWrapper.contains(this._typeInfo, type)) {
	      return assert.returnType(MapWrapper.get(this._typeInfo, type)["factory"], Function);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.factory(type), Function);
	    }
	  },
	  parameters: function parameters(typeOfFunc) {
	    if (MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	      return assert.returnType(MapWrapper.get(this._typeInfo, typeOfFunc)["parameters"], List);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.parameters(typeOfFunc), List);
	    }
	  },
	  annotations: function annotations(typeOfFunc) {
	    if (MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	      return assert.returnType(MapWrapper.get(this._typeInfo, typeOfFunc)["annotations"], List);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.annotations(typeOfFunc), List);
	    }
	  },
	  getter: function getter(name) {
	    assert.argumentTypes(name, assert.type.string);
	    if (MapWrapper.contains(this._getters, name)) {
	      return assert.returnType(MapWrapper.get(this._getters, name), GetterFn);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.getter(name), GetterFn);
	    }
	  },
	  setter: function setter(name) {
	    assert.argumentTypes(name, assert.type.string);
	    if (MapWrapper.contains(this._setters, name)) {
	      return assert.returnType(MapWrapper.get(this._setters, name), SetterFn);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.setter(name), SetterFn);
	    }
	  },
	  method: function method(name) {
	    assert.argumentTypes(name, assert.type.string);
	    if (MapWrapper.contains(this._methods, name)) {
	      return assert.returnType(MapWrapper.get(this._methods, name), MethodFn);
	    } else {
	      return assert.returnType(this.reflectionCapabilities.method(name), MethodFn);
	    }
	  }
	}, {});
	Object.defineProperty(Reflector.prototype.factory, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(Reflector.prototype.getter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(Reflector.prototype.setter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(Reflector.prototype.method, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function _mergeMaps(target, config) {
	  StringMapWrapper.forEach(config, function (v, k) {
	    return MapWrapper.set(target, k, v);
	  });
	}
	Object.defineProperty(_mergeMaps, "parameters", { get: function get() {
	    return [[Map], []];
	  } });
	//# sourceMappingURL=reflector.js.map

	//# sourceMappingURL=./reflector.map

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperties(module.exports, {
	  SetterFn: { get: function get() {
	      return SetterFn;
	    } },
	  GetterFn: { get: function get() {
	      return GetterFn;
	    } },
	  MethodFn: { get: function get() {
	      return MethodFn;
	    } },
	  __esModule: { value: true }
	});
	var SetterFn = Function;
	var GetterFn = Function;
	var MethodFn = Function;
	//# sourceMappingURL=types.es6.map

	//# sourceMappingURL=./types.map

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ReflectionCapabilities: { get: function get() {
	      return ReflectionCapabilities;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__types__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__1.Type,
	    isPresent = $__1.isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var $__3 = ($__types__ = __webpack_require__(15), $__types__ && $__types__.__esModule && $__types__ || { "default": $__types__ }),
	    GetterFn = $__3.GetterFn,
	    SetterFn = $__3.SetterFn,
	    MethodFn = $__3.MethodFn;
	var ReflectionCapabilities = function ReflectionCapabilities() {
	  ;
	};
	$traceurRuntime.createClass(ReflectionCapabilities, {
	  factory: function factory(type) {
	    assert.argumentTypes(type, Type);
	    switch (type.length) {
	      case 0:
	        return assert.returnType(function () {
	          return new type();
	        }, Function);
	      case 1:
	        return assert.returnType(function (a1) {
	          return new type(a1);
	        }, Function);
	      case 2:
	        return assert.returnType(function (a1, a2) {
	          return new type(a1, a2);
	        }, Function);
	      case 3:
	        return assert.returnType(function (a1, a2, a3) {
	          return new type(a1, a2, a3);
	        }, Function);
	      case 4:
	        return assert.returnType(function (a1, a2, a3, a4) {
	          return new type(a1, a2, a3, a4);
	        }, Function);
	      case 5:
	        return assert.returnType(function (a1, a2, a3, a4, a5) {
	          return new type(a1, a2, a3, a4, a5);
	        }, Function);
	      case 6:
	        return assert.returnType(function (a1, a2, a3, a4, a5, a6) {
	          return new type(a1, a2, a3, a4, a5, a6);
	        }, Function);
	      case 7:
	        return assert.returnType(function (a1, a2, a3, a4, a5, a6, a7) {
	          return new type(a1, a2, a3, a4, a5, a6, a7);
	        }, Function);
	      case 8:
	        return assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8) {
	          return new type(a1, a2, a3, a4, a5, a6, a7, a8);
	        }, Function);
	      case 9:
	        return assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	          return new type(a1, a2, a3, a4, a5, a6, a7, a8, a9);
	        }, Function);
	      case 10:
	        return assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	          return new type(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	        }, Function);
	    }
	    ;
	    throw new Error("Factory cannot take more than 10 arguments");
	  },
	  parameters: function parameters(typeOfFunc) {
	    return assert.returnType(isPresent(typeOfFunc.parameters) ? typeOfFunc.parameters : ListWrapper.createFixedSize(typeOfFunc.length), assert.genericType(List, List));
	  },
	  annotations: function annotations(typeOfFunc) {
	    return assert.returnType(isPresent(typeOfFunc.annotations) ? typeOfFunc.annotations : [], List);
	  },
	  getter: function getter(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(new Function('o', 'return o.' + name + ';'), GetterFn);
	  },
	  setter: function setter(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(new Function('o', 'v', 'return o.' + name + ' = v;'), SetterFn);
	  },
	  method: function method(name) {
	    assert.argumentTypes(name, assert.type.string);
	    var method = "o." + name;
	    return assert.returnType(new Function('o', 'args', "if (!" + method + ") throw new Error('\"" + name + "\" is undefined');" + ("return " + method + ".apply(o, args);")), MethodFn);
	  }
	}, {});
	Object.defineProperty(ReflectionCapabilities.prototype.factory, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.getter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.setter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.method, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=reflection_capabilities.es6.map

	//# sourceMappingURL=./reflection_capabilities.map

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Key: { get: function get() {
	      return Key;
	    } },
	  KeyRegistry: { get: function get() {
	      return KeyRegistry;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__exceptions__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var KeyMetadataError = ($__exceptions__ = __webpack_require__(18), $__exceptions__ && $__exceptions__.__esModule && $__exceptions__ || { "default": $__exceptions__ }).KeyMetadataError;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    MapWrapper = $__2.MapWrapper,
	    Map = $__2.Map;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__3.int,
	    isPresent = $__3.isPresent;
	var Key = function Key(token, id) {
	  assert.argumentTypes(token, assert.type.any, id, int);
	  this.token = token;
	  this.id = id;
	  this.metadata = null;
	};
	var $Key = Key;
	$traceurRuntime.createClass(Key, {}, Object.defineProperties({
	  setMetadata: function setMetadata(key, metadata) {
	    assert.argumentTypes(key, $Key, metadata, assert.type.any);
	    if (isPresent(key.metadata) && key.metadata !== metadata) {
	      throw new KeyMetadataError();
	    }
	    key.metadata = metadata;
	    return assert.returnType(key, $Key);
	  },
	  get: function get(token) {
	    return assert.returnType(_globalKeyRegistry.get(token), $Key);
	  }
	}, {
	  numberOfKeys: {
	    get: function get() {
	      return assert.returnType(_globalKeyRegistry.numberOfKeys, int);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}));
	Object.defineProperty(Key, "parameters", { get: function get() {
	    return [[], [int]];
	  } });
	Object.defineProperty(Key.setMetadata, "parameters", { get: function get() {
	    return [[Key], []];
	  } });
	var KeyRegistry = function KeyRegistry() {
	  this._allKeys = MapWrapper.create();
	};
	$traceurRuntime.createClass(KeyRegistry, Object.defineProperties({
	  get: function get(token) {
	    if (token instanceof Key) return assert.returnType(token, Key);
	    if (MapWrapper.contains(this._allKeys, token)) {
	      return assert.returnType(MapWrapper.get(this._allKeys, token), Key);
	    }
	    var newKey = new Key(token, Key.numberOfKeys);
	    MapWrapper.set(this._allKeys, token, newKey);
	    return assert.returnType(newKey, Key);
	  }
	}, {
	  numberOfKeys: {
	    get: function get() {
	      return assert.returnType(MapWrapper.size(this._allKeys), int);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	var _globalKeyRegistry = new KeyRegistry();
	//# sourceMappingURL=key.js.map

	//# sourceMappingURL=./key.map

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  KeyMetadataError: { get: function get() {
	      return KeyMetadataError;
	    } },
	  ProviderError: { get: function get() {
	      return ProviderError;
	    } },
	  NoProviderError: { get: function get() {
	      return NoProviderError;
	    } },
	  AsyncBindingError: { get: function get() {
	      return AsyncBindingError;
	    } },
	  CyclicDependencyError: { get: function get() {
	      return CyclicDependencyError;
	    } },
	  InstantiationError: { get: function get() {
	      return InstantiationError;
	    } },
	  InvalidBindingError: { get: function get() {
	      return InvalidBindingError;
	    } },
	  NoAnnotationError: { get: function get() {
	      return NoAnnotationError;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__1.ListWrapper,
	    List = $__1.List;
	var stringify = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).stringify;
	function findFirstClosedCycle(keys) {
	  assert.argumentTypes(keys, List);
	  var res = [];
	  for (var i = 0; i < keys.length; ++i) {
	    if (ListWrapper.contains(res, keys[i])) {
	      ListWrapper.push(res, keys[i]);
	      return res;
	    } else {
	      ListWrapper.push(res, keys[i]);
	    }
	  }
	  return res;
	}
	Object.defineProperty(findFirstClosedCycle, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function constructResolvingPath(keys) {
	  if (keys.length > 1) {
	    var reversed = findFirstClosedCycle(ListWrapper.reversed(keys));
	    var tokenStrs = ListWrapper.map(reversed, function (k) {
	      return stringify(k.token);
	    });
	    return " (" + tokenStrs.join(' -> ') + ")";
	  } else {
	    return "";
	  }
	}
	Object.defineProperty(constructResolvingPath, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var KeyMetadataError = function KeyMetadataError() {
	  $traceurRuntime.superConstructor($KeyMetadataError).apply(this, arguments);
	  ;
	};
	var $KeyMetadataError = KeyMetadataError;
	$traceurRuntime.createClass(KeyMetadataError, {}, {}, Error);
	var ProviderError = function ProviderError(key, constructResolvingMessage) {
	  assert.argumentTypes(key, assert.type.any, constructResolvingMessage, Function);
	  $traceurRuntime.superConstructor($ProviderError).call(this);
	  this.keys = [key];
	  this.constructResolvingMessage = constructResolvingMessage;
	  this.message = this.constructResolvingMessage(this.keys);
	};
	var $ProviderError = ProviderError;
	$traceurRuntime.createClass(ProviderError, {
	  addKey: function addKey(key) {
	    ListWrapper.push(this.keys, key);
	    this.message = this.constructResolvingMessage(this.keys);
	  },
	  toString: function toString() {
	    return this.message;
	  }
	}, {}, Error);
	Object.defineProperty(ProviderError, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	var NoProviderError = function NoProviderError(key) {
	  $traceurRuntime.superConstructor($NoProviderError).call(this, key, function (keys) {
	    assert.argumentTypes(keys, List);
	    var first = stringify(ListWrapper.first(keys).token);
	    return "No provider for " + first + "!" + constructResolvingPath(keys);
	  });
	};
	var $NoProviderError = NoProviderError;
	$traceurRuntime.createClass(NoProviderError, {}, {}, ProviderError);
	var AsyncBindingError = function AsyncBindingError(key) {
	  $traceurRuntime.superConstructor($AsyncBindingError).call(this, key, function (keys) {
	    assert.argumentTypes(keys, List);
	    var first = stringify(ListWrapper.first(keys).token);
	    return "Cannot instantiate " + first + " synchronously. " + ("It is provided as a promise!" + constructResolvingPath(keys));
	  });
	};
	var $AsyncBindingError = AsyncBindingError;
	$traceurRuntime.createClass(AsyncBindingError, {}, {}, ProviderError);
	var CyclicDependencyError = function CyclicDependencyError(key) {
	  $traceurRuntime.superConstructor($CyclicDependencyError).call(this, key, function (keys) {
	    assert.argumentTypes(keys, List);
	    return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	  });
	};
	var $CyclicDependencyError = CyclicDependencyError;
	$traceurRuntime.createClass(CyclicDependencyError, {}, {}, ProviderError);
	var InstantiationError = function InstantiationError(originalException, key) {
	  $traceurRuntime.superConstructor($InstantiationError).call(this, key, function (keys) {
	    assert.argumentTypes(keys, List);
	    var first = stringify(ListWrapper.first(keys).token);
	    return "Error during instantiation of " + first + "!" + constructResolvingPath(keys) + "." + (" ORIGINAL ERROR: " + originalException);
	  });
	};
	var $InstantiationError = InstantiationError;
	$traceurRuntime.createClass(InstantiationError, {}, {}, ProviderError);
	var InvalidBindingError = function InvalidBindingError(binding) {
	  $traceurRuntime.superConstructor($InvalidBindingError).call(this);
	  this.message = "Invalid binding " + binding;
	};
	var $InvalidBindingError = InvalidBindingError;
	$traceurRuntime.createClass(InvalidBindingError, { toString: function toString() {
	    return this.message;
	  } }, {}, Error);
	var NoAnnotationError = function NoAnnotationError(typeOrFunc) {
	  $traceurRuntime.superConstructor($NoAnnotationError).call(this);
	  this.message = "Cannot resolve all parameters for " + stringify(typeOrFunc);
	};
	var $NoAnnotationError = NoAnnotationError;
	$traceurRuntime.createClass(NoAnnotationError, { toString: function toString() {
	    return this.message;
	  } }, {}, Error);
	//# sourceMappingURL=exceptions.js.map

	//# sourceMappingURL=./exceptions.map

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Promise: { get: function get() {
	      return Promise;
	    } },
	  PromiseWrapper: { get: function get() {
	      return PromiseWrapper;
	    } },
	  Observable: { get: function get() {
	      return Observable;
	    } },
	  ObservableController: { get: function get() {
	      return ObservableController;
	    } },
	  ObservableWrapper: { get: function get() {
	      return ObservableWrapper;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__rx_47_dist_47_rx_46_all__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__1.int,
	    global = $__1.global,
	    isPresent = $__1.isPresent;
	var List = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).List;
	var Rx = ($__rx_47_dist_47_rx_46_all__ = __webpack_require__(20), $__rx_47_dist_47_rx_46_all__ && $__rx_47_dist_47_rx_46_all__.__esModule && $__rx_47_dist_47_rx_46_all__ || { "default": $__rx_47_dist_47_rx_46_all__ })["default"];
	var Promise = global.Promise;
	var PromiseWrapper = function PromiseWrapper() {
	  ;
	};
	$traceurRuntime.createClass(PromiseWrapper, {}, {
	  resolve: function resolve(obj) {
	    return assert.returnType(Promise.resolve(obj), Promise);
	  },
	  reject: function reject(obj) {
	    return assert.returnType(Promise.reject(obj), Promise);
	  },
	  catchError: function catchError(promise, onError) {
	    assert.argumentTypes(promise, Promise, onError, Function);
	    return assert.returnType(promise["catch"](onError), Promise);
	  },
	  all: function all(promises) {
	    assert.argumentTypes(promises, List);
	    if (promises.length == 0) return assert.returnType(Promise.resolve([]), Promise);
	    return assert.returnType(Promise.all(promises), Promise);
	  },
	  then: function then(promise, success, rejection) {
	    assert.argumentTypes(promise, Promise, success, Function, rejection, Function);
	    return assert.returnType(promise.then(success, rejection), Promise);
	  },
	  completer: function completer() {
	    var resolve;
	    var reject;
	    var p = new Promise(function (res, rej) {
	      resolve = res;
	      reject = rej;
	    });
	    return {
	      promise: p,
	      resolve: resolve,
	      reject: reject
	    };
	  },
	  setTimeout: function setTimeout(fn, millis) {
	    assert.argumentTypes(fn, Function, millis, int);
	    global.setTimeout(fn, millis);
	  },
	  isPromise: function isPromise(maybePromise) {
	    return assert.returnType(maybePromise instanceof Promise, assert.type.boolean);
	  }
	});
	Object.defineProperty(PromiseWrapper.catchError, "parameters", { get: function get() {
	    return [[Promise], [Function]];
	  } });
	Object.defineProperty(PromiseWrapper.all, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(PromiseWrapper.then, "parameters", { get: function get() {
	    return [[Promise], [Function], [Function]];
	  } });
	Object.defineProperty(PromiseWrapper.setTimeout, "parameters", { get: function get() {
	    return [[Function], [int]];
	  } });
	var Observable = Rx.Observable;
	var ObservableController = Rx.Subject;
	var ObservableWrapper = function ObservableWrapper() {
	  ;
	};
	$traceurRuntime.createClass(ObservableWrapper, {}, {
	  createController: function createController() {
	    return assert.returnType(new Rx.Subject(), Rx.Subject);
	  },
	  createObservable: function createObservable(subject) {
	    assert.argumentTypes(subject, Rx.Subject);
	    return assert.returnType(subject, Observable);
	  },
	  subscribe: function subscribe(observable, generatorOrOnNext) {
	    var onThrow = arguments[2] !== void 0 ? arguments[2] : null;
	    var onReturn = arguments[3] !== void 0 ? arguments[3] : null;
	    if (isPresent(generatorOrOnNext.next)) {
	      return observable.observeOn(Rx.Scheduler.timeout).subscribe(function (value) {
	        return generatorOrOnNext.next(value);
	      }, function (error) {
	        return generatorOrOnNext["throw"](error);
	      }, function () {
	        return generatorOrOnNext["return"]();
	      });
	    } else {
	      return observable.observeOn(Rx.Scheduler.timeout).subscribe(generatorOrOnNext, onThrow, onReturn);
	    }
	  },
	  callNext: function callNext(subject, value) {
	    assert.argumentTypes(subject, Rx.Subject, value, assert.type.any);
	    subject.onNext(value);
	  },
	  callThrow: function callThrow(subject, error) {
	    assert.argumentTypes(subject, Rx.Subject, error, assert.type.any);
	    subject.onError(error);
	  },
	  callReturn: function callReturn(subject) {
	    assert.argumentTypes(subject, Rx.Subject);
	    subject.onCompleted();
	  }
	});
	Object.defineProperty(ObservableWrapper.createObservable, "parameters", { get: function get() {
	    return [[Rx.Subject]];
	  } });
	Object.defineProperty(ObservableWrapper.subscribe, "parameters", { get: function get() {
	    return [[Observable], [], [], []];
	  } });
	Object.defineProperty(ObservableWrapper.callNext, "parameters", { get: function get() {
	    return [[Rx.Subject], [assert.type.any]];
	  } });
	Object.defineProperty(ObservableWrapper.callThrow, "parameters", { get: function get() {
	    return [[Rx.Subject], [assert.type.any]];
	  } });
	Object.defineProperty(ObservableWrapper.callReturn, "parameters", { get: function get() {
	    return [[Rx.Subject]];
	  } });
	//# sourceMappingURL=async.es6.map

	//# sourceMappingURL=./async.map

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.
	'use strict';;(function(undefined){var objectTypes={'boolean':false,'function':true,'object':true,'number':false,'string':false,'undefined':false};var root=objectTypes[typeof window] && window || this,freeExports=objectTypes[typeof exports] && exports && !exports.nodeType && exports,freeModule=objectTypes[typeof module] && module && !module.nodeType && module,moduleExports=freeModule && freeModule.exports === freeExports && freeExports,freeGlobal=objectTypes[typeof global] && global;if(freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)){root = freeGlobal;}var Rx={internals:{},config:{Promise:root.Promise},helpers:{}}; // Defaults
	var noop=Rx.helpers.noop = function(){},notDefined=Rx.helpers.notDefined = function(x){return typeof x === 'undefined';},isScheduler=Rx.helpers.isScheduler = function(x){return x instanceof Rx.Scheduler;},identity=Rx.helpers.identity = function(x){return x;},pluck=Rx.helpers.pluck = function(property){return function(x){return x[property];};},just=Rx.helpers.just = function(value){return function(){return value;};},defaultNow=Rx.helpers.defaultNow = Date.now,defaultComparer=Rx.helpers.defaultComparer = function(x,y){return isEqual(x,y);},defaultSubComparer=Rx.helpers.defaultSubComparer = function(x,y){return x > y?1:x < y?-1:0;},defaultKeySerializer=Rx.helpers.defaultKeySerializer = function(x){return x.toString();},defaultError=Rx.helpers.defaultError = function(err){throw err;},isPromise=Rx.helpers.isPromise = function(p){return !!p && typeof p.then === 'function';},asArray=Rx.helpers.asArray = function(){return Array.prototype.slice.call(arguments);},not=Rx.helpers.not = function(a){return !a;},isFunction=Rx.helpers.isFunction = (function(){var isFn=function isFn(value){return typeof value == 'function' || false;}; // fallback for older versions of Chrome and Safari
	if(isFn(/x/)){isFn = function(value){return typeof value == 'function' && toString.call(value) == '[object Function]';};}return isFn;})();function cloneArray(arr){for(var a=[],i=0,len=arr.length;i < len;i++) {a.push(arr[i]);}return a;}Rx.config.longStackSupport = false;var hasStacks=false;try{throw new Error();}catch(e) {hasStacks = !!e.stack;} // All code after this point will be filtered from stack traces reported by RxJS
	var rStartingLine=captureLine(),rFileName;var STACK_JUMP_SEPARATOR="From previous event:";function makeStackTraceLong(error,observable){ // If possible, transform the error stack trace by removing Node and RxJS
	// cruft, then concatenating with the stack trace of `observable`.
	if(hasStacks && observable.stack && typeof error === "object" && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1){var stacks=[];for(var o=observable;!!o;o = o.source) {if(o.stack){stacks.unshift(o.stack);}}stacks.unshift(error.stack);var concatedStacks=stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");error.stack = filterStackString(concatedStacks);}}function filterStackString(stackString){var lines=stackString.split("\n"),desiredLines=[];for(var i=0,len=lines.length;i < len;i++) {var line=lines[i];if(!isInternalFrame(line) && !isNodeFrame(line) && line){desiredLines.push(line);}}return desiredLines.join("\n");}function isInternalFrame(stackLine){var fileNameAndLineNumber=getFileNameAndLineNumber(stackLine);if(!fileNameAndLineNumber){return false;}var fileName=fileNameAndLineNumber[0],lineNumber=fileNameAndLineNumber[1];return fileName === rFileName && lineNumber >= rStartingLine && lineNumber <= rEndingLine;}function isNodeFrame(stackLine){return stackLine.indexOf("(module.js:") !== -1 || stackLine.indexOf("(node.js:") !== -1;}function captureLine(){if(!hasStacks){return;}try{throw new Error();}catch(e) {var lines=e.stack.split("\n");var firstLine=lines[0].indexOf("@") > 0?lines[1]:lines[2];var fileNameAndLineNumber=getFileNameAndLineNumber(firstLine);if(!fileNameAndLineNumber){return;}rFileName = fileNameAndLineNumber[0];return fileNameAndLineNumber[1];}}function getFileNameAndLineNumber(stackLine){ // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	var attempt1=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);if(attempt1){return [attempt1[1],Number(attempt1[2])];} // Anonymous functions: "at filename:lineNumber:columnNumber"
	var attempt2=/at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);if(attempt2){return [attempt2[1],Number(attempt2[2])];} // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	var attempt3=/.*@(.+):(\d+)$/.exec(stackLine);if(attempt3){return [attempt3[1],Number(attempt3[2])];}}var EmptyError=Rx.EmptyError = function(){this.message = 'Sequence contains no elements.';Error.call(this);};EmptyError.prototype = Error.prototype;var ObjectDisposedError=Rx.ObjectDisposedError = function(){this.message = 'Object has been disposed';Error.call(this);};ObjectDisposedError.prototype = Error.prototype;var ArgumentOutOfRangeError=Rx.ArgumentOutOfRangeError = function(){this.message = 'Argument out of range';Error.call(this);};ArgumentOutOfRangeError.prototype = Error.prototype;var NotSupportedError=Rx.NotSupportedError = function(message){this.message = message || 'This operation is not supported';Error.call(this);};NotSupportedError.prototype = Error.prototype;var NotImplementedError=Rx.NotImplementedError = function(message){this.message = message || 'This operation is not implemented';Error.call(this);};NotImplementedError.prototype = Error.prototype;var notImplemented=Rx.helpers.notImplemented = function(){throw new NotImplementedError();};var notSupported=Rx.helpers.notSupported = function(){throw new NotSupportedError();}; // Shim in iterator support
	var $iterator$=typeof Symbol === 'function' && Symbol.iterator || '_es6shim_iterator_'; // Bug for mozilla version
	if(root.Set && typeof new root.Set()['@@iterator'] === 'function'){$iterator$ = '@@iterator';}var doneEnumerator=Rx.doneEnumerator = {done:true,value:undefined};var isIterable=Rx.helpers.isIterable = function(o){return o[$iterator$] !== undefined;};var isArrayLike=Rx.helpers.isArrayLike = function(o){return o && o.length !== undefined;};Rx.helpers.iterator = $iterator$;var bindCallback=Rx.internals.bindCallback = function(func,thisArg,argCount){if(typeof thisArg === 'undefined'){return func;}switch(argCount){case 0:return function(){return func.call(thisArg);};case 1:return function(arg){return func.call(thisArg,arg);};case 2:return function(value,index){return func.call(thisArg,value,index);};case 3:return function(value,index,collection){return func.call(thisArg,value,index,collection);};}return function(){return func.apply(thisArg,arguments);};}; /** Used to determine if values are of the language type Object */var dontEnums=['toString','toLocaleString','valueOf','hasOwnProperty','isPrototypeOf','propertyIsEnumerable','constructor'],dontEnumsLength=dontEnums.length; /** `Object#toString` result shortcuts */var argsClass='[object Arguments]',arrayClass='[object Array]',boolClass='[object Boolean]',dateClass='[object Date]',errorClass='[object Error]',funcClass='[object Function]',numberClass='[object Number]',objectClass='[object Object]',regexpClass='[object RegExp]',stringClass='[object String]';var toString=Object.prototype.toString,hasOwnProperty=Object.prototype.hasOwnProperty,supportsArgsClass=toString.call(arguments) == argsClass, // For less <IE9 && FF<4
	supportNodeClass,errorProto=Error.prototype,objectProto=Object.prototype,stringProto=String.prototype,propertyIsEnumerable=objectProto.propertyIsEnumerable;try{supportNodeClass = !(toString.call(document) == objectClass && !({'toString':0} + ''));}catch(e) {supportNodeClass = true;}var nonEnumProps={};nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = {'constructor':true,'toLocaleString':true,'toString':true,'valueOf':true};nonEnumProps[boolClass] = nonEnumProps[stringClass] = {'constructor':true,'toString':true,'valueOf':true};nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = {'constructor':true,'toString':true};nonEnumProps[objectClass] = {'constructor':true};var support={};(function(){var ctor=function ctor(){this.x = 1;},props=[];ctor.prototype = {'valueOf':1,'y':1};for(var key in new ctor()) {props.push(key);}for(key in arguments) {} // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
	support.enumErrorProps = propertyIsEnumerable.call(errorProto,'message') || propertyIsEnumerable.call(errorProto,'name'); // Detect if `prototype` properties are enumerable by default.
	support.enumPrototypes = propertyIsEnumerable.call(ctor,'prototype'); // Detect if `arguments` object indexes are non-enumerable
	support.nonEnumArgs = key != 0; // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	support.nonEnumShadows = !/valueOf/.test(props);})(1);var isObject=Rx.internals.isObject = function(value){var type=typeof value;return value && (type == 'function' || type == 'object') || false;};function keysIn(object){var result=[];if(!isObject(object)){return result;}if(support.nonEnumArgs && object.length && isArguments(object)){object = slice.call(object);}var skipProto=support.enumPrototypes && typeof object == 'function',skipErrorProps=support.enumErrorProps && (object === errorProto || object instanceof Error);for(var key in object) {if(!(skipProto && key == 'prototype') && !(skipErrorProps && (key == 'message' || key == 'name'))){result.push(key);}}if(support.nonEnumShadows && object !== objectProto){var ctor=object.constructor,index=-1,length=dontEnumsLength;if(object === (ctor && ctor.prototype)){var className=object === stringProto?stringClass:object === errorProto?errorClass:toString.call(object),nonEnum=nonEnumProps[className];}while(++index < length) {key = dontEnums[index];if(!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object,key)){result.push(key);}}}return result;}function internalFor(object,callback,keysFunc){var index=-1,props=keysFunc(object),length=props.length;while(++index < length) {var key=props[index];if(callback(object[key],key,object) === false){break;}}return object;}function internalForIn(object,callback){return internalFor(object,callback,keysIn);}function isNode(value){ // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	// methods that are `typeof` "string" and still can coerce nodes to strings
	return typeof value.toString != 'function' && typeof (value + '') == 'string';}var isArguments=function isArguments(value){return value && typeof value == 'object'?toString.call(value) == argsClass:false;}; // fallback for browsers that can't detect `arguments` objects by [[Class]]
	if(!supportsArgsClass){isArguments = function(value){return value && typeof value == 'object'?hasOwnProperty.call(value,'callee'):false;};}var isEqual=Rx.internals.isEqual = function(x,y){return deepEquals(x,y,[],[]);}; /** @private
	   * Used for deep comparison
	   **/function deepEquals(a,b,stackA,stackB){ // exit early for identical values
	if(a === b){ // treat `+0` vs. `-0` as not equal
	return a !== 0 || 1 / a == 1 / b;}var type=typeof a,otherType=typeof b; // exit early for unlike primitive values
	if(a === a && (a == null || b == null || type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object')){return false;} // compare [[Class]] names
	var className=toString.call(a),otherClass=toString.call(b);if(className == argsClass){className = objectClass;}if(otherClass == argsClass){otherClass = objectClass;}if(className != otherClass){return false;}switch(className){case boolClass:case dateClass: // coerce dates and booleans to numbers, dates to milliseconds and booleans
	// to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	return +a == +b;case numberClass: // treat `NaN` vs. `NaN` as equal
	return a != +a?b != +b: // but treat `-0` vs. `+0` as not equal
	a == 0?1 / a == 1 / b:a == +b;case regexpClass:case stringClass: // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	// treat string primitives and their corresponding object instances as equal
	return a == String(b);}var isArr=className == arrayClass;if(!isArr){ // exit for functions and DOM nodes
	if(className != objectClass || !support.nodeClass && (isNode(a) || isNode(b))){return false;} // in older versions of Opera, `arguments` objects have `Array` constructors
	var ctorA=!support.argsObject && isArguments(a)?Object:a.constructor,ctorB=!support.argsObject && isArguments(b)?Object:b.constructor; // non `Object` object instances with different constructors are not equal
	if(ctorA != ctorB && !(hasOwnProperty.call(a,'constructor') && hasOwnProperty.call(b,'constructor')) && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && 'constructor' in a && 'constructor' in b){return false;}} // assume cyclic structures are equal
	// the algorithm for detecting cyclic structures is adapted from ES 5.1
	// section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	var initedStack=!stackA;stackA || (stackA = []);stackB || (stackB = []);var length=stackA.length;while(length--) {if(stackA[length] == a){return stackB[length] == b;}}var size=0;var result=true; // add `a` and `b` to the stack of traversed objects
	stackA.push(a);stackB.push(b); // recursively compare objects and arrays (susceptible to call stack limits)
	if(isArr){ // compare lengths to determine if a deep comparison is necessary
	length = a.length;size = b.length;result = size == length;if(result){ // deep compare the contents, ignoring non-numeric properties
	while(size--) {var index=length,value=b[size];if(!(result = deepEquals(a[size],value,stackA,stackB))){break;}}}}else { // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	// which, in this case, is more costly
	internalForIn(b,function(value,key,b){if(hasOwnProperty.call(b,key)){ // count the number of properties.
	size++; // deep compare each property value.
	return result = hasOwnProperty.call(a,key) && deepEquals(a[key],value,stackA,stackB);}});if(result){ // ensure both objects have the same number of properties
	internalForIn(a,function(value,key,a){if(hasOwnProperty.call(a,key)){ // `size` will be `-1` if `a` has more properties than `b`
	return result = --size > -1;}});}}stackA.pop();stackB.pop();return result;}var hasProp=({}).hasOwnProperty,slice=Array.prototype.slice;var inherits=this.inherits = Rx.internals.inherits = function(child,parent){function __(){this.constructor = child;}__.prototype = parent.prototype;child.prototype = new __();};var addProperties=Rx.internals.addProperties = function(obj){for(var sources=[],i=1,len=arguments.length;i < len;i++) {sources.push(arguments[i]);}for(var idx=0,ln=sources.length;idx < ln;idx++) {var source=sources[idx];for(var prop in source) {obj[prop] = source[prop];}}}; // Rx Utils
	var addRef=Rx.internals.addRef = function(xs,r){return new AnonymousObservable(function(observer){return new CompositeDisposable(r.getDisposable(),xs.subscribe(observer));});};function arrayInitialize(count,factory){var a=new Array(count);for(var i=0;i < count;i++) {a[i] = factory();}return a;}var errorObj={e:{}};var tryCatchTarget;function tryCatcher(){try{return tryCatchTarget.apply(this,arguments);}catch(e) {errorObj.e = e;return errorObj;}}function tryCatch(fn){if(!isFunction(fn)){throw new TypeError('fn must be a function');}tryCatchTarget = fn;return tryCatcher;}function thrower(e){throw e;} // Collections
	function IndexedItem(id,value){this.id = id;this.value = value;}IndexedItem.prototype.compareTo = function(other){var c=this.value.compareTo(other.value);c === 0 && (c = this.id - other.id);return c;}; // Priority Queue for Scheduling
	var PriorityQueue=Rx.internals.PriorityQueue = function(capacity){this.items = new Array(capacity);this.length = 0;};var priorityProto=PriorityQueue.prototype;priorityProto.isHigherPriority = function(left,right){return this.items[left].compareTo(this.items[right]) < 0;};priorityProto.percolate = function(index){if(index >= this.length || index < 0){return;}var parent=index - 1 >> 1;if(parent < 0 || parent === index){return;}if(this.isHigherPriority(index,parent)){var temp=this.items[index];this.items[index] = this.items[parent];this.items[parent] = temp;this.percolate(parent);}};priorityProto.heapify = function(index){+index || (index = 0);if(index >= this.length || index < 0){return;}var left=2 * index + 1,right=2 * index + 2,first=index;if(left < this.length && this.isHigherPriority(left,first)){first = left;}if(right < this.length && this.isHigherPriority(right,first)){first = right;}if(first !== index){var temp=this.items[index];this.items[index] = this.items[first];this.items[first] = temp;this.heapify(first);}};priorityProto.peek = function(){return this.items[0].value;};priorityProto.removeAt = function(index){this.items[index] = this.items[--this.length];this.items[this.length] = undefined;this.heapify();};priorityProto.dequeue = function(){var result=this.peek();this.removeAt(0);return result;};priorityProto.enqueue = function(item){var index=this.length++;this.items[index] = new IndexedItem(PriorityQueue.count++,item);this.percolate(index);};priorityProto.remove = function(item){for(var i=0;i < this.length;i++) {if(this.items[i].value === item){this.removeAt(i);return true;}}return false;};PriorityQueue.count = 0; /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */var CompositeDisposable=Rx.CompositeDisposable = function(){var args=[],i,len;if(Array.isArray(arguments[0])){args = arguments[0];len = args.length;}else {len = arguments.length;args = new Array(len);for(i = 0;i < len;i++) {args[i] = arguments[i];}}for(i = 0;i < len;i++) {if(!isDisposable(args[i])){throw new TypeError('Not a disposable');}}this.disposables = args;this.isDisposed = false;this.length = args.length;};var CompositeDisposablePrototype=CompositeDisposable.prototype; /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */CompositeDisposablePrototype.add = function(item){if(this.isDisposed){item.dispose();}else {this.disposables.push(item);this.length++;}}; /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */CompositeDisposablePrototype.remove = function(item){var shouldDispose=false;if(!this.isDisposed){var idx=this.disposables.indexOf(item);if(idx !== -1){shouldDispose = true;this.disposables.splice(idx,1);this.length--;item.dispose();}}return shouldDispose;}; /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */CompositeDisposablePrototype.dispose = function(){if(!this.isDisposed){this.isDisposed = true;var len=this.disposables.length,currentDisposables=new Array(len);for(var i=0;i < len;i++) {currentDisposables[i] = this.disposables[i];}this.disposables = [];this.length = 0;for(i = 0;i < len;i++) {currentDisposables[i].dispose();}}}; /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */var Disposable=Rx.Disposable = function(action){this.isDisposed = false;this.action = action || noop;}; /** Performs the task of cleaning up resources. */Disposable.prototype.dispose = function(){if(!this.isDisposed){this.action();this.isDisposed = true;}}; /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */var disposableCreate=Disposable.create = function(action){return new Disposable(action);}; /**
	   * Gets the disposable that does nothing when disposed.
	   */var disposableEmpty=Disposable.empty = {dispose:noop}; /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */var isDisposable=Disposable.isDisposable = function(d){return d && isFunction(d.dispose);};var checkDisposed=Disposable.checkDisposed = function(disposable){if(disposable.isDisposed){throw new ObjectDisposedError();}};var SingleAssignmentDisposable=Rx.SingleAssignmentDisposable = (function(){function BooleanDisposable(){this.isDisposed = false;this.current = null;}var booleanDisposablePrototype=BooleanDisposable.prototype; /**
	     * Gets the underlying disposable.
	     * @return The underlying disposable.
	     */booleanDisposablePrototype.getDisposable = function(){return this.current;}; /**
	     * Sets the underlying disposable.
	     * @param {Disposable} value The new underlying disposable.
	     */booleanDisposablePrototype.setDisposable = function(value){var shouldDispose=this.isDisposed;if(!shouldDispose){var old=this.current;this.current = value;}old && old.dispose();shouldDispose && value && value.dispose();}; /**
	     * Disposes the underlying disposable as well as all future replacements.
	     */booleanDisposablePrototype.dispose = function(){if(!this.isDisposed){this.isDisposed = true;var old=this.current;this.current = null;}old && old.dispose();};return BooleanDisposable;})();var SerialDisposable=Rx.SerialDisposable = SingleAssignmentDisposable; /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */var RefCountDisposable=Rx.RefCountDisposable = (function(){function InnerDisposable(disposable){this.disposable = disposable;this.disposable.count++;this.isInnerDisposed = false;}InnerDisposable.prototype.dispose = function(){if(!this.disposable.isDisposed && !this.isInnerDisposed){this.isInnerDisposed = true;this.disposable.count--;if(this.disposable.count === 0 && this.disposable.isPrimaryDisposed){this.disposable.isDisposed = true;this.disposable.underlyingDisposable.dispose();}}}; /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */function RefCountDisposable(disposable){this.underlyingDisposable = disposable;this.isDisposed = false;this.isPrimaryDisposed = false;this.count = 0;} /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */RefCountDisposable.prototype.dispose = function(){if(!this.isDisposed && !this.isPrimaryDisposed){this.isPrimaryDisposed = true;if(this.count === 0){this.isDisposed = true;this.underlyingDisposable.dispose();}}}; /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */RefCountDisposable.prototype.getDisposable = function(){return this.isDisposed?disposableEmpty:new InnerDisposable(this);};return RefCountDisposable;})();function ScheduledDisposable(scheduler,disposable){this.scheduler = scheduler;this.disposable = disposable;this.isDisposed = false;}function scheduleItem(s,self){if(!self.isDisposed){self.isDisposed = true;self.disposable.dispose();}}ScheduledDisposable.prototype.dispose = function(){this.scheduler.scheduleWithState(this,scheduleItem);};var ScheduledItem=Rx.internals.ScheduledItem = function(scheduler,state,action,dueTime,comparer){this.scheduler = scheduler;this.state = state;this.action = action;this.dueTime = dueTime;this.comparer = comparer || defaultSubComparer;this.disposable = new SingleAssignmentDisposable();};ScheduledItem.prototype.invoke = function(){this.disposable.setDisposable(this.invokeCore());};ScheduledItem.prototype.compareTo = function(other){return this.comparer(this.dueTime,other.dueTime);};ScheduledItem.prototype.isCancelled = function(){return this.disposable.isDisposed;};ScheduledItem.prototype.invokeCore = function(){return this.action(this.scheduler,this.state);}; /** Provides a set of static properties to access commonly used schedulers. */var Scheduler=Rx.Scheduler = (function(){function Scheduler(now,schedule,scheduleRelative,scheduleAbsolute){this.now = now;this._schedule = schedule;this._scheduleRelative = scheduleRelative;this._scheduleAbsolute = scheduleAbsolute;}function invokeAction(scheduler,action){action();return disposableEmpty;}var schedulerProto=Scheduler.prototype; /**
	     * Schedules an action to be executed.
	     * @param {Function} action Action to execute.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.schedule = function(action){return this._schedule(action,invokeAction);}; /**
	     * Schedules an action to be executed.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleWithState = function(state,action){return this._schedule(state,action);}; /**
	     * Schedules an action to be executed after the specified relative due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleWithRelative = function(dueTime,action){return this._scheduleRelative(action,dueTime,invokeAction);}; /**
	     * Schedules an action to be executed after dueTime.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleWithRelativeAndState = function(state,dueTime,action){return this._scheduleRelative(state,dueTime,action);}; /**
	     * Schedules an action to be executed at the specified absolute due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	      */schedulerProto.scheduleWithAbsolute = function(dueTime,action){return this._scheduleAbsolute(action,dueTime,invokeAction);}; /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number}dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleWithAbsoluteAndState = function(state,dueTime,action){return this._scheduleAbsolute(state,dueTime,action);}; /** Gets the current time according to the local machine's system clock. */Scheduler.now = defaultNow; /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */Scheduler.normalize = function(timeSpan){timeSpan < 0 && (timeSpan = 0);return timeSpan;};return Scheduler;})();var normalizeTime=Scheduler.normalize;(function(schedulerProto){function invokeRecImmediate(scheduler,pair){var state=pair[0],action=pair[1],group=new CompositeDisposable();function recursiveAction(state1){action(state1,function(state2){var isAdded=false,isDone=false,d=scheduler.scheduleWithState(state2,function(scheduler1,state3){if(isAdded){group.remove(d);}else {isDone = true;}recursiveAction(state3);return disposableEmpty;});if(!isDone){group.add(d);isAdded = true;}});}recursiveAction(state);return group;}function invokeRecDate(scheduler,pair,method){var state=pair[0],action=pair[1],group=new CompositeDisposable();function recursiveAction(state1){action(state1,function(state2,dueTime1){var isAdded=false,isDone=false,d=scheduler[method](state2,dueTime1,function(scheduler1,state3){if(isAdded){group.remove(d);}else {isDone = true;}recursiveAction(state3);return disposableEmpty;});if(!isDone){group.add(d);isAdded = true;}});};recursiveAction(state);return group;}function scheduleInnerRecursive(action,self){action(function(dt){self(action,dt);});} /**
	     * Schedules an action to be executed recursively.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursive = function(action){return this.scheduleRecursiveWithState(action,function(_action,self){_action(function(){self(_action);});});}; /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursiveWithState = function(state,action){return this.scheduleWithState([state,action],invokeRecImmediate);}; /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursiveWithRelative = function(dueTime,action){return this.scheduleRecursiveWithRelativeAndState(action,dueTime,scheduleInnerRecursive);}; /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursiveWithRelativeAndState = function(state,dueTime,action){return this._scheduleRelative([state,action],dueTime,function(s,p){return invokeRecDate(s,p,'scheduleWithRelativeAndState');});}; /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursiveWithAbsolute = function(dueTime,action){return this.scheduleRecursiveWithAbsoluteAndState(action,dueTime,scheduleInnerRecursive);}; /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */schedulerProto.scheduleRecursiveWithAbsoluteAndState = function(state,dueTime,action){return this._scheduleAbsolute([state,action],dueTime,function(s,p){return invokeRecDate(s,p,'scheduleWithAbsoluteAndState');});};})(Scheduler.prototype);(function(schedulerProto){ /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */Scheduler.prototype.schedulePeriodic = function(period,action){return this.schedulePeriodicWithState(null,period,action);}; /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */Scheduler.prototype.schedulePeriodicWithState = function(state,period,action){if(typeof root.setInterval === 'undefined'){throw new NotSupportedError();}period = normalizeTime(period);var s=state,id=root.setInterval(function(){s = action(s);},period);return disposableCreate(function(){root.clearInterval(id);});};})(Scheduler.prototype);(function(schedulerProto){ /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */schedulerProto.catchError = schedulerProto['catch'] = function(handler){return new CatchScheduler(this,handler);};})(Scheduler.prototype);var SchedulePeriodicRecursive=Rx.internals.SchedulePeriodicRecursive = (function(){function tick(command,recurse){recurse(0,this._period);try{this._state = this._action(this._state);}catch(e) {this._cancel.dispose();throw e;}}function SchedulePeriodicRecursive(scheduler,state,period,action){this._scheduler = scheduler;this._state = state;this._period = period;this._action = action;}SchedulePeriodicRecursive.prototype.start = function(){var d=new SingleAssignmentDisposable();this._cancel = d;d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0,this._period,tick.bind(this)));return d;};return SchedulePeriodicRecursive;})(); /** Gets a scheduler that schedules work immediately on the current thread. */var immediateScheduler=Scheduler.immediate = (function(){function scheduleNow(state,action){return action(this,state);}return new Scheduler(defaultNow,scheduleNow,notSupported,notSupported);})(); /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */var currentThreadScheduler=Scheduler.currentThread = (function(){var queue;function runTrampoline(){while(queue.length > 0) {var item=queue.dequeue();!item.isCancelled() && item.invoke();}}function scheduleNow(state,action){var si=new ScheduledItem(this,state,action,this.now());if(!queue){queue = new PriorityQueue(4);queue.enqueue(si);var result=tryCatch(runTrampoline)();queue = null;if(result === errorObj){return thrower(result.e);}}else {queue.enqueue(si);}return si.disposable;}var currentScheduler=new Scheduler(defaultNow,scheduleNow,notSupported,notSupported);currentScheduler.scheduleRequired = function(){return !queue;};return currentScheduler;})();var scheduleMethod,clearMethod=noop;var localTimer=(function(){var localSetTimeout,localClearTimeout=noop;if('WScript' in this){localSetTimeout = function(fn,time){WScript.Sleep(time);fn();};}else if(!!root.setTimeout){localSetTimeout = root.setTimeout;localClearTimeout = root.clearTimeout;}else {throw new NotSupportedError();}return {setTimeout:localSetTimeout,clearTimeout:localClearTimeout};})();var localSetTimeout=localTimer.setTimeout,localClearTimeout=localTimer.clearTimeout;(function(){var taskId=0,tasks=new Array(1000);var reNative=RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g,'\\$&').replace(/toString| for [^\]]+/g,'.*?') + '$');var setImmediate=typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' && !reNative.test(setImmediate) && setImmediate,clearImmediate=typeof (clearImmediate = freeGlobal && moduleExports && freeGlobal.clearImmediate) == 'function' && !reNative.test(clearImmediate) && clearImmediate;function postMessageSupported(){ // Ensure not in a worker
	if(!root.postMessage || root.importScripts){return false;}var isAsync=false,oldHandler=root.onmessage; // Test for async
	root.onmessage = function(){isAsync = true;};root.postMessage('','*');root.onmessage = oldHandler;return isAsync;} // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	if(typeof setImmediate === 'function'){scheduleMethod = setImmediate;clearMethod = clearImmediate;}else if(typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]'){scheduleMethod = process.nextTick;}else if(postMessageSupported()){var MSG_PREFIX='ms.rx.schedule' + Math.random();var onGlobalPostMessage=function onGlobalPostMessage(event){ // Only if we're a match to avoid any other global events
	if(typeof event.data === 'string' && event.data.substring(0,MSG_PREFIX.length) === MSG_PREFIX){var handleId=event.data.substring(MSG_PREFIX.length),action=tasks[handleId];action();tasks[handleId] = undefined;}};if(root.addEventListener){root.addEventListener('message',onGlobalPostMessage,false);}else {root.attachEvent('onmessage',onGlobalPostMessage,false);}scheduleMethod = function(action){var currentId=taskId++;tasks[currentId] = action;root.postMessage(MSG_PREFIX + currentId,'*');};}else if(!!root.MessageChannel){var channel=new root.MessageChannel();channel.port1.onmessage = function(event){var id=event.data,action=tasks[id];action();tasks[id] = undefined;};scheduleMethod = function(action){var id=taskId++;tasks[id] = action;channel.port2.postMessage(id);};}else if('document' in root && 'onreadystatechange' in root.document.createElement('script')){scheduleMethod = function(action){var scriptElement=root.document.createElement('script');scriptElement.onreadystatechange = function(){action();scriptElement.onreadystatechange = null;scriptElement.parentNode.removeChild(scriptElement);scriptElement = null;};root.document.documentElement.appendChild(scriptElement);};}else {scheduleMethod = function(action){return localSetTimeout(action,0);};clearMethod = localClearTimeout;}})(); /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */var timeoutScheduler=Scheduler.timeout = Scheduler['default'] = (function(){function scheduleNow(state,action){var scheduler=this,disposable=new SingleAssignmentDisposable();var id=scheduleMethod(function(){if(!disposable.isDisposed){disposable.setDisposable(action(scheduler,state));}});return new CompositeDisposable(disposable,disposableCreate(function(){clearMethod(id);}));}function scheduleRelative(state,dueTime,action){var scheduler=this,dt=Scheduler.normalize(dueTime);if(dt === 0){return scheduler.scheduleWithState(state,action);}var disposable=new SingleAssignmentDisposable();var id=localSetTimeout(function(){if(!disposable.isDisposed){disposable.setDisposable(action(scheduler,state));}},dt);return new CompositeDisposable(disposable,disposableCreate(function(){localClearTimeout(id);}));}function scheduleAbsolute(state,dueTime,action){return this.scheduleWithRelativeAndState(state,dueTime - this.now(),action);}return new Scheduler(defaultNow,scheduleNow,scheduleRelative,scheduleAbsolute);})();var CatchScheduler=(function(__super__){function scheduleNow(state,action){return this._scheduler.scheduleWithState(state,this._wrap(action));}function scheduleRelative(state,dueTime,action){return this._scheduler.scheduleWithRelativeAndState(state,dueTime,this._wrap(action));}function scheduleAbsolute(state,dueTime,action){return this._scheduler.scheduleWithAbsoluteAndState(state,dueTime,this._wrap(action));}inherits(CatchScheduler,__super__);function CatchScheduler(scheduler,handler){this._scheduler = scheduler;this._handler = handler;this._recursiveOriginal = null;this._recursiveWrapper = null;__super__.call(this,this._scheduler.now.bind(this._scheduler),scheduleNow,scheduleRelative,scheduleAbsolute);}CatchScheduler.prototype._clone = function(scheduler){return new CatchScheduler(scheduler,this._handler);};CatchScheduler.prototype._wrap = function(action){var parent=this;return function(self,state){try{return action(parent._getRecursiveWrapper(self),state);}catch(e) {if(!parent._handler(e)){throw e;}return disposableEmpty;}};};CatchScheduler.prototype._getRecursiveWrapper = function(scheduler){if(this._recursiveOriginal !== scheduler){this._recursiveOriginal = scheduler;var wrapper=this._clone(scheduler);wrapper._recursiveOriginal = scheduler;wrapper._recursiveWrapper = wrapper;this._recursiveWrapper = wrapper;}return this._recursiveWrapper;};CatchScheduler.prototype.schedulePeriodicWithState = function(state,period,action){var self=this,failed=false,d=new SingleAssignmentDisposable();d.setDisposable(this._scheduler.schedulePeriodicWithState(state,period,function(state1){if(failed){return null;}try{return action(state1);}catch(e) {failed = true;if(!self._handler(e)){throw e;}d.dispose();return null;}}));return d;};return CatchScheduler;})(Scheduler); /**
	   *  Represents a notification to an observer.
	   */var Notification=Rx.Notification = (function(){function Notification(kind,value,exception,accept,acceptObservable,toString){this.kind = kind;this.value = value;this.exception = exception;this._accept = accept;this._acceptObservable = acceptObservable;this.toString = toString;} /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     *
	     * @memberOf Notification
	     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Delegate to invoke for an OnError notification.
	     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */Notification.prototype.accept = function(observerOrOnNext,onError,onCompleted){return observerOrOnNext && typeof observerOrOnNext === 'object'?this._acceptObservable(observerOrOnNext):this._accept(observerOrOnNext,onError,onCompleted);}; /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */Notification.prototype.toObservable = function(scheduler){var self=this;isScheduler(scheduler) || (scheduler = immediateScheduler);return new AnonymousObservable(function(observer){return scheduler.scheduleWithState(self,function(_,notification){notification._acceptObservable(observer);notification.kind === 'N' && observer.onCompleted();});});};return Notification;})(); /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */var notificationCreateOnNext=Notification.createOnNext = (function(){function _accept(onNext){return onNext(this.value);}function _acceptObservable(observer){return observer.onNext(this.value);}function toString(){return 'OnNext(' + this.value + ')';}return function(value){return new Notification('N',value,null,_accept,_acceptObservable,toString);};})(); /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */var notificationCreateOnError=Notification.createOnError = (function(){function _accept(onNext,onError){return onError(this.exception);}function _acceptObservable(observer){return observer.onError(this.exception);}function toString(){return 'OnError(' + this.exception + ')';}return function(e){return new Notification('E',null,e,_accept,_acceptObservable,toString);};})(); /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */var notificationCreateOnCompleted=Notification.createOnCompleted = (function(){function _accept(onNext,onError,onCompleted){return onCompleted();}function _acceptObservable(observer){return observer.onCompleted();}function toString(){return 'OnCompleted()';}return function(){return new Notification('C',null,null,_accept,_acceptObservable,toString);};})();var Enumerator=Rx.internals.Enumerator = function(next){this._next = next;};Enumerator.prototype.next = function(){return this._next();};Enumerator.prototype[$iterator$] = function(){return this;};var Enumerable=Rx.internals.Enumerable = function(iterator){this._iterator = iterator;};Enumerable.prototype[$iterator$] = function(){return this._iterator();};Enumerable.prototype.concat = function(){var sources=this;return new AnonymousObservable(function(o){var e=sources[$iterator$]();var isDisposed,subscription=new SerialDisposable();var cancelable=immediateScheduler.scheduleRecursive(function(self){if(isDisposed){return;}try{var currentItem=e.next();}catch(ex) {return o.onError(ex);}if(currentItem.done){return o.onCompleted();} // Check if promise
	var currentValue=currentItem.value;isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));var d=new SingleAssignmentDisposable();subscription.setDisposable(d);d.setDisposable(currentValue.subscribe(function(x){o.onNext(x);},function(err){o.onError(err);},self));});return new CompositeDisposable(subscription,cancelable,disposableCreate(function(){isDisposed = true;}));});};Enumerable.prototype.catchError = function(){var sources=this;return new AnonymousObservable(function(o){var e=sources[$iterator$]();var isDisposed,subscription=new SerialDisposable();var cancelable=immediateScheduler.scheduleRecursiveWithState(null,function(lastException,self){if(isDisposed){return;}try{var currentItem=e.next();}catch(ex) {return observer.onError(ex);}if(currentItem.done){if(lastException !== null){o.onError(lastException);}else {o.onCompleted();}return;} // Check if promise
	var currentValue=currentItem.value;isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));var d=new SingleAssignmentDisposable();subscription.setDisposable(d);d.setDisposable(currentValue.subscribe(function(x){o.onNext(x);},self,function(){o.onCompleted();}));});return new CompositeDisposable(subscription,cancelable,disposableCreate(function(){isDisposed = true;}));});};Enumerable.prototype.catchErrorWhen = function(notificationHandler){var sources=this;return new AnonymousObservable(function(o){var exceptions=new Subject(),notifier=new Subject(),handled=notificationHandler(exceptions),notificationDisposable=handled.subscribe(notifier);var e=sources[$iterator$]();var isDisposed,lastException,subscription=new SerialDisposable();var cancelable=immediateScheduler.scheduleRecursive(function(self){if(isDisposed){return;}try{var currentItem=e.next();}catch(ex) {return o.onError(ex);}if(currentItem.done){if(lastException){o.onError(lastException);}else {o.onCompleted();}return;} // Check if promise
	var currentValue=currentItem.value;isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));var outer=new SingleAssignmentDisposable();var inner=new SingleAssignmentDisposable();subscription.setDisposable(new CompositeDisposable(inner,outer));outer.setDisposable(currentValue.subscribe(function(x){o.onNext(x);},function(exn){inner.setDisposable(notifier.subscribe(self,function(ex){o.onError(ex);},function(){o.onCompleted();}));exceptions.onNext(exn);},function(){o.onCompleted();}));});return new CompositeDisposable(notificationDisposable,subscription,cancelable,disposableCreate(function(){isDisposed = true;}));});};var enumerableRepeat=Enumerable.repeat = function(value,repeatCount){if(repeatCount == null){repeatCount = -1;}return new Enumerable(function(){var left=repeatCount;return new Enumerator(function(){if(left === 0){return doneEnumerator;}if(left > 0){left--;}return {done:false,value:value};});});};var enumerableOf=Enumerable.of = function(source,selector,thisArg){if(selector){var selectorFn=bindCallback(selector,thisArg,3);}return new Enumerable(function(){var index=-1;return new Enumerator(function(){return ++index < source.length?{done:false,value:!selector?source[index]:selectorFn(source[index],index,source)}:doneEnumerator;});});}; /**
	   * Supports push-style iteration over an observable sequence.
	   */var Observer=Rx.Observer = function(){}; /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */Observer.prototype.toNotifier = function(){var observer=this;return function(n){return n.accept(observer);};}; /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */Observer.prototype.asObserver = function(){return new AnonymousObserver(this.onNext.bind(this),this.onError.bind(this),this.onCompleted.bind(this));}; /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */Observer.prototype.checked = function(){return new CheckedObserver(this);}; /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */var observerCreate=Observer.create = function(onNext,onError,onCompleted){onNext || (onNext = noop);onError || (onError = defaultError);onCompleted || (onCompleted = noop);return new AnonymousObserver(onNext,onError,onCompleted);}; /**
	   *  Creates an observer from a notification callback.
	   *
	   * @static
	   * @memberOf Observer
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */Observer.fromNotifier = function(handler,thisArg){return new AnonymousObserver(function(x){return handler.call(thisArg,notificationCreateOnNext(x));},function(e){return handler.call(thisArg,notificationCreateOnError(e));},function(){return handler.call(thisArg,notificationCreateOnCompleted());});}; /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */Observer.prototype.notifyOn = function(scheduler){return new ObserveOnObserver(scheduler,this);};Observer.prototype.makeSafe = function(disposable){return new AnonymousSafeObserver(this._onNext,this._onError,this._onCompleted,disposable);}; /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */var AbstractObserver=Rx.internals.AbstractObserver = (function(__super__){inherits(AbstractObserver,__super__); /**
	     * Creates a new observer in a non-stopped state.
	     */function AbstractObserver(){this.isStopped = false;__super__.call(this);} // Must be implemented by other observers
	AbstractObserver.prototype.next = notImplemented;AbstractObserver.prototype.error = notImplemented;AbstractObserver.prototype.completed = notImplemented; /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */AbstractObserver.prototype.onNext = function(value){if(!this.isStopped){this.next(value);}}; /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */AbstractObserver.prototype.onError = function(error){if(!this.isStopped){this.isStopped = true;this.error(error);}}; /**
	     * Notifies the observer of the end of the sequence.
	     */AbstractObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.completed();}}; /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */AbstractObserver.prototype.dispose = function(){this.isStopped = true;};AbstractObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.error(e);return true;}return false;};return AbstractObserver;})(Observer); /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */var AnonymousObserver=Rx.AnonymousObserver = (function(__super__){inherits(AnonymousObserver,__super__); /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */function AnonymousObserver(onNext,onError,onCompleted){__super__.call(this);this._onNext = onNext;this._onError = onError;this._onCompleted = onCompleted;} /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */AnonymousObserver.prototype.next = function(value){this._onNext(value);}; /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */AnonymousObserver.prototype.error = function(error){this._onError(error);}; /**
	     *  Calls the onCompleted action.
	     */AnonymousObserver.prototype.completed = function(){this._onCompleted();};return AnonymousObserver;})(AbstractObserver);var CheckedObserver=(function(__super__){inherits(CheckedObserver,__super__);function CheckedObserver(observer){__super__.call(this);this._observer = observer;this._state = 0; // 0 - idle, 1 - busy, 2 - done
	}var CheckedObserverPrototype=CheckedObserver.prototype;CheckedObserverPrototype.onNext = function(value){this.checkAccess();var res=tryCatch(this._observer.onNext).call(this._observer,value);this._state = 0;res === errorObj && thrower(res.e);};CheckedObserverPrototype.onError = function(err){this.checkAccess();var res=tryCatch(this._observer.onError).call(this._observer,err);this._state = 2;res === errorObj && thrower(res.e);};CheckedObserverPrototype.onCompleted = function(){this.checkAccess();var res=tryCatch(this._observer.onCompleted).call(this._observer);this._state = 2;res === errorObj && thrower(res.e);};CheckedObserverPrototype.checkAccess = function(){if(this._state === 1){throw new Error('Re-entrancy detected');}if(this._state === 2){throw new Error('Observer completed');}if(this._state === 0){this._state = 1;}};return CheckedObserver;})(Observer);var ScheduledObserver=Rx.internals.ScheduledObserver = (function(__super__){inherits(ScheduledObserver,__super__);function ScheduledObserver(scheduler,observer){__super__.call(this);this.scheduler = scheduler;this.observer = observer;this.isAcquired = false;this.hasFaulted = false;this.queue = [];this.disposable = new SerialDisposable();}ScheduledObserver.prototype.next = function(value){var self=this;this.queue.push(function(){self.observer.onNext(value);});};ScheduledObserver.prototype.error = function(e){var self=this;this.queue.push(function(){self.observer.onError(e);});};ScheduledObserver.prototype.completed = function(){var self=this;this.queue.push(function(){self.observer.onCompleted();});};ScheduledObserver.prototype.ensureActive = function(){var isOwner=false,parent=this;if(!this.hasFaulted && this.queue.length > 0){isOwner = !this.isAcquired;this.isAcquired = true;}if(isOwner){this.disposable.setDisposable(this.scheduler.scheduleRecursive(function(self){var work;if(parent.queue.length > 0){work = parent.queue.shift();}else {parent.isAcquired = false;return;}try{work();}catch(ex) {parent.queue = [];parent.hasFaulted = true;throw ex;}self();}));}};ScheduledObserver.prototype.dispose = function(){__super__.prototype.dispose.call(this);this.disposable.dispose();};return ScheduledObserver;})(AbstractObserver);var ObserveOnObserver=(function(__super__){inherits(ObserveOnObserver,__super__);function ObserveOnObserver(scheduler,observer,cancel){__super__.call(this,scheduler,observer);this._cancel = cancel;}ObserveOnObserver.prototype.next = function(value){__super__.prototype.next.call(this,value);this.ensureActive();};ObserveOnObserver.prototype.error = function(e){__super__.prototype.error.call(this,e);this.ensureActive();};ObserveOnObserver.prototype.completed = function(){__super__.prototype.completed.call(this);this.ensureActive();};ObserveOnObserver.prototype.dispose = function(){__super__.prototype.dispose.call(this);this._cancel && this._cancel.dispose();this._cancel = null;};return ObserveOnObserver;})(ScheduledObserver);var observableProto; /**
	   * Represents a push-style collection.
	   */var Observable=Rx.Observable = (function(){function Observable(subscribe){if(Rx.config.longStackSupport && hasStacks){try{throw new Error();}catch(e) {this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);}var self=this;this._subscribe = function(observer){var oldOnError=observer.onError.bind(observer);observer.onError = function(err){makeStackTraceLong(err,self);oldOnError(err);};return subscribe.call(self,observer);};}else {this._subscribe = subscribe;}}observableProto = Observable.prototype; /**
	     *  Subscribes an observer to the observable sequence.
	     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */observableProto.subscribe = observableProto.forEach = function(observerOrOnNext,onError,onCompleted){return this._subscribe(typeof observerOrOnNext === 'object'?observerOrOnNext:observerCreate(observerOrOnNext,onError,onCompleted));}; /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */observableProto.subscribeOnNext = function(onNext,thisArg){return this._subscribe(observerCreate(typeof thisArg !== 'undefined'?function(x){onNext.call(thisArg,x);}:onNext));}; /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */observableProto.subscribeOnError = function(onError,thisArg){return this._subscribe(observerCreate(null,typeof thisArg !== 'undefined'?function(e){onError.call(thisArg,e);}:onError));}; /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */observableProto.subscribeOnCompleted = function(onCompleted,thisArg){return this._subscribe(observerCreate(null,null,typeof thisArg !== 'undefined'?function(){onCompleted.call(thisArg);}:onCompleted));};return Observable;})();var ObservableBase=Rx.ObservableBase = (function(__super__){inherits(ObservableBase,__super__);function fixSubscriber(subscriber){return subscriber && isFunction(subscriber.dispose)?subscriber:isFunction(subscriber)?disposableCreate(subscriber):disposableEmpty;}function setDisposable(s,state){var ado=state[0],self=state[1];var sub=tryCatch(self.subscribeCore).call(self,ado);if(sub === errorObj){if(!ado.fail(errorObj.e)){return thrower(errorObj.e);}}ado.setDisposable(fixSubscriber(sub));}function subscribe(observer){var ado=new AutoDetachObserver(observer),state=[ado,this];if(currentThreadScheduler.scheduleRequired()){currentThreadScheduler.scheduleWithState(state,setDisposable);}else {setDisposable(null,state);}return ado;}function ObservableBase(){__super__.call(this,subscribe);}ObservableBase.prototype.subscribeCore = notImplemented;return ObservableBase;})(Observable); /**
	   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	   *
	   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	   *  that require to be run on a scheduler, use subscribeOn.
	   *
	   *  @param {Scheduler} scheduler Scheduler to notify observers on.
	   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	   */observableProto.observeOn = function(scheduler){var source=this;return new AnonymousObservable(function(observer){return source.subscribe(new ObserveOnObserver(scheduler,observer));},source);}; /**
	   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.

	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	   *  callbacks on a scheduler, use observeOn.

	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	   */observableProto.subscribeOn = function(scheduler){var source=this;return new AnonymousObservable(function(observer){var m=new SingleAssignmentDisposable(),d=new SerialDisposable();d.setDisposable(m);m.setDisposable(scheduler.schedule(function(){d.setDisposable(new ScheduledDisposable(scheduler,source.subscribe(observer)));}));return d;},source);}; /**
	   * Converts a Promise to an Observable sequence
	   * @param {Promise} An ES6 Compliant promise.
	   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	   */var observableFromPromise=Observable.fromPromise = function(promise){return observableDefer(function(){var subject=new Rx.AsyncSubject();promise.then(function(value){subject.onNext(value);subject.onCompleted();},subject.onError.bind(subject));return subject;});}; /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */observableProto.toPromise = function(promiseCtor){promiseCtor || (promiseCtor = Rx.config.Promise);if(!promiseCtor){throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise');}var source=this;return new promiseCtor(function(resolve,reject){ // No cancellation can be done
	var value,hasValue=false;source.subscribe(function(v){value = v;hasValue = true;},reject,function(){hasValue && resolve(value);});});};var ToArrayObservable=(function(__super__){inherits(ToArrayObservable,__super__);function ToArrayObservable(source){this.source = source;__super__.call(this);}ToArrayObservable.prototype.subscribeCore = function(observer){return this.source.subscribe(new ToArrayObserver(observer));};return ToArrayObservable;})(ObservableBase);function ToArrayObserver(observer){this.observer = observer;this.a = [];this.isStopped = false;}ToArrayObserver.prototype.onNext = function(x){if(!this.isStopped){this.a.push(x);}};ToArrayObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);}};ToArrayObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.observer.onNext(this.a);this.observer.onCompleted();}};ToArrayObserver.prototype.dispose = function(){this.isStopped = true;};ToArrayObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);return true;}return false;}; /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */observableProto.toArray = function(){return new ToArrayObservable(this);}; /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */Observable.create = Observable.createWithDisposable = function(subscribe,parent){return new AnonymousObservable(subscribe,parent);}; /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */var observableDefer=Observable.defer = function(observableFactory){return new AnonymousObservable(function(observer){var result;try{result = observableFactory();}catch(e) {return observableThrow(e).subscribe(observer);}isPromise(result) && (result = observableFromPromise(result));return result.subscribe(observer);});}; /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */var observableEmpty=Observable.empty = function(scheduler){isScheduler(scheduler) || (scheduler = immediateScheduler);return new AnonymousObservable(function(observer){return scheduler.schedule(function(){observer.onCompleted();});});};var FromObservable=(function(__super__){inherits(FromObservable,__super__);function FromObservable(iterable,mapper,scheduler){this.iterable = iterable;this.mapper = mapper;this.scheduler = scheduler;__super__.call(this);}FromObservable.prototype.subscribeCore = function(observer){var sink=new FromSink(observer,this);return sink.run();};return FromObservable;})(ObservableBase);var FromSink=(function(){function FromSink(observer,parent){this.observer = observer;this.parent = parent;}FromSink.prototype.run = function(){var list=Object(this.parent.iterable),it=getIterable(list),observer=this.observer,mapper=this.parent.mapper;function loopRecursive(i,recurse){try{var next=it.next();}catch(e) {return observer.onError(e);}if(next.done){return observer.onCompleted();}var result=next.value;if(mapper){try{result = mapper(result,i);}catch(e) {return observer.onError(e);}}observer.onNext(result);recurse(i + 1);}return this.parent.scheduler.scheduleRecursiveWithState(0,loopRecursive);};return FromSink;})();var maxSafeInteger=Math.pow(2,53) - 1;function StringIterable(str){this._s = s;}StringIterable.prototype[$iterator$] = function(){return new StringIterator(this._s);};function StringIterator(str){this._s = s;this._l = s.length;this._i = 0;}StringIterator.prototype[$iterator$] = function(){return this;};StringIterator.prototype.next = function(){return this._i < this._l?{done:false,value:this._s.charAt(this._i++)}:doneEnumerator;};function ArrayIterable(a){this._a = a;}ArrayIterable.prototype[$iterator$] = function(){return new ArrayIterator(this._a);};function ArrayIterator(a){this._a = a;this._l = toLength(a);this._i = 0;}ArrayIterator.prototype[$iterator$] = function(){return this;};ArrayIterator.prototype.next = function(){return this._i < this._l?{done:false,value:this._a[this._i++]}:doneEnumerator;};function numberIsFinite(value){return typeof value === 'number' && root.isFinite(value);}function isNan(n){return n !== n;}function getIterable(o){var i=o[$iterator$],it;if(!i && typeof o === 'string'){it = new StringIterable(o);return it[$iterator$]();}if(!i && o.length !== undefined){it = new ArrayIterable(o);return it[$iterator$]();}if(!i){throw new TypeError('Object is not iterable');}return o[$iterator$]();}function sign(value){var number=+value;if(number === 0){return number;}if(isNaN(number)){return number;}return number < 0?-1:1;}function toLength(o){var len=+o.length;if(isNaN(len)){return 0;}if(len === 0 || !numberIsFinite(len)){return len;}len = sign(len) * Math.floor(Math.abs(len));if(len <= 0){return 0;}if(len > maxSafeInteger){return maxSafeInteger;}return len;} /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */var observableFrom=Observable.from = function(iterable,mapFn,thisArg,scheduler){if(iterable == null){throw new Error('iterable cannot be null.');}if(mapFn && !isFunction(mapFn)){throw new Error('mapFn when provided must be a function');}if(mapFn){var mapper=bindCallback(mapFn,thisArg,2);}isScheduler(scheduler) || (scheduler = currentThreadScheduler);return new FromObservable(iterable,mapper,scheduler);};var FromArrayObservable=(function(__super__){inherits(FromArrayObservable,__super__);function FromArrayObservable(args,scheduler){this.args = args;this.scheduler = scheduler;__super__.call(this);}FromArrayObservable.prototype.subscribeCore = function(observer){var sink=new FromArraySink(observer,this);return sink.run();};return FromArrayObservable;})(ObservableBase);function FromArraySink(observer,parent){this.observer = observer;this.parent = parent;}FromArraySink.prototype.run = function(){var observer=this.observer,args=this.parent.args,len=args.length;function loopRecursive(i,recurse){if(i < len){observer.onNext(args[i]);recurse(i + 1);}else {observer.onCompleted();}}return this.parent.scheduler.scheduleRecursiveWithState(0,loopRecursive);}; /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */var observableFromArray=Observable.fromArray = function(array,scheduler){isScheduler(scheduler) || (scheduler = currentThreadScheduler);return new FromArrayObservable(array,scheduler);}; /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */Observable.generate = function(initialState,condition,iterate,resultSelector,scheduler){isScheduler(scheduler) || (scheduler = currentThreadScheduler);return new AnonymousObservable(function(observer){var first=true,state=initialState;return scheduler.scheduleRecursive(function(self){var hasResult,result;try{if(first){first = false;}else {state = iterate(state);}hasResult = condition(state);if(hasResult){result = resultSelector(state);}}catch(exception) {observer.onError(exception);return;}if(hasResult){observer.onNext(result);self();}else {observer.onCompleted();}});});};function observableOf(scheduler,array){isScheduler(scheduler) || (scheduler = currentThreadScheduler);return new FromArrayObservable(array,scheduler);} /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */Observable.of = function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}return new FromArrayObservable(args,currentThreadScheduler);}; /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */Observable.ofWithScheduler = function(scheduler){var len=arguments.length,args=new Array(len - 1);for(var i=1;i < len;i++) {args[i - 1] = arguments[i];}return new FromArrayObservable(args,scheduler);}; /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */Observable.ofArrayChanges = function(array){if(!Array.isArray(array)){throw new TypeError('Array.observe only accepts arrays.');}if(typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function'){throw new TypeError('Array.observe is not supported on your platform');}return new AnonymousObservable(function(observer){function observerFn(changes){for(var i=0,len=changes.length;i < len;i++) {observer.onNext(changes[i]);}}Array.observe(array,observerFn);return function(){Array.unobserve(array,observerFn);};});}; /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */Observable.ofObjectChanges = function(obj){if(obj == null){throw new TypeError('object must not be null or undefined.');}if(typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function'){throw new TypeError('Array.observe is not supported on your platform');}return new AnonymousObservable(function(observer){function observerFn(changes){for(var i=0,len=changes.length;i < len;i++) {observer.onNext(changes[i]);}}Object.observe(obj,observerFn);return function(){Object.unobserve(obj,observerFn);};});}; /**
	   *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */var observableNever=Observable.never = function(){return new AnonymousObservable(function(){return disposableEmpty;});}; /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */Observable.pairs = function(obj,scheduler){scheduler || (scheduler = Rx.Scheduler.currentThread);return new AnonymousObservable(function(observer){var keys=Object.keys(obj),len=keys.length;return scheduler.scheduleRecursiveWithState(0,function(idx,self){if(idx < len){var key=keys[idx];observer.onNext([key,obj[key]]);self(idx + 1);}else {observer.onCompleted();}});});};var RangeObservable=(function(__super__){inherits(RangeObservable,__super__);function RangeObservable(start,count,scheduler){this.start = start;this.count = count;this.scheduler = scheduler;__super__.call(this);}RangeObservable.prototype.subscribeCore = function(observer){var sink=new RangeSink(observer,this);return sink.run();};return RangeObservable;})(ObservableBase);var RangeSink=(function(){function RangeSink(observer,parent){this.observer = observer;this.parent = parent;}RangeSink.prototype.run = function(){var start=this.parent.start,count=this.parent.count,observer=this.observer;function loopRecursive(i,recurse){if(i < count){observer.onNext(start + i);recurse(i + 1);}else {observer.onCompleted();}}return this.parent.scheduler.scheduleRecursiveWithState(0,loopRecursive);};return RangeSink;})(); /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */Observable.range = function(start,count,scheduler){isScheduler(scheduler) || (scheduler = currentThreadScheduler);return new RangeObservable(start,count,scheduler);}; /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.repeat(42);
	   *  var res = Rx.Observable.repeat(42, 4);
	   *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
	   *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */Observable.repeat = function(value,repeatCount,scheduler){isScheduler(scheduler) || (scheduler = currentThreadScheduler);return observableReturn(value,scheduler).repeat(repeatCount == null?-1:repeatCount);}; /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just', and 'returnValue' for browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */var observableReturn=Observable['return'] = Observable.just = function(value,scheduler){isScheduler(scheduler) || (scheduler = immediateScheduler);return new AnonymousObservable(function(observer){return scheduler.schedule(function(){observer.onNext(value);observer.onCompleted();});});}; /** @deprecated use return or just */Observable.returnValue = function(){ //deprecate('returnValue', 'return or just');
	return observableReturn.apply(null,arguments);}; /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */var observableThrow=Observable['throw'] = Observable.throwError = function(error,scheduler){isScheduler(scheduler) || (scheduler = immediateScheduler);return new AnonymousObservable(function(observer){return scheduler.schedule(function(){observer.onError(error);});});}; /** @deprecated use #some instead */Observable.throwException = function(){ //deprecate('throwException', 'throwError');
	return Observable.throwError.apply(null,arguments);}; /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */Observable.using = function(resourceFactory,observableFactory){return new AnonymousObservable(function(observer){var disposable=disposableEmpty,resource,source;try{resource = resourceFactory();resource && (disposable = resource);source = observableFactory(resource);}catch(exception) {return new CompositeDisposable(observableThrow(exception).subscribe(observer),disposable);}return new CompositeDisposable(source.subscribe(observer),disposable);});}; /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */observableProto.amb = function(rightSource){var leftSource=this;return new AnonymousObservable(function(observer){var choice,leftChoice='L',rightChoice='R',leftSubscription=new SingleAssignmentDisposable(),rightSubscription=new SingleAssignmentDisposable();isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));function choiceL(){if(!choice){choice = leftChoice;rightSubscription.dispose();}}function choiceR(){if(!choice){choice = rightChoice;leftSubscription.dispose();}}leftSubscription.setDisposable(leftSource.subscribe(function(left){choiceL();if(choice === leftChoice){observer.onNext(left);}},function(err){choiceL();if(choice === leftChoice){observer.onError(err);}},function(){choiceL();if(choice === leftChoice){observer.onCompleted();}}));rightSubscription.setDisposable(rightSource.subscribe(function(right){choiceR();if(choice === rightChoice){observer.onNext(right);}},function(err){choiceR();if(choice === rightChoice){observer.onError(err);}},function(){choiceR();if(choice === rightChoice){observer.onCompleted();}}));return new CompositeDisposable(leftSubscription,rightSubscription);});}; /**
	   * Propagates the observable sequence or Promise that reacts first.
	   *
	   * @example
	   * var = Rx.Observable.amb(xs, ys, zs);
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */Observable.amb = function(){var acc=observableNever(),items=[];if(Array.isArray(arguments[0])){items = arguments[0];}else {for(var i=0,len=arguments.length;i < len;i++) {items.push(arguments[i]);}}function func(previous,current){return previous.amb(current);}for(var i=0,len=items.length;i < len;i++) {acc = func(acc,items[i]);}return acc;};function observableCatchHandler(source,handler){return new AnonymousObservable(function(o){var d1=new SingleAssignmentDisposable(),subscription=new SerialDisposable();subscription.setDisposable(d1);d1.setDisposable(source.subscribe(function(x){o.onNext(x);},function(e){try{var result=handler(e);}catch(ex) {return o.onError(ex);}isPromise(result) && (result = observableFromPromise(result));var d=new SingleAssignmentDisposable();subscription.setDisposable(d);d.setDisposable(result.subscribe(o));},function(x){o.onCompleted(x);}));return subscription;},source);} /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @example
	   * 1 - xs.catchException(ys)
	   * 2 - xs.catchException(function (ex) { return ys(ex); })
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */observableProto['catch'] = observableProto.catchError = observableProto.catchException = function(handlerOrSecond){return typeof handlerOrSecond === 'function'?observableCatchHandler(this,handlerOrSecond):observableCatch([this,handlerOrSecond]);}; /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */var observableCatch=Observable.catchError = Observable['catch'] = Observable.catchException = function(){var items=[];if(Array.isArray(arguments[0])){items = arguments[0];}else {for(var i=0,len=arguments.length;i < len;i++) {items.push(arguments[i]);}}return enumerableOf(items).catchError();}; /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */observableProto.combineLatest = function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}if(Array.isArray(args[0])){args[0].unshift(this);}else {args.unshift(this);}return combineLatest.apply(this,args);}; /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   *
	   * @example
	   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */var combineLatest=Observable.combineLatest = function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}var resultSelector=args.pop();Array.isArray(args[0]) && (args = args[0]);return new AnonymousObservable(function(o){var n=args.length,falseFactory=function falseFactory(){return false;},hasValue=arrayInitialize(n,falseFactory),hasValueAll=false,isDone=arrayInitialize(n,falseFactory),values=new Array(n);function next(i){hasValue[i] = true;if(hasValueAll || (hasValueAll = hasValue.every(identity))){try{var res=resultSelector.apply(null,values);}catch(e) {return o.onError(e);}o.onNext(res);}else if(isDone.filter(function(x,j){return j !== i;}).every(identity)){o.onCompleted();}}function done(i){isDone[i] = true;isDone.every(identity) && o.onCompleted();}var subscriptions=new Array(n);for(var idx=0;idx < n;idx++) {(function(i){var source=args[i],sad=new SingleAssignmentDisposable();isPromise(source) && (source = observableFromPromise(source));sad.setDisposable(source.subscribe(function(x){values[i] = x;next(i);},function(e){o.onError(e);},function(){done(i);}));subscriptions[i] = sad;})(idx);}return new CompositeDisposable(subscriptions);},this);}; /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */observableProto.concat = function(){for(var args=[],i=0,len=arguments.length;i < len;i++) {args.push(arguments[i]);}args.unshift(this);return observableConcat.apply(null,args);}; /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */var observableConcat=Observable.concat = function(){var args;if(Array.isArray(arguments[0])){args = arguments[0];}else {args = new Array(arguments.length);for(var i=0,len=arguments.length;i < len;i++) {args[i] = arguments[i];}}return enumerableOf(args).concat();}; /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */observableProto.concatAll = observableProto.concatObservable = function(){return this.merge(1);};var MergeObservable=(function(__super__){inherits(MergeObservable,__super__);function MergeObservable(source,maxConcurrent){this.source = source;this.maxConcurrent = maxConcurrent;__super__.call(this);}MergeObservable.prototype.subscribeCore = function(observer){var g=new CompositeDisposable();g.add(this.source.subscribe(new MergeObserver(observer,this.maxConcurrent,g)));return g;};return MergeObservable;})(ObservableBase);var MergeObserver=(function(){function MergeObserver(o,max,g){this.o = o;this.max = max;this.g = g;this.done = false;this.q = [];this.activeCount = 0;this.isStopped = false;}MergeObserver.prototype.handleSubscribe = function(xs){var sad=new SingleAssignmentDisposable();this.g.add(sad);isPromise(xs) && (xs = observableFromPromise(xs));sad.setDisposable(xs.subscribe(new InnerObserver(this,sad)));};MergeObserver.prototype.onNext = function(innerSource){if(this.isStopped){return;}if(this.activeCount < this.max){this.activeCount++;this.handleSubscribe(innerSource);}else {this.q.push(innerSource);}};MergeObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.o.onError(e);}};MergeObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.done = true;this.activeCount === 0 && this.o.onCompleted();}};MergeObserver.prototype.dispose = function(){this.isStopped = true;};MergeObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.o.onError(e);return true;}return false;};function InnerObserver(parent,sad){this.parent = parent;this.sad = sad;this.isStopped = false;}InnerObserver.prototype.onNext = function(x){if(!this.isStopped){this.parent.o.onNext(x);}};InnerObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.parent.o.onError(e);}};InnerObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;var parent=this.parent;parent.g.remove(this.sad);if(parent.q.length > 0){parent.handleSubscribe(parent.q.shift());}else {parent.activeCount--;parent.done && parent.activeCount === 0 && parent.o.onCompleted();}}};InnerObserver.prototype.dispose = function(){this.isStopped = true;};InnerObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.parent.o.onError(e);return true;}return false;};return MergeObserver;})(); /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  *
	  * @example
	  * 1 - merged = sources.merge(1);
	  * 2 - merged = source.merge(otherSource);
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */observableProto.merge = function(maxConcurrentOrOther){return typeof maxConcurrentOrOther !== 'number'?observableMerge(this,maxConcurrentOrOther):new MergeObservable(this,maxConcurrentOrOther);}; /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */var observableMerge=Observable.merge = function(){var scheduler,sources=[],i,len=arguments.length;if(!arguments[0]){scheduler = immediateScheduler;for(i = 1;i < len;i++) {sources.push(arguments[i]);}}else if(isScheduler(arguments[0])){scheduler = arguments[0];for(i = 1;i < len;i++) {sources.push(arguments[i]);}}else {scheduler = immediateScheduler;for(i = 0;i < len;i++) {sources.push(arguments[i]);}}if(Array.isArray(sources[0])){sources = sources[0];}return observableOf(scheduler,sources).mergeAll();};var MergeAllObservable=(function(__super__){inherits(MergeAllObservable,__super__);function MergeAllObservable(source){this.source = source;__super__.call(this);}MergeAllObservable.prototype.subscribeCore = function(observer){var g=new CompositeDisposable(),m=new SingleAssignmentDisposable();g.add(m);m.setDisposable(this.source.subscribe(new MergeAllObserver(observer,g)));return g;};return MergeAllObservable;})(ObservableBase);var MergeAllObserver=(function(){function MergeAllObserver(o,g){this.o = o;this.g = g;this.isStopped = false;this.done = false;}MergeAllObserver.prototype.onNext = function(innerSource){if(this.isStopped){return;}var sad=new SingleAssignmentDisposable();this.g.add(sad);isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));sad.setDisposable(innerSource.subscribe(new InnerObserver(this,this.g,sad)));};MergeAllObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.o.onError(e);}};MergeAllObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.done = true;this.g.length === 1 && this.o.onCompleted();}};MergeAllObserver.prototype.dispose = function(){this.isStopped = true;};MergeAllObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.o.onError(e);return true;}return false;};function InnerObserver(parent,g,sad){this.parent = parent;this.g = g;this.sad = sad;this.isStopped = false;}InnerObserver.prototype.onNext = function(x){if(!this.isStopped){this.parent.o.onNext(x);}};InnerObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.parent.o.onError(e);}};InnerObserver.prototype.onCompleted = function(){if(!this.isStopped){var parent=this.parent;this.isStopped = true;parent.g.remove(this.sad);parent.done && parent.g.length === 1 && parent.o.onCompleted();}};InnerObserver.prototype.dispose = function(){this.isStopped = true;};InnerObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.parent.o.onError(e);return true;}return false;};return MergeAllObserver;})(); /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */observableProto.mergeAll = observableProto.mergeObservable = function(){return new MergeAllObservable(this);};var CompositeError=Rx.CompositeError = function(errors){this.name = "NotImplementedError";this.innerErrors = errors;this.message = 'This contains multiple errors. Check the innerErrors';Error.call(this);};CompositeError.prototype = Error.prototype; /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */Observable.mergeDelayError = function(){var args;if(Array.isArray(arguments[0])){args = arguments[0];}else {var len=arguments.length;args = new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}}var source=observableOf(null,args);return new AnonymousObservable(function(o){var group=new CompositeDisposable(),m=new SingleAssignmentDisposable(),isStopped=false,errors=[];function setCompletion(){if(errors.length === 0){o.onCompleted();}else if(errors.length === 1){o.onError(errors[0]);}else {o.onError(new CompositeError(errors));}}group.add(m);m.setDisposable(source.subscribe(function(innerSource){var innerSubscription=new SingleAssignmentDisposable();group.add(innerSubscription); // Check for promises support
	isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));innerSubscription.setDisposable(innerSource.subscribe(function(x){o.onNext(x);},function(e){errors.push(e);group.remove(innerSubscription);isStopped && group.length === 1 && setCompletion();},function(){group.remove(innerSubscription);isStopped && group.length === 1 && setCompletion();}));},function(e){errors.push(e);isStopped = true;group.length === 1 && setCompletion();},function(){isStopped = true;group.length === 1 && setCompletion();}));return group;});}; /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */observableProto.onErrorResumeNext = function(second){if(!second){throw new Error('Second observable is required');}return onErrorResumeNext([this,second]);}; /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   *
	   * @example
	   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
	   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */var onErrorResumeNext=Observable.onErrorResumeNext = function(){var sources=[];if(Array.isArray(arguments[0])){sources = arguments[0];}else {for(var i=0,len=arguments.length;i < len;i++) {sources.push(arguments[i]);}}return new AnonymousObservable(function(observer){var pos=0,subscription=new SerialDisposable(),cancelable=immediateScheduler.scheduleRecursive(function(self){var current,d;if(pos < sources.length){current = sources[pos++];isPromise(current) && (current = observableFromPromise(current));d = new SingleAssignmentDisposable();subscription.setDisposable(d);d.setDisposable(current.subscribe(observer.onNext.bind(observer),self,self));}else {observer.onCompleted();}});return new CompositeDisposable(subscription,cancelable);});}; /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */observableProto.skipUntil = function(other){var source=this;return new AnonymousObservable(function(o){var isOpen=false;var disposables=new CompositeDisposable(source.subscribe(function(left){isOpen && o.onNext(left);},function(e){o.onError(e);},function(){isOpen && o.onCompleted();}));isPromise(other) && (other = observableFromPromise(other));var rightSubscription=new SingleAssignmentDisposable();disposables.add(rightSubscription);rightSubscription.setDisposable(other.subscribe(function(){isOpen = true;rightSubscription.dispose();},function(e){o.onError(e);},function(){rightSubscription.dispose();}));return disposables;},source);}; /**
	   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */observableProto['switch'] = observableProto.switchLatest = function(){var sources=this;return new AnonymousObservable(function(observer){var hasLatest=false,innerSubscription=new SerialDisposable(),isStopped=false,latest=0,subscription=sources.subscribe(function(innerSource){var d=new SingleAssignmentDisposable(),id=++latest;hasLatest = true;innerSubscription.setDisposable(d); // Check if Promise or Observable
	isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));d.setDisposable(innerSource.subscribe(function(x){latest === id && observer.onNext(x);},function(e){latest === id && observer.onError(e);},function(){if(latest === id){hasLatest = false;isStopped && observer.onCompleted();}}));},function(e){observer.onError(e);},function(){isStopped = true;!hasLatest && observer.onCompleted();});return new CompositeDisposable(subscription,innerSubscription);},sources);}; /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */observableProto.takeUntil = function(other){var source=this;return new AnonymousObservable(function(o){isPromise(other) && (other = observableFromPromise(other));return new CompositeDisposable(source.subscribe(o),other.subscribe(function(){o.onCompleted();},function(e){o.onError(e);},noop));},source);}; /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   *
	   * @example
	   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */observableProto.withLatestFrom = function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}var resultSelector=args.pop(),source=this;if(typeof source === 'undefined'){throw new Error('Source observable not found for withLatestFrom().');}if(typeof resultSelector !== 'function'){throw new Error('withLatestFrom() expects a resultSelector function.');}if(Array.isArray(args[0])){args = args[0];}return new AnonymousObservable(function(observer){var falseFactory=function falseFactory(){return false;},n=args.length,hasValue=arrayInitialize(n,falseFactory),hasValueAll=false,values=new Array(n);var subscriptions=new Array(n + 1);for(var idx=0;idx < n;idx++) {(function(i){var other=args[i],sad=new SingleAssignmentDisposable();isPromise(other) && (other = observableFromPromise(other));sad.setDisposable(other.subscribe(function(x){values[i] = x;hasValue[i] = true;hasValueAll = hasValue.every(identity);},observer.onError.bind(observer),function(){}));subscriptions[i] = sad;})(idx);}var sad=new SingleAssignmentDisposable();sad.setDisposable(source.subscribe(function(x){var res;var allValues=[x].concat(values);if(!hasValueAll)return;try{res = resultSelector.apply(null,allValues);}catch(ex) {observer.onError(ex);return;}observer.onNext(res);},observer.onError.bind(observer),function(){observer.onCompleted();}));subscriptions[n] = sad;return new CompositeDisposable(subscriptions);},this);};function zipArray(second,resultSelector){var first=this;return new AnonymousObservable(function(observer){var index=0,len=second.length;return first.subscribe(function(left){if(index < len){var right=second[index++],result;try{result = resultSelector(left,right);}catch(e) {return observer.onError(e);}observer.onNext(result);}else {observer.onCompleted();}},function(e){observer.onError(e);},function(){observer.onCompleted();});},first);}function falseFactory(){return false;}function emptyArrayFactory(){return [];} /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   *
	   * @example
	   * 1 - res = obs1.zip(obs2, fn);
	   * 1 - res = x1.zip([1,2,3], fn);
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */observableProto.zip = function(){if(Array.isArray(arguments[0])){return zipArray.apply(this,arguments);}var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}var parent=this,resultSelector=args.pop();args.unshift(parent);return new AnonymousObservable(function(observer){var n=args.length,queues=arrayInitialize(n,emptyArrayFactory),isDone=arrayInitialize(n,falseFactory);function next(i){var res,queuedValues;if(queues.every(function(x){return x.length > 0;})){try{queuedValues = queues.map(function(x){return x.shift();});res = resultSelector.apply(parent,queuedValues);}catch(ex) {observer.onError(ex);return;}observer.onNext(res);}else if(isDone.filter(function(x,j){return j !== i;}).every(identity)){observer.onCompleted();}};function done(i){isDone[i] = true;if(isDone.every(function(x){return x;})){observer.onCompleted();}}var subscriptions=new Array(n);for(var idx=0;idx < n;idx++) {(function(i){var source=args[i],sad=new SingleAssignmentDisposable();isPromise(source) && (source = observableFromPromise(source));sad.setDisposable(source.subscribe(function(x){queues[i].push(x);next(i);},function(e){observer.onError(e);},function(){done(i);}));subscriptions[i] = sad;})(idx);}return new CompositeDisposable(subscriptions);},parent);}; /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */Observable.zip = function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}var first=args.shift();return first.zip.apply(first,args);}; /**
	   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
	   * @param arguments Observable sources.
	   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
	   */Observable.zipArray = function(){var sources;if(Array.isArray(arguments[0])){sources = arguments[0];}else {var len=arguments.length;sources = new Array(len);for(var i=0;i < len;i++) {sources[i] = arguments[i];}}return new AnonymousObservable(function(observer){var n=sources.length,queues=arrayInitialize(n,function(){return [];}),isDone=arrayInitialize(n,function(){return false;});function next(i){if(queues.every(function(x){return x.length > 0;})){var res=queues.map(function(x){return x.shift();});observer.onNext(res);}else if(isDone.filter(function(x,j){return j !== i;}).every(identity)){observer.onCompleted();return;}};function done(i){isDone[i] = true;if(isDone.every(identity)){observer.onCompleted();return;}}var subscriptions=new Array(n);for(var idx=0;idx < n;idx++) {(function(i){subscriptions[i] = new SingleAssignmentDisposable();subscriptions[i].setDisposable(sources[i].subscribe(function(x){queues[i].push(x);next(i);},function(e){observer.onError(e);},function(){done(i);}));})(idx);}return new CompositeDisposable(subscriptions);});}; /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */observableProto.asObservable = function(){var source=this;return new AnonymousObservable(function(o){return source.subscribe(o);},this);}; /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   *
	   * @example
	   *  var res = xs.bufferWithCount(10);
	   *  var res = xs.bufferWithCount(10, 1);
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */observableProto.bufferWithCount = function(count,skip){if(typeof skip !== 'number'){skip = count;}return this.windowWithCount(count,skip).selectMany(function(x){return x.toArray();}).where(function(x){return x.length > 0;});}; /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */observableProto.dematerialize = function(){var source=this;return new AnonymousObservable(function(o){return source.subscribe(function(x){return x.accept(o);},function(e){o.onError(e);},function(){o.onCompleted();});},this);}; /**
	   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
	   *
	   *  var obs = observable.distinctUntilChanged();
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
	   *
	   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
	   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	   */observableProto.distinctUntilChanged = function(keySelector,comparer){var source=this;comparer || (comparer = defaultComparer);return new AnonymousObservable(function(o){var hasCurrentKey=false,currentKey;return source.subscribe(function(value){var key=value;if(keySelector){try{key = keySelector(value);}catch(e) {o.onError(e);return;}}if(hasCurrentKey){try{var comparerEquals=comparer(currentKey,key);}catch(e) {o.onError(e);return;}}if(!hasCurrentKey || !comparerEquals){hasCurrentKey = true;currentKey = key;o.onNext(value);}},function(e){o.onError(e);},function(){o.onCompleted();});},this);}; /**
	   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
	   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */observableProto['do'] = observableProto.tap = observableProto.doAction = function(observerOrOnNext,onError,onCompleted){var source=this,tapObserver=typeof observerOrOnNext === 'function' || typeof observerOrOnNext === 'undefined'?observerCreate(observerOrOnNext || noop,onError || noop,onCompleted || noop):observerOrOnNext;return new AnonymousObservable(function(observer){return source.subscribe(function(x){try{tapObserver.onNext(x);}catch(e) {observer.onError(e);}observer.onNext(x);},function(err){try{tapObserver.onError(err);}catch(e) {observer.onError(e);}observer.onError(err);},function(){try{tapObserver.onCompleted();}catch(e) {observer.onError(e);}observer.onCompleted();});},this);}; /**
	   *  Invokes an action for each element in the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onNext Action to invoke for each element in the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */observableProto.doOnNext = observableProto.tapOnNext = function(onNext,thisArg){return this.tap(typeof thisArg !== 'undefined'?function(x){onNext.call(thisArg,x);}:onNext);}; /**
	   *  Invokes an action upon exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */observableProto.doOnError = observableProto.tapOnError = function(onError,thisArg){return this.tap(noop,typeof thisArg !== 'undefined'?function(e){onError.call(thisArg,e);}:onError);}; /**
	   *  Invokes an action upon graceful termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */observableProto.doOnCompleted = observableProto.tapOnCompleted = function(onCompleted,thisArg){return this.tap(noop,null,typeof thisArg !== 'undefined'?function(){onCompleted.call(thisArg);}:onCompleted);}; /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */observableProto['finally'] = observableProto.ensure = function(action){var source=this;return new AnonymousObservable(function(observer){var subscription;try{subscription = source.subscribe(observer);}catch(e) {action();throw e;}return disposableCreate(function(){try{subscription.dispose();}catch(e) {throw e;}finally {action();}});},this);}; /**
	   * @deprecated use #finally or #ensure instead.
	   */observableProto.finallyAction = function(action){ //deprecate('finallyAction', 'finally or ensure');
	return this.ensure(action);}; /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */observableProto.ignoreElements = function(){var source=this;return new AnonymousObservable(function(o){return source.subscribe(noop,function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */observableProto.materialize = function(){var source=this;return new AnonymousObservable(function(observer){return source.subscribe(function(value){observer.onNext(notificationCreateOnNext(value));},function(e){observer.onNext(notificationCreateOnError(e));observer.onCompleted();},function(){observer.onNext(notificationCreateOnCompleted());observer.onCompleted();});},source);}; /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */observableProto.repeat = function(repeatCount){return enumerableRepeat(this,repeatCount).concat();}; /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */observableProto.retry = function(retryCount){return enumerableRepeat(this,retryCount).catchError();}; /**
	   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
	   *  if the notifier completes, the observable sequence completes.
	   *
	   * @example
	   *  var timer = Observable.timer(500);
	   *  var source = observable.retryWhen(timer);
	   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */observableProto.retryWhen = function(notifier){return enumerableRepeat(this).catchErrorWhen(notifier);}; /**
	   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	   * @example
	   *  var res = source.scan(function (acc, x) { return acc + x; });
	   *  var res = source.scan(0, function (acc, x) { return acc + x; });
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing the accumulated values.
	   */observableProto.scan = function(){var hasSeed=false,seed,accumulator,source=this;if(arguments.length === 2){hasSeed = true;seed = arguments[0];accumulator = arguments[1];}else {accumulator = arguments[0];}return new AnonymousObservable(function(o){var hasAccumulation,accumulation,hasValue;return source.subscribe(function(x){!hasValue && (hasValue = true);try{if(hasAccumulation){accumulation = accumulator(accumulation,x);}else {accumulation = hasSeed?accumulator(seed,x):x;hasAccumulation = true;}}catch(e) {o.onError(e);return;}o.onNext(accumulation);},function(e){o.onError(e);},function(){!hasValue && hasSeed && o.onNext(seed);o.onCompleted();});},source);}; /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */observableProto.skipLast = function(count){if(count < 0){throw new ArgumentOutOfRangeError();}var source=this;return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){q.push(x);q.length > count && o.onNext(q.shift());},function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */observableProto.startWith = function(){var values,scheduler,start=0;if(!!arguments.length && isScheduler(arguments[0])){scheduler = arguments[0];start = 1;}else {scheduler = immediateScheduler;}for(var args=[],i=start,len=arguments.length;i < len;i++) {args.push(arguments[i]);}return enumerableOf([observableFromArray(args,scheduler),this]).concat();}; /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */observableProto.takeLast = function(count){if(count < 0){throw new ArgumentOutOfRangeError();}var source=this;return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){q.push(x);q.length > count && q.shift();},function(e){o.onError(e);},function(){while(q.length > 0) {o.onNext(q.shift());}o.onCompleted();});},source);}; /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */observableProto.takeLastBuffer = function(count){var source=this;return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){q.push(x);q.length > count && q.shift();},function(e){o.onError(e);},function(){o.onNext(q);o.onCompleted();});},source);}; /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   *
	   *  var res = xs.windowWithCount(10);
	   *  var res = xs.windowWithCount(10, 1);
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */observableProto.windowWithCount = function(count,skip){var source=this;+count || (count = 0);Math.abs(count) === Infinity && (count = 0);if(count <= 0){throw new ArgumentOutOfRangeError();}skip == null && (skip = count);+skip || (skip = 0);Math.abs(skip) === Infinity && (skip = 0);if(skip <= 0){throw new ArgumentOutOfRangeError();}return new AnonymousObservable(function(observer){var m=new SingleAssignmentDisposable(),refCountDisposable=new RefCountDisposable(m),n=0,q=[];function createWindow(){var s=new Subject();q.push(s);observer.onNext(addRef(s,refCountDisposable));}createWindow();m.setDisposable(source.subscribe(function(x){for(var i=0,len=q.length;i < len;i++) {q[i].onNext(x);}var c=n - count + 1;c >= 0 && c % skip === 0 && q.shift().onCompleted();++n % skip === 0 && createWindow();},function(e){while(q.length > 0) {q.shift().onError(e);}observer.onError(e);},function(){while(q.length > 0) {q.shift().onCompleted();}observer.onCompleted();}));return refCountDisposable;},source);};function concatMap(source,selector,thisArg){var selectorFunc=bindCallback(selector,thisArg,3);return source.map(function(x,i){var result=selectorFunc(x,i,source);isPromise(result) && (result = observableFromPromise(result));(isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));return result;}).concatAll();} /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */observableProto.selectConcat = observableProto.concatMap = function(selector,resultSelector,thisArg){if(isFunction(selector) && isFunction(resultSelector)){return this.concatMap(function(x,i){var selectorResult=selector(x,i);isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));(isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));return selectorResult.map(function(y,i2){return resultSelector(x,y,i,i2);});});}return isFunction(selector)?concatMap(this,selector,thisArg):concatMap(this,function(){return selector;});}; /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext,onError,onCompleted,thisArg){var source=this,onNextFunc=bindCallback(onNext,thisArg,2),onErrorFunc=bindCallback(onError,thisArg,1),onCompletedFunc=bindCallback(onCompleted,thisArg,0);return new AnonymousObservable(function(observer){var index=0;return source.subscribe(function(x){var result;try{result = onNextFunc(x,index++);}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);},function(err){var result;try{result = onErrorFunc(err);}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);observer.onCompleted();},function(){var result;try{result = onCompletedFunc();}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);observer.onCompleted();});},this).concatAll();}; /**
	     *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	     *
	     *  var res = obs = xs.defaultIfEmpty();
	     *  2 - obs = xs.defaultIfEmpty(false);
	     *
	     * @memberOf Observable#
	     * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	     * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	     */observableProto.defaultIfEmpty = function(defaultValue){var source=this;defaultValue === undefined && (defaultValue = null);return new AnonymousObservable(function(observer){var found=false;return source.subscribe(function(x){found = true;observer.onNext(x);},function(e){observer.onError(e);},function(){!found && observer.onNext(defaultValue);observer.onCompleted();});},source);}; // Swap out for Array.findIndex
	function arrayIndexOfComparer(array,item,comparer){for(var i=0,len=array.length;i < len;i++) {if(comparer(array[i],item)){return i;}}return -1;}function HashSet(comparer){this.comparer = comparer;this.set = [];}HashSet.prototype.push = function(value){var retValue=arrayIndexOfComparer(this.set,value,this.comparer) === -1;retValue && this.set.push(value);return retValue;}; /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */observableProto.distinct = function(keySelector,comparer){var source=this;comparer || (comparer = defaultComparer);return new AnonymousObservable(function(o){var hashSet=new HashSet(comparer);return source.subscribe(function(x){var key=x;if(keySelector){try{key = keySelector(x);}catch(e) {o.onError(e);return;}}hashSet.push(key) && o.onNext(x);},function(e){o.onError(e);},function(){o.onCompleted();});},this);}; /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @param {Function} [comparer] Used to determine whether the objects are equal.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */observableProto.groupBy = function(keySelector,elementSelector,comparer){return this.groupByUntil(keySelector,elementSelector,observableNever,comparer);}; /**
	     *  Groups the elements of an observable sequence according to a specified key selector function.
	     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	     *
	     * @example
	     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	     * @param {Function} keySelector A function to extract the key for each element.
	     * @param {Function} durationSelector A function to signal the expiration of a group.
	     * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
	     * @returns {Observable}
	     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	     *
	     */observableProto.groupByUntil = function(keySelector,elementSelector,durationSelector,comparer){var source=this;elementSelector || (elementSelector = identity);comparer || (comparer = defaultComparer);return new AnonymousObservable(function(observer){function handleError(e){return function(item){item.onError(e);};}var map=new Dictionary(0,comparer),groupDisposable=new CompositeDisposable(),refCountDisposable=new RefCountDisposable(groupDisposable);groupDisposable.add(source.subscribe(function(x){var key;try{key = keySelector(x);}catch(e) {map.getValues().forEach(handleError(e));observer.onError(e);return;}var fireNewMapEntry=false,writer=map.tryGetValue(key);if(!writer){writer = new Subject();map.set(key,writer);fireNewMapEntry = true;}if(fireNewMapEntry){var group=new GroupedObservable(key,writer,refCountDisposable),durationGroup=new GroupedObservable(key,writer);try{duration = durationSelector(durationGroup);}catch(e) {map.getValues().forEach(handleError(e));observer.onError(e);return;}observer.onNext(group);var md=new SingleAssignmentDisposable();groupDisposable.add(md);var expire=function expire(){map.remove(key) && writer.onCompleted();groupDisposable.remove(md);};md.setDisposable(duration.take(1).subscribe(noop,function(exn){map.getValues().forEach(handleError(exn));observer.onError(exn);},expire));}var element;try{element = elementSelector(x);}catch(e) {map.getValues().forEach(handleError(e));observer.onError(e);return;}writer.onNext(element);},function(ex){map.getValues().forEach(handleError(ex));observer.onError(ex);},function(){map.getValues().forEach(function(item){item.onCompleted();});observer.onCompleted();}));return refCountDisposable;},source);};var MapObservable=(function(__super__){inherits(MapObservable,__super__);function MapObservable(source,selector,thisArg){this.source = source;this.selector = bindCallback(selector,thisArg,3);__super__.call(this);}MapObservable.prototype.internalMap = function(selector,thisArg){var self=this;return new MapObservable(this.source,function(x,i,o){return selector(self.selector(x,i,o),i,o);},thisArg);};MapObservable.prototype.subscribeCore = function(observer){return this.source.subscribe(new MapObserver(observer,this.selector,this));};return MapObservable;})(ObservableBase);function MapObserver(observer,selector,source){this.observer = observer;this.selector = selector;this.source = source;this.i = 0;this.isStopped = false;}MapObserver.prototype.onNext = function(x){if(this.isStopped){return;}var result=tryCatch(this.selector).call(this,x,this.i++,this.source);if(result === errorObj){return this.observer.onError(result.e);}this.observer.onNext(result); /*try {
	      var result = this.selector(x, this.i++, this.source);
	    } catch (e) {
	      return this.observer.onError(e);
	    }
	    this.observer.onNext(result);*/};MapObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);}};MapObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.observer.onCompleted();}};MapObserver.prototype.dispose = function(){this.isStopped = true;};MapObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);return true;}return false;}; /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */observableProto.map = observableProto.select = function(selector,thisArg){var selectorFn=typeof selector === 'function'?selector:function(){return selector;};return this instanceof MapObservable?this.internalMap(selectorFn,thisArg):new MapObservable(this,selectorFn,thisArg);}; /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */observableProto.pluck = function(){var args=arguments,len=arguments.length;if(len === 0){throw new Error('List of properties cannot be empty.');}return this.map(function(x){var currentProp=x;for(var i=0;i < len;i++) {var p=currentProp[args[i]];if(typeof p !== 'undefined'){currentProp = p;}else {return undefined;}}return currentProp;});};function flatMap(source,selector,thisArg){var selectorFunc=bindCallback(selector,thisArg,3);return source.map(function(x,i){var result=selectorFunc(x,i,source);isPromise(result) && (result = observableFromPromise(result));(isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));return result;}).mergeAll();} /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */observableProto.selectMany = observableProto.flatMap = function(selector,resultSelector,thisArg){if(isFunction(selector) && isFunction(resultSelector)){return this.flatMap(function(x,i){var selectorResult=selector(x,i);isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));(isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));return selectorResult.map(function(y,i2){return resultSelector(x,y,i,i2);});},thisArg);}return isFunction(selector)?flatMap(this,selector,thisArg):flatMap(this,function(){return selector;});}; /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */observableProto.flatMapObserver = observableProto.selectManyObserver = function(onNext,onError,onCompleted,thisArg){var source=this;return new AnonymousObservable(function(observer){var index=0;return source.subscribe(function(x){var result;try{result = onNext.call(thisArg,x,index++);}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);},function(err){var result;try{result = onError.call(thisArg,err);}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);observer.onCompleted();},function(){var result;try{result = onCompleted.call(thisArg);}catch(e) {observer.onError(e);return;}isPromise(result) && (result = observableFromPromise(result));observer.onNext(result);observer.onCompleted();});},source).mergeAll();}; /**
	   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
	   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
	   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function(selector,thisArg){return this.select(selector,thisArg).switchLatest();}; /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */observableProto.skip = function(count){if(count < 0){throw new ArgumentOutOfRangeError();}var source=this;return new AnonymousObservable(function(o){var remaining=count;return source.subscribe(function(x){if(remaining <= 0){o.onNext(x);}else {remaining--;}},function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */observableProto.skipWhile = function(predicate,thisArg){var source=this,callback=bindCallback(predicate,thisArg,3);return new AnonymousObservable(function(o){var i=0,running=false;return source.subscribe(function(x){if(!running){try{running = !callback(x,i++,source);}catch(e) {o.onError(e);return;}}running && o.onNext(x);},function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   *
	   *  var res = source.take(5);
	   *  var res = source.take(0, Rx.Scheduler.timeout);
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */observableProto.take = function(count,scheduler){if(count < 0){throw new ArgumentOutOfRangeError();}if(count === 0){return observableEmpty(scheduler);}var source=this;return new AnonymousObservable(function(o){var remaining=count;return source.subscribe(function(x){if(remaining-- > 0){o.onNext(x);remaining === 0 && o.onCompleted();}},function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */observableProto.takeWhile = function(predicate,thisArg){var source=this,callback=bindCallback(predicate,thisArg,3);return new AnonymousObservable(function(o){var i=0,running=true;return source.subscribe(function(x){if(running){try{running = callback(x,i++,source);}catch(e) {o.onError(e);return;}if(running){o.onNext(x);}else {o.onCompleted();}}},function(e){o.onError(e);},function(){o.onCompleted();});},source);};var FilterObservable=(function(__super__){inherits(FilterObservable,__super__);function FilterObservable(source,predicate,thisArg){this.source = source;this.predicate = bindCallback(predicate,thisArg,3);__super__.call(this);}FilterObservable.prototype.subscribeCore = function(observer){return this.source.subscribe(new FilterObserver(observer,this.predicate,this));};FilterObservable.prototype.internalFilter = function(predicate,thisArg){var self=this;return new FilterObservable(this.source,function(x,i,o){return self.predicate(x,i,o) && predicate(x,i,o);},thisArg);};return FilterObservable;})(ObservableBase);function FilterObserver(observer,predicate,source){this.observer = observer;this.predicate = predicate;this.source = source;this.i = 0;this.isStopped = false;}FilterObserver.prototype.onNext = function(x){if(this.isStopped){return;}var shouldYield=tryCatch(this.predicate).call(this,x,this.i++,this.source);if(shouldYield === errorObj){return this.observer.onError(shouldYield.e);}shouldYield && this.observer.onNext(x);};FilterObserver.prototype.onError = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);}};FilterObserver.prototype.onCompleted = function(){if(!this.isStopped){this.isStopped = true;this.observer.onCompleted();}};FilterObserver.prototype.dispose = function(){this.isStopped = true;};FilterObserver.prototype.fail = function(e){if(!this.isStopped){this.isStopped = true;this.observer.onError(e);return true;}return false;}; /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */observableProto.filter = observableProto.where = function(predicate,thisArg){return this instanceof FilterObservable?this.internalFilter(predicate,thisArg):new FilterObservable(this,predicate,thisArg);};function extremaBy(source,keySelector,comparer){return new AnonymousObservable(function(o){var hasValue=false,lastKey=null,list=[];return source.subscribe(function(x){var comparison,key;try{key = keySelector(x);}catch(ex) {o.onError(ex);return;}comparison = 0;if(!hasValue){hasValue = true;lastKey = key;}else {try{comparison = comparer(key,lastKey);}catch(ex1) {o.onError(ex1);return;}}if(comparison > 0){lastKey = key;list = [];}if(comparison >= 0){list.push(x);}},function(e){o.onError(e);},function(){o.onNext(list);o.onCompleted();});},source);}function firstOnly(x){if(x.length === 0){throw new EmptyError();}return x[0];} /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @deprecated Use #reduce instead
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */observableProto.aggregate = function(){var hasSeed=false,accumulator,seed,source=this;if(arguments.length === 2){hasSeed = true;seed = arguments[0];accumulator = arguments[1];}else {accumulator = arguments[0];}return new AnonymousObservable(function(o){var hasAccumulation,accumulation,hasValue;return source.subscribe(function(x){!hasValue && (hasValue = true);try{if(hasAccumulation){accumulation = accumulator(accumulation,x);}else {accumulation = hasSeed?accumulator(seed,x):x;hasAccumulation = true;}}catch(e) {return o.onError(e);}},function(e){o.onError(e);},function(){hasValue && o.onNext(accumulation);!hasValue && hasSeed && o.onNext(seed);!hasValue && !hasSeed && o.onError(new EmptyError());o.onCompleted();});},source);}; /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @param {Any} [seed] The initial accumulator value.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */observableProto.reduce = function(accumulator){var hasSeed=false,seed,source=this;if(arguments.length === 2){hasSeed = true;seed = arguments[1];}return new AnonymousObservable(function(o){var hasAccumulation,accumulation,hasValue;return source.subscribe(function(x){!hasValue && (hasValue = true);try{if(hasAccumulation){accumulation = accumulator(accumulation,x);}else {accumulation = hasSeed?accumulator(seed,x):x;hasAccumulation = true;}}catch(e) {return o.onError(e);}},function(e){o.onError(e);},function(){hasValue && o.onNext(accumulation);!hasValue && hasSeed && o.onNext(seed);!hasValue && !hasSeed && o.onError(new EmptyError());o.onCompleted();});},source);}; /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */observableProto.some = function(predicate,thisArg){var source=this;return predicate?source.filter(predicate,thisArg).some():new AnonymousObservable(function(observer){return source.subscribe(function(){observer.onNext(true);observer.onCompleted();},function(e){observer.onError(e);},function(){observer.onNext(false);observer.onCompleted();});},source);}; /** @deprecated use #some instead */observableProto.any = function(){ //deprecate('any', 'some');
	return this.some.apply(this,arguments);}; /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */observableProto.isEmpty = function(){return this.any().map(not);}; /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */observableProto.every = function(predicate,thisArg){return this.filter(function(v){return !predicate(v);},thisArg).some().map(not);}; /** @deprecated use #every instead */observableProto.all = function(){ //deprecate('all', 'every');
	return this.every.apply(this,arguments);}; /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */observableProto.includes = function(searchElement,fromIndex){var source=this;function comparer(a,b){return a === 0 && b === 0 || a === b || isNaN(a) && isNaN(b);}return new AnonymousObservable(function(o){var i=0,n=+fromIndex || 0;Math.abs(n) === Infinity && (n = 0);if(n < 0){o.onNext(false);o.onCompleted();return disposableEmpty;}return source.subscribe(function(x){if(i++ >= n && comparer(x,searchElement)){o.onNext(true);o.onCompleted();}},function(e){o.onError(e);},function(){o.onNext(false);o.onCompleted();});},this);}; /**
	   * @deprecated use #includes instead.
	   */observableProto.contains = function(searchElement,fromIndex){ //deprecate('contains', 'includes');
	observableProto.includes(searchElement,fromIndex);}; /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */observableProto.count = function(predicate,thisArg){return predicate?this.filter(predicate,thisArg).count():this.reduce(function(count){return count + 1;},0);}; /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */observableProto.indexOf = function(searchElement,fromIndex){var source=this;return new AnonymousObservable(function(o){var i=0,n=+fromIndex || 0;Math.abs(n) === Infinity && (n = 0);if(n < 0){o.onNext(-1);o.onCompleted();return disposableEmpty;}return source.subscribe(function(x){if(i >= n && x === searchElement){o.onNext(i);o.onCompleted();}i++;},function(e){o.onError(e);},function(){o.onNext(-1);o.onCompleted();});},source);}; /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */observableProto.sum = function(keySelector,thisArg){return keySelector && isFunction(keySelector)?this.map(keySelector,thisArg).sum():this.reduce(function(prev,curr){return prev + curr;},0);}; /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */observableProto.minBy = function(keySelector,comparer){comparer || (comparer = defaultSubComparer);return extremaBy(this,keySelector,function(x,y){return comparer(x,y) * -1;});}; /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */observableProto.min = function(comparer){return this.minBy(identity,comparer).map(function(x){return firstOnly(x);});}; /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */observableProto.maxBy = function(keySelector,comparer){comparer || (comparer = defaultSubComparer);return extremaBy(this,keySelector,comparer);}; /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */observableProto.max = function(comparer){return this.maxBy(identity,comparer).map(function(x){return firstOnly(x);});}; /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */observableProto.average = function(keySelector,thisArg){return keySelector && isFunction(keySelector)?this.map(keySelector,thisArg).average():this.reduce(function(prev,cur){return {sum:prev.sum + cur,count:prev.count + 1};},{sum:0,count:0}).map(function(s){if(s.count === 0){throw new EmptyError();}return s.sum / s.count;});}; /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */observableProto.sequenceEqual = function(second,comparer){var first=this;comparer || (comparer = defaultComparer);return new AnonymousObservable(function(o){var donel=false,doner=false,ql=[],qr=[];var subscription1=first.subscribe(function(x){var equal,v;if(qr.length > 0){v = qr.shift();try{equal = comparer(v,x);}catch(e) {o.onError(e);return;}if(!equal){o.onNext(false);o.onCompleted();}}else if(doner){o.onNext(false);o.onCompleted();}else {ql.push(x);}},function(e){o.onError(e);},function(){donel = true;if(ql.length === 0){if(qr.length > 0){o.onNext(false);o.onCompleted();}else if(doner){o.onNext(true);o.onCompleted();}}});(isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));isPromise(second) && (second = observableFromPromise(second));var subscription2=second.subscribe(function(x){var equal;if(ql.length > 0){var v=ql.shift();try{equal = comparer(v,x);}catch(exception) {o.onError(exception);return;}if(!equal){o.onNext(false);o.onCompleted();}}else if(donel){o.onNext(false);o.onCompleted();}else {qr.push(x);}},function(e){o.onError(e);},function(){doner = true;if(qr.length === 0){if(ql.length > 0){o.onNext(false);o.onCompleted();}else if(donel){o.onNext(true);o.onCompleted();}}});return new CompositeDisposable(subscription1,subscription2);},first);};function elementAtOrDefault(source,index,hasDefault,defaultValue){if(index < 0){throw new ArgumentOutOfRangeError();}return new AnonymousObservable(function(o){var i=index;return source.subscribe(function(x){if(i-- === 0){o.onNext(x);o.onCompleted();}},function(e){o.onError(e);},function(){if(!hasDefault){o.onError(new ArgumentOutOfRangeError());}else {o.onNext(defaultValue);o.onCompleted();}});},source);} /**
	   * Returns the element at a specified index in a sequence.
	   * @example
	   * var res = source.elementAt(5);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */observableProto.elementAt = function(index){return elementAtOrDefault(this,index,false);}; /**
	   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
	   * @example
	   * var res = source.elementAtOrDefault(5);
	   * var res = source.elementAtOrDefault(5, 0);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
	   */observableProto.elementAtOrDefault = function(index,defaultValue){return elementAtOrDefault(this,index,true,defaultValue);};function singleOrDefaultAsync(source,hasDefault,defaultValue){return new AnonymousObservable(function(o){var value=defaultValue,seenValue=false;return source.subscribe(function(x){if(seenValue){o.onError(new Error('Sequence contains more than one element'));}else {value = x;seenValue = true;}},function(e){o.onError(e);},function(){if(!seenValue && !hasDefault){o.onError(new EmptyError());}else {o.onNext(value);o.onCompleted();}});},source);} /**
	   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	   */observableProto.single = function(predicate,thisArg){return predicate && isFunction(predicate)?this.where(predicate,thisArg).single():singleOrDefaultAsync(this,false);}; /**
	   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
	   * @example
	   * var res = res = source.singleOrDefault();
	   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
	   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
	   * res = source.singleOrDefault(null, 0);
	   * @memberOf Observable#
	   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */observableProto.singleOrDefault = function(predicate,defaultValue,thisArg){return predicate && isFunction(predicate)?this.filter(predicate,thisArg).singleOrDefault(null,defaultValue):singleOrDefaultAsync(this,true,defaultValue);};function firstOrDefaultAsync(source,hasDefault,defaultValue){return new AnonymousObservable(function(o){return source.subscribe(function(x){o.onNext(x);o.onCompleted();},function(e){o.onError(e);},function(){if(!hasDefault){o.onError(new EmptyError());}else {o.onNext(defaultValue);o.onCompleted();}});},source);} /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @example
	   * var res = res = source.first();
	   * var res = res = source.first(function (x) { return x > 3; });
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */observableProto.first = function(predicate,thisArg){return predicate?this.where(predicate,thisArg).first():firstOrDefaultAsync(this,false);}; /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */observableProto.firstOrDefault = function(predicate,defaultValue,thisArg){return predicate?this.where(predicate).firstOrDefault(null,defaultValue):firstOrDefaultAsync(this,true,defaultValue);};function lastOrDefaultAsync(source,hasDefault,defaultValue){return new AnonymousObservable(function(o){var value=defaultValue,seenValue=false;return source.subscribe(function(x){value = x;seenValue = true;},function(e){o.onError(e);},function(){if(!seenValue && !hasDefault){o.onError(new EmptyError());}else {o.onNext(value);o.onCompleted();}});},source);} /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */observableProto.last = function(predicate,thisArg){return predicate?this.where(predicate,thisArg).last():lastOrDefaultAsync(this,false);}; /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */observableProto.lastOrDefault = function(predicate,defaultValue,thisArg){return predicate?this.where(predicate,thisArg).lastOrDefault(null,defaultValue):lastOrDefaultAsync(this,true,defaultValue);};function findValue(source,predicate,thisArg,yieldIndex){var callback=bindCallback(predicate,thisArg,3);return new AnonymousObservable(function(o){var i=0;return source.subscribe(function(x){var shouldRun;try{shouldRun = callback(x,i,source);}catch(e) {o.onError(e);return;}if(shouldRun){o.onNext(yieldIndex?i:x);o.onCompleted();}else {i++;}},function(e){o.onError(e);},function(){o.onNext(yieldIndex?-1:undefined);o.onCompleted();});},source);} /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */observableProto.find = function(predicate,thisArg){return findValue(this,predicate,thisArg,false);}; /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */observableProto.findIndex = function(predicate,thisArg){return findValue(this,predicate,thisArg,true);}; /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */observableProto.toSet = function(){if(typeof root.Set === 'undefined'){throw new TypeError();}var source=this;return new AnonymousObservable(function(o){var s=new root.Set();return source.subscribe(function(x){s.add(x);},function(e){o.onError(e);},function(){o.onNext(s);o.onCompleted();});},source);}; /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */observableProto.toMap = function(keySelector,elementSelector){if(typeof root.Map === 'undefined'){throw new TypeError();}var source=this;return new AnonymousObservable(function(o){var m=new root.Map();return source.subscribe(function(x){var key;try{key = keySelector(x);}catch(e) {o.onError(e);return;}var element=x;if(elementSelector){try{element = elementSelector(x);}catch(e) {o.onError(e);return;}}m.set(key,element);},function(e){o.onError(e);},function(){o.onNext(m);o.onCompleted();});},source);};var fnString='function',throwString='throw',isObject=Rx.internals.isObject;function toThunk(obj,ctx){if(Array.isArray(obj)){return objectToThunk.call(ctx,obj);}if(isGeneratorFunction(obj)){return observableSpawn(obj.call(ctx));}if(isGenerator(obj)){return observableSpawn(obj);}if(isObservable(obj)){return observableToThunk(obj);}if(isPromise(obj)){return promiseToThunk(obj);}if(typeof obj === fnString){return obj;}if(isObject(obj) || Array.isArray(obj)){return objectToThunk.call(ctx,obj);}return obj;}function objectToThunk(obj){var ctx=this;return function(done){var keys=Object.keys(obj),pending=keys.length,results=new obj.constructor(),finished;if(!pending){timeoutScheduler.schedule(function(){done(null,results);});return;}for(var i=0,len=keys.length;i < len;i++) {run(obj[keys[i]],keys[i]);}function run(fn,key){if(finished){return;}try{fn = toThunk(fn,ctx);if(typeof fn !== fnString){results[key] = fn;return --pending || done(null,results);}fn.call(ctx,function(err,res){if(finished){return;}if(err){finished = true;return done(err);}results[key] = res;--pending || done(null,results);});}catch(e) {finished = true;done(e);}}};}function observableToThunk(observable){return function(fn){var value,hasValue=false;observable.subscribe(function(v){value = v;hasValue = true;},fn,function(){hasValue && fn(null,value);});};}function promiseToThunk(promise){return function(fn){promise.then(function(res){fn(null,res);},fn);};}function isObservable(obj){return obj && typeof obj.subscribe === fnString;}function isGeneratorFunction(obj){return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';}function isGenerator(obj){return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;} /*
	   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
	   * @param {Function} The spawning function.
	   * @returns {Function} a function which has a done continuation.
	   */var observableSpawn=Rx.spawn = function(fn){var isGenFun=isGeneratorFunction(fn);return function(done){var ctx=this,gen=fn;if(isGenFun){for(var args=[],i=0,len=arguments.length;i < len;i++) {args.push(arguments[i]);}var len=args.length,hasCallback=len && typeof args[len - 1] === fnString;done = hasCallback?args.pop():handleError;gen = fn.apply(this,args);}else {done = done || handleError;}next();function exit(err,res){timeoutScheduler.schedule(done.bind(ctx,err,res));}function next(err,res){var ret; // multiple args
	if(arguments.length > 2){for(var res=[],i=1,len=arguments.length;i < len;i++) {res.push(arguments[i]);}}if(err){try{ret = gen[throwString](err);}catch(e) {return exit(e);}}if(!err){try{ret = gen.next(res);}catch(e) {return exit(e);}}if(ret.done){return exit(null,ret.value);}ret.value = toThunk(ret.value,ctx);if(typeof ret.value === fnString){var called=false;try{ret.value.call(ctx,function(){if(called){return;}called = true;next.apply(ctx,arguments);});}catch(e) {timeoutScheduler.schedule(function(){if(called){return;}called = true;next.call(ctx,e);});}return;} // Not supported
	next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));}};};function handleError(err){if(!err){return;}timeoutScheduler.schedule(function(){throw err;});} /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */Observable.start = function(func,context,scheduler){return observableToAsync(func,context,scheduler)();}; /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */var observableToAsync=Observable.toAsync = function(func,context,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return function(){var args=arguments,subject=new AsyncSubject();scheduler.schedule(function(){var result;try{result = func.apply(context,args);}catch(e) {subject.onError(e);return;}subject.onNext(result);subject.onCompleted();});return subject.asObservable();};}; /**
	   * Converts a callback function to an observable sequence.
	   *
	   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	   */Observable.fromCallback = function(func,context,selector){return function(){for(var args=[],i=0,len=arguments.length;i < len;i++) {args.push(arguments[i]);}return new AnonymousObservable(function(observer){function handler(){var results=arguments;if(selector){try{results = selector(results);}catch(e) {return observer.onError(e);}observer.onNext(results);}else {if(results.length <= 1){observer.onNext.apply(observer,results);}else {observer.onNext(results);}}observer.onCompleted();}args.push(handler);func.apply(context,args);}).publishLast().refCount();};}; /**
	   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	   * @param {Function} func The function to call
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	   */Observable.fromNodeCallback = function(func,context,selector){return function(){var len=arguments.length,args=new Array(len);for(var i=0;i < len;i++) {args[i] = arguments[i];}return new AnonymousObservable(function(observer){function handler(err){if(err){observer.onError(err);return;}var len=arguments.length,results=[];for(var i=1;i < len;i++) {results[i - 1] = arguments[i];}if(selector){try{results = selector(results);}catch(e) {return observer.onError(e);}observer.onNext(results);}else {if(results.length <= 1){observer.onNext.apply(observer,results);}else {observer.onNext(results);}}observer.onCompleted();}args.push(handler);func.apply(context,args);}).publishLast().refCount();};};function createListener(element,name,handler){if(element.addEventListener){element.addEventListener(name,handler,false);return disposableCreate(function(){element.removeEventListener(name,handler,false);});}throw new Error('No listener found');}function createEventListener(el,eventName,handler){var disposables=new CompositeDisposable(); // Asume NodeList
	if(Object.prototype.toString.call(el) === '[object NodeList]'){for(var i=0,len=el.length;i < len;i++) {disposables.add(createEventListener(el.item(i),eventName,handler));}}else if(el){disposables.add(createListener(el,eventName,handler));}return disposables;} /**
	   * Configuration option to determine whether to use native events only
	   */Rx.config.useNativeEvents = false; /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   *
	   * @example
	   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
	   *
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */Observable.fromEvent = function(element,eventName,selector){ // Node.js specific
	if(element.addListener){return fromEventPattern(function(h){element.addListener(eventName,h);},function(h){element.removeListener(eventName,h);},selector);} // Use only if non-native events are allowed
	if(!Rx.config.useNativeEvents){ // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	if(typeof element.on === 'function' && typeof element.off === 'function'){return fromEventPattern(function(h){element.on(eventName,h);},function(h){element.off(eventName,h);},selector);}}return new AnonymousObservable(function(observer){return createEventListener(element,eventName,function handler(e){var results=e;if(selector){try{results = selector(arguments);}catch(err) {return observer.onError(err);}}observer.onNext(results);});}).publish().refCount();}; /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */var fromEventPattern=Observable.fromEventPattern = function(addHandler,removeHandler,selector){return new AnonymousObservable(function(observer){function innerHandler(e){var result=e;if(selector){try{result = selector(arguments);}catch(err) {return observer.onError(err);}}observer.onNext(result);}var returnValue=addHandler(innerHandler);return disposableCreate(function(){if(removeHandler){removeHandler(innerHandler,returnValue);}});}).publish().refCount();}; /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */Observable.startAsync = function(functionAsync){var promise;try{promise = functionAsync();}catch(e) {return observableThrow(e);}return observableFromPromise(promise);};var PausableObservable=(function(__super__){inherits(PausableObservable,__super__);function subscribe(observer){var conn=this.source.publish(),subscription=conn.subscribe(observer),connection=disposableEmpty;var pausable=this.pauser.distinctUntilChanged().subscribe(function(b){if(b){connection = conn.connect();}else {connection.dispose();connection = disposableEmpty;}});return new CompositeDisposable(subscription,connection,pausable);}function PausableObservable(source,pauser){this.source = source;this.controller = new Subject();if(pauser && pauser.subscribe){this.pauser = this.controller.merge(pauser);}else {this.pauser = this.controller;}__super__.call(this,subscribe,source);}PausableObservable.prototype.pause = function(){this.controller.onNext(false);};PausableObservable.prototype.resume = function(){this.controller.onNext(true);};return PausableObservable;})(Observable); /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */observableProto.pausable = function(pauser){return new PausableObservable(this,pauser);};function combineLatestSource(source,subject,resultSelector){return new AnonymousObservable(function(o){var hasValue=[false,false],hasValueAll=false,isDone=false,values=new Array(2),err;function next(x,i){values[i] = x;var res;hasValue[i] = true;if(hasValueAll || (hasValueAll = hasValue.every(identity))){if(err){o.onError(err);return;}try{res = resultSelector.apply(null,values);}catch(ex) {o.onError(ex);return;}o.onNext(res);}if(isDone && values[1]){o.onCompleted();}}return new CompositeDisposable(source.subscribe(function(x){next(x,0);},function(e){if(values[1]){o.onError(e);}else {err = e;}},function(){isDone = true;values[1] && o.onCompleted();}),subject.subscribe(function(x){next(x,1);},function(e){o.onError(e);},function(){isDone = true;next(true,1);}));},source);}var PausableBufferedObservable=(function(__super__){inherits(PausableBufferedObservable,__super__);function subscribe(o){var q=[],previousShouldFire;var subscription=combineLatestSource(this.source,this.pauser.distinctUntilChanged().startWith(false),function(data,shouldFire){return {data:data,shouldFire:shouldFire};}).subscribe(function(results){if(previousShouldFire !== undefined && results.shouldFire != previousShouldFire){previousShouldFire = results.shouldFire; // change in shouldFire
	if(results.shouldFire){while(q.length > 0) {o.onNext(q.shift());}}}else {previousShouldFire = results.shouldFire; // new data
	if(results.shouldFire){o.onNext(results.data);}else {q.push(results.data);}}},function(err){ // Empty buffer before sending error
	while(q.length > 0) {o.onNext(q.shift());}o.onError(err);},function(){ // Empty buffer before sending completion
	while(q.length > 0) {o.onNext(q.shift());}o.onCompleted();});return subscription;}function PausableBufferedObservable(source,pauser){this.source = source;this.controller = new Subject();if(pauser && pauser.subscribe){this.pauser = this.controller.merge(pauser);}else {this.pauser = this.controller;}__super__.call(this,subscribe,source);}PausableBufferedObservable.prototype.pause = function(){this.controller.onNext(false);};PausableBufferedObservable.prototype.resume = function(){this.controller.onNext(true);};return PausableBufferedObservable;})(Observable); /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */observableProto.pausableBuffered = function(subject){return new PausableBufferedObservable(this,subject);};var ControlledObservable=(function(__super__){inherits(ControlledObservable,__super__);function subscribe(observer){return this.source.subscribe(observer);}function ControlledObservable(source,enableQueue){__super__.call(this,subscribe,source);this.subject = new ControlledSubject(enableQueue);this.source = source.multicast(this.subject).refCount();}ControlledObservable.prototype.request = function(numberOfItems){if(numberOfItems == null){numberOfItems = -1;}return this.subject.request(numberOfItems);};return ControlledObservable;})(Observable);var ControlledSubject=(function(__super__){function subscribe(observer){return this.subject.subscribe(observer);}inherits(ControlledSubject,__super__);function ControlledSubject(enableQueue){enableQueue == null && (enableQueue = true);__super__.call(this,subscribe);this.subject = new Subject();this.enableQueue = enableQueue;this.queue = enableQueue?[]:null;this.requestedCount = 0;this.requestedDisposable = disposableEmpty;this.error = null;this.hasFailed = false;this.hasCompleted = false;}addProperties(ControlledSubject.prototype,Observer,{onCompleted:function onCompleted(){this.hasCompleted = true;if(!this.enableQueue || this.queue.length === 0)this.subject.onCompleted();else this.queue.push(Rx.Notification.createOnCompleted());},onError:function onError(error){this.hasFailed = true;this.error = error;if(!this.enableQueue || this.queue.length === 0)this.subject.onError(error);else this.queue.push(Rx.Notification.createOnError(error));},onNext:function onNext(value){var hasRequested=false;if(this.requestedCount === 0){this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));}else {this.requestedCount !== -1 && this.requestedCount-- === 0 && this.disposeCurrentRequest();hasRequested = true;}hasRequested && this.subject.onNext(value);},_processRequest:function _processRequest(numberOfItems){if(this.enableQueue){while(this.queue.length >= numberOfItems && numberOfItems > 0 || this.queue.length > 0 && this.queue[0].kind !== 'N') {var first=this.queue.shift();first.accept(this.subject);if(first.kind === 'N')numberOfItems--;else {this.disposeCurrentRequest();this.queue = [];}}return {numberOfItems:numberOfItems,returnValue:this.queue.length !== 0};} //TODO I don't think this is ever necessary, since termination of a sequence without a queue occurs in the onCompletion or onError function
	//if (this.hasFailed) {
	//  this.subject.onError(this.error);
	//} else if (this.hasCompleted) {
	//  this.subject.onCompleted();
	//}
	return {numberOfItems:numberOfItems,returnValue:false};},request:function request(number){this.disposeCurrentRequest();var self=this,r=this._processRequest(number);var number=r.numberOfItems;if(!r.returnValue){this.requestedCount = number;this.requestedDisposable = disposableCreate(function(){self.requestedCount = 0;});return this.requestedDisposable;}else {return disposableEmpty;}},disposeCurrentRequest:function disposeCurrentRequest(){this.requestedDisposable.dispose();this.requestedDisposable = disposableEmpty;}});return ControlledSubject;})(Observable); /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */observableProto.controlled = function(enableQueue){if(enableQueue == null){enableQueue = true;}return new ControlledObservable(this,enableQueue);};var StopAndWaitObservable=(function(__super__){function subscribe(observer){this.subscription = this.source.subscribe(new StopAndWaitObserver(observer,this,this.subscription));var self=this;timeoutScheduler.schedule(function(){self.source.request(1);});return this.subscription;}inherits(StopAndWaitObservable,__super__);function StopAndWaitObservable(source){__super__.call(this,subscribe,source);this.source = source;}var StopAndWaitObserver=(function(__sub__){inherits(StopAndWaitObserver,__sub__);function StopAndWaitObserver(observer,observable,cancel){__sub__.call(this);this.observer = observer;this.observable = observable;this.cancel = cancel;}var stopAndWaitObserverProto=StopAndWaitObserver.prototype;stopAndWaitObserverProto.completed = function(){this.observer.onCompleted();this.dispose();};stopAndWaitObserverProto.error = function(error){this.observer.onError(error);this.dispose();};stopAndWaitObserverProto.next = function(value){this.observer.onNext(value);var self=this;timeoutScheduler.schedule(function(){self.observable.source.request(1);});};stopAndWaitObserverProto.dispose = function(){this.observer = null;if(this.cancel){this.cancel.dispose();this.cancel = null;}__sub__.prototype.dispose.call(this);};return StopAndWaitObserver;})(AbstractObserver);return StopAndWaitObservable;})(Observable); /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */ControlledObservable.prototype.stopAndWait = function(){return new StopAndWaitObservable(this);};var WindowedObservable=(function(__super__){function subscribe(observer){this.subscription = this.source.subscribe(new WindowedObserver(observer,this,this.subscription));var self=this;timeoutScheduler.schedule(function(){self.source.request(self.windowSize);});return this.subscription;}inherits(WindowedObservable,__super__);function WindowedObservable(source,windowSize){__super__.call(this,subscribe,source);this.source = source;this.windowSize = windowSize;}var WindowedObserver=(function(__sub__){inherits(WindowedObserver,__sub__);function WindowedObserver(observer,observable,cancel){this.observer = observer;this.observable = observable;this.cancel = cancel;this.received = 0;}var windowedObserverPrototype=WindowedObserver.prototype;windowedObserverPrototype.completed = function(){this.observer.onCompleted();this.dispose();};windowedObserverPrototype.error = function(error){this.observer.onError(error);this.dispose();};windowedObserverPrototype.next = function(value){this.observer.onNext(value);this.received = ++this.received % this.observable.windowSize;if(this.received === 0){var self=this;timeoutScheduler.schedule(function(){self.observable.source.request(self.observable.windowSize);});}};windowedObserverPrototype.dispose = function(){this.observer = null;if(this.cancel){this.cancel.dispose();this.cancel = null;}__sub__.prototype.dispose.call(this);};return WindowedObserver;})(AbstractObserver);return WindowedObservable;})(Observable); /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */ControlledObservable.prototype.windowed = function(windowSize){return new WindowedObservable(this,windowSize);}; /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.multicast = function(subjectOrSubjectSelector,selector){var source=this;return typeof subjectOrSubjectSelector === 'function'?new AnonymousObservable(function(observer){var connectable=source.multicast(subjectOrSubjectSelector());return new CompositeDisposable(selector(connectable).subscribe(observer),connectable.connect());},source):new ConnectableObservable(source,subjectOrSubjectSelector);}; /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.publish = function(selector){return selector && isFunction(selector)?this.multicast(function(){return new Subject();},selector):this.multicast(new Subject());}; /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */observableProto.share = function(){return this.publish().refCount();}; /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.publishLast = function(selector){return selector && isFunction(selector)?this.multicast(function(){return new AsyncSubject();},selector):this.multicast(new AsyncSubject());}; /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.publishValue = function(initialValueOrSelector,initialValue){return arguments.length === 2?this.multicast(function(){return new BehaviorSubject(initialValue);},initialValueOrSelector):this.multicast(new BehaviorSubject(initialValueOrSelector));}; /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */observableProto.shareValue = function(initialValue){return this.publishValue(initialValue).refCount();}; /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.replay = function(selector,bufferSize,windowSize,scheduler){return selector && isFunction(selector)?this.multicast(function(){return new ReplaySubject(bufferSize,windowSize,scheduler);},selector):this.multicast(new ReplaySubject(bufferSize,windowSize,scheduler));}; /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *

	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */observableProto.shareReplay = function(bufferSize,windowSize,scheduler){return this.replay(null,bufferSize,windowSize,scheduler).refCount();};var InnerSubscription=function InnerSubscription(subject,observer){this.subject = subject;this.observer = observer;};InnerSubscription.prototype.dispose = function(){if(!this.subject.isDisposed && this.observer !== null){var idx=this.subject.observers.indexOf(this.observer);this.subject.observers.splice(idx,1);this.observer = null;}}; /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */var BehaviorSubject=Rx.BehaviorSubject = (function(__super__){function subscribe(observer){checkDisposed(this);if(!this.isStopped){this.observers.push(observer);observer.onNext(this.value);return new InnerSubscription(this,observer);}if(this.hasError){observer.onError(this.error);}else {observer.onCompleted();}return disposableEmpty;}inherits(BehaviorSubject,__super__); /**
	     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
	     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
	     */function BehaviorSubject(value){__super__.call(this,subscribe);this.value = value,this.observers = [],this.isDisposed = false,this.isStopped = false,this.hasError = false;}addProperties(BehaviorSubject.prototype,Observer,{ /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */getValue:function getValue(){checkDisposed(this);if(this.hasError){throw this.error;}return this.value;}, /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */hasObservers:function hasObservers(){return this.observers.length > 0;}, /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */onCompleted:function onCompleted(){checkDisposed(this);if(this.isStopped){return;}this.isStopped = true;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onCompleted();}this.observers.length = 0;}, /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */onError:function onError(error){checkDisposed(this);if(this.isStopped){return;}this.isStopped = true;this.hasError = true;this.error = error;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onError(error);}this.observers.length = 0;}, /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */onNext:function onNext(value){checkDisposed(this);if(this.isStopped){return;}this.value = value;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onNext(value);}}, /**
	       * Unsubscribe all observers and release resources.
	       */dispose:function dispose(){this.isDisposed = true;this.observers = null;this.value = null;this.exception = null;}});return BehaviorSubject;})(Observable); /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */var ReplaySubject=Rx.ReplaySubject = (function(__super__){var maxSafeInteger=Math.pow(2,53) - 1;function createRemovableDisposable(subject,observer){return disposableCreate(function(){observer.dispose();!subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer),1);});}function subscribe(observer){var so=new ScheduledObserver(this.scheduler,observer),subscription=createRemovableDisposable(this,so);checkDisposed(this);this._trim(this.scheduler.now());this.observers.push(so);for(var i=0,len=this.q.length;i < len;i++) {so.onNext(this.q[i].value);}if(this.hasError){so.onError(this.error);}else if(this.isStopped){so.onCompleted();}so.ensureActive();return subscription;}inherits(ReplaySubject,__super__); /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */function ReplaySubject(bufferSize,windowSize,scheduler){this.bufferSize = bufferSize == null?maxSafeInteger:bufferSize;this.windowSize = windowSize == null?maxSafeInteger:windowSize;this.scheduler = scheduler || currentThreadScheduler;this.q = [];this.observers = [];this.isStopped = false;this.isDisposed = false;this.hasError = false;this.error = null;__super__.call(this,subscribe);}addProperties(ReplaySubject.prototype,Observer.prototype,{ /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */hasObservers:function hasObservers(){return this.observers.length > 0;},_trim:function _trim(now){while(this.q.length > this.bufferSize) {this.q.shift();}while(this.q.length > 0 && now - this.q[0].interval > this.windowSize) {this.q.shift();}}, /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */onNext:function onNext(value){checkDisposed(this);if(this.isStopped){return;}var now=this.scheduler.now();this.q.push({interval:now,value:value});this._trim(now);for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {var observer=os[i];observer.onNext(value);observer.ensureActive();}}, /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */onError:function onError(error){checkDisposed(this);if(this.isStopped){return;}this.isStopped = true;this.error = error;this.hasError = true;var now=this.scheduler.now();this._trim(now);for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {var observer=os[i];observer.onError(error);observer.ensureActive();}this.observers.length = 0;}, /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */onCompleted:function onCompleted(){checkDisposed(this);if(this.isStopped){return;}this.isStopped = true;var now=this.scheduler.now();this._trim(now);for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {var observer=os[i];observer.onCompleted();observer.ensureActive();}this.observers.length = 0;}, /**
	       * Unsubscribe all observers and release resources.
	       */dispose:function dispose(){this.isDisposed = true;this.observers = null;}});return ReplaySubject;})(Observable);var ConnectableObservable=Rx.ConnectableObservable = (function(__super__){inherits(ConnectableObservable,__super__);function ConnectableObservable(source,subject){var hasSubscription=false,subscription,sourceObservable=source.asObservable();this.connect = function(){if(!hasSubscription){hasSubscription = true;subscription = new CompositeDisposable(sourceObservable.subscribe(subject),disposableCreate(function(){hasSubscription = false;}));}return subscription;};__super__.call(this,function(o){return subject.subscribe(o);});}ConnectableObservable.prototype.refCount = function(){var connectableSubscription,count=0,source=this;return new AnonymousObservable(function(observer){var shouldConnect=++count === 1,subscription=source.subscribe(observer);shouldConnect && (connectableSubscription = source.connect());return function(){subscription.dispose();--count === 0 && connectableSubscription.dispose();};});};return ConnectableObservable;})(Observable);var Dictionary=(function(){var primes=[1,3,7,13,31,61,127,251,509,1021,2039,4093,8191,16381,32749,65521,131071,262139,524287,1048573,2097143,4194301,8388593,16777213,33554393,67108859,134217689,268435399,536870909,1073741789,2147483647],noSuchkey="no such key",duplicatekey="duplicate key";function isPrime(candidate){if((candidate & 1) === 0){return candidate === 2;}var num1=Math.sqrt(candidate),num2=3;while(num2 <= num1) {if(candidate % num2 === 0){return false;}num2 += 2;}return true;}function getPrime(min){var index,num,candidate;for(index = 0;index < primes.length;++index) {num = primes[index];if(num >= min){return num;}}candidate = min | 1;while(candidate < primes[primes.length - 1]) {if(isPrime(candidate)){return candidate;}candidate += 2;}return min;}function stringHashFn(str){var hash=757602046;if(!str.length){return hash;}for(var i=0,len=str.length;i < len;i++) {var character=str.charCodeAt(i);hash = (hash << 5) - hash + character;hash = hash & hash;}return hash;}function numberHashFn(key){var c2=0x27d4eb2d;key = key ^ 61 ^ key >>> 16;key = key + (key << 3);key = key ^ key >>> 4;key = key * c2;key = key ^ key >>> 15;return key;}var getHashCode=(function(){var uniqueIdCounter=0;return function(obj){if(obj == null){throw new Error(noSuchkey);} // Check for built-ins before tacking on our own for any object
	if(typeof obj === 'string'){return stringHashFn(obj);}if(typeof obj === 'number'){return numberHashFn(obj);}if(typeof obj === 'boolean'){return obj === true?1:0;}if(obj instanceof Date){return numberHashFn(obj.valueOf());}if(obj instanceof RegExp){return stringHashFn(obj.toString());}if(typeof obj.valueOf === 'function'){ // Hack check for valueOf
	var valueOf=obj.valueOf();if(typeof valueOf === 'number'){return numberHashFn(valueOf);}if(typeof valueOf === 'string'){return stringHashFn(valueOf);}}if(obj.hashCode){return obj.hashCode();}var id=17 * uniqueIdCounter++;obj.hashCode = function(){return id;};return id;};})();function newEntry(){return {key:null,value:null,next:0,hashCode:0};}function Dictionary(capacity,comparer){if(capacity < 0){throw new ArgumentOutOfRangeError();}if(capacity > 0){this._initialize(capacity);}this.comparer = comparer || defaultComparer;this.freeCount = 0;this.size = 0;this.freeList = -1;}var dictionaryProto=Dictionary.prototype;dictionaryProto._initialize = function(capacity){var prime=getPrime(capacity),i;this.buckets = new Array(prime);this.entries = new Array(prime);for(i = 0;i < prime;i++) {this.buckets[i] = -1;this.entries[i] = newEntry();}this.freeList = -1;};dictionaryProto.add = function(key,value){this._insert(key,value,true);};dictionaryProto._insert = function(key,value,add){if(!this.buckets){this._initialize(0);}var index3,num=getHashCode(key) & 2147483647,index1=num % this.buckets.length;for(var index2=this.buckets[index1];index2 >= 0;index2 = this.entries[index2].next) {if(this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key,key)){if(add){throw new Error(duplicatekey);}this.entries[index2].value = value;return;}}if(this.freeCount > 0){index3 = this.freeList;this.freeList = this.entries[index3].next;--this.freeCount;}else {if(this.size === this.entries.length){this._resize();index1 = num % this.buckets.length;}index3 = this.size;++this.size;}this.entries[index3].hashCode = num;this.entries[index3].next = this.buckets[index1];this.entries[index3].key = key;this.entries[index3].value = value;this.buckets[index1] = index3;};dictionaryProto._resize = function(){var prime=getPrime(this.size * 2),numArray=new Array(prime);for(index = 0;index < numArray.length;++index) {numArray[index] = -1;}var entryArray=new Array(prime);for(index = 0;index < this.size;++index) {entryArray[index] = this.entries[index];}for(var index=this.size;index < prime;++index) {entryArray[index] = newEntry();}for(var index1=0;index1 < this.size;++index1) {var index2=entryArray[index1].hashCode % prime;entryArray[index1].next = numArray[index2];numArray[index2] = index1;}this.buckets = numArray;this.entries = entryArray;};dictionaryProto.remove = function(key){if(this.buckets){var num=getHashCode(key) & 2147483647,index1=num % this.buckets.length,index2=-1;for(var index3=this.buckets[index1];index3 >= 0;index3 = this.entries[index3].next) {if(this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key,key)){if(index2 < 0){this.buckets[index1] = this.entries[index3].next;}else {this.entries[index2].next = this.entries[index3].next;}this.entries[index3].hashCode = -1;this.entries[index3].next = this.freeList;this.entries[index3].key = null;this.entries[index3].value = null;this.freeList = index3;++this.freeCount;return true;}else {index2 = index3;}}}return false;};dictionaryProto.clear = function(){var index,len;if(this.size <= 0){return;}for(index = 0,len = this.buckets.length;index < len;++index) {this.buckets[index] = -1;}for(index = 0;index < this.size;++index) {this.entries[index] = newEntry();}this.freeList = -1;this.size = 0;};dictionaryProto._findEntry = function(key){if(this.buckets){var num=getHashCode(key) & 2147483647;for(var index=this.buckets[num % this.buckets.length];index >= 0;index = this.entries[index].next) {if(this.entries[index].hashCode === num && this.comparer(this.entries[index].key,key)){return index;}}}return -1;};dictionaryProto.count = function(){return this.size - this.freeCount;};dictionaryProto.tryGetValue = function(key){var entry=this._findEntry(key);return entry >= 0?this.entries[entry].value:undefined;};dictionaryProto.getValues = function(){var index=0,results=[];if(this.entries){for(var index1=0;index1 < this.size;index1++) {if(this.entries[index1].hashCode >= 0){results[index++] = this.entries[index1].value;}}}return results;};dictionaryProto.get = function(key){var entry=this._findEntry(key);if(entry >= 0){return this.entries[entry].value;}throw new Error(noSuchkey);};dictionaryProto.set = function(key,value){this._insert(key,value,false);};dictionaryProto.containskey = function(key){return this._findEntry(key) >= 0;};return Dictionary;})(); /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */observableProto.join = function(right,leftDurationSelector,rightDurationSelector,resultSelector){var left=this;return new AnonymousObservable(function(observer){var group=new CompositeDisposable();var leftDone=false,rightDone=false;var leftId=0,rightId=0;var leftMap=new Dictionary(),rightMap=new Dictionary();group.add(left.subscribe(function(value){var id=leftId++;var md=new SingleAssignmentDisposable();leftMap.add(id,value);group.add(md);var expire=function expire(){leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();group.remove(md);};var duration;try{duration = leftDurationSelector(value);}catch(e) {observer.onError(e);return;}md.setDisposable(duration.take(1).subscribe(noop,observer.onError.bind(observer),expire));rightMap.getValues().forEach(function(v){var result;try{result = resultSelector(value,v);}catch(exn) {observer.onError(exn);return;}observer.onNext(result);});},observer.onError.bind(observer),function(){leftDone = true;(rightDone || leftMap.count() === 0) && observer.onCompleted();}));group.add(right.subscribe(function(value){var id=rightId++;var md=new SingleAssignmentDisposable();rightMap.add(id,value);group.add(md);var expire=function expire(){rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();group.remove(md);};var duration;try{duration = rightDurationSelector(value);}catch(e) {observer.onError(e);return;}md.setDisposable(duration.take(1).subscribe(noop,observer.onError.bind(observer),expire));leftMap.getValues().forEach(function(v){var result;try{result = resultSelector(v,value);}catch(exn) {observer.onError(exn);return;}observer.onNext(result);});},observer.onError.bind(observer),function(){rightDone = true;(leftDone || rightMap.count() === 0) && observer.onCompleted();}));return group;},left);}; /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */observableProto.groupJoin = function(right,leftDurationSelector,rightDurationSelector,resultSelector){var left=this;return new AnonymousObservable(function(observer){var group=new CompositeDisposable();var r=new RefCountDisposable(group);var leftMap=new Dictionary(),rightMap=new Dictionary();var leftId=0,rightId=0;function handleError(e){return function(v){v.onError(e);};};group.add(left.subscribe(function(value){var s=new Subject();var id=leftId++;leftMap.add(id,s);var result;try{result = resultSelector(value,addRef(s,r));}catch(e) {leftMap.getValues().forEach(handleError(e));observer.onError(e);return;}observer.onNext(result);rightMap.getValues().forEach(function(v){s.onNext(v);});var md=new SingleAssignmentDisposable();group.add(md);var expire=function expire(){leftMap.remove(id) && s.onCompleted();group.remove(md);};var duration;try{duration = leftDurationSelector(value);}catch(e) {leftMap.getValues().forEach(handleError(e));observer.onError(e);return;}md.setDisposable(duration.take(1).subscribe(noop,function(e){leftMap.getValues().forEach(handleError(e));observer.onError(e);},expire));},function(e){leftMap.getValues().forEach(handleError(e));observer.onError(e);},observer.onCompleted.bind(observer)));group.add(right.subscribe(function(value){var id=rightId++;rightMap.add(id,value);var md=new SingleAssignmentDisposable();group.add(md);var expire=function expire(){rightMap.remove(id);group.remove(md);};var duration;try{duration = rightDurationSelector(value);}catch(e) {leftMap.getValues().forEach(handleError(e));observer.onError(e);return;}md.setDisposable(duration.take(1).subscribe(noop,function(e){leftMap.getValues().forEach(handleError(e));observer.onError(e);},expire));leftMap.getValues().forEach(function(v){v.onNext(value);});},function(e){leftMap.getValues().forEach(handleError(e));observer.onError(e);}));return r;},left);}; /**
	     *  Projects each element of an observable sequence into zero or more buffers.
	     *
	     *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	     *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	     *  @returns {Observable} An observable sequence of windows.
	     */observableProto.buffer = function(bufferOpeningsOrClosingSelector,bufferClosingSelector){return this.window.apply(this,arguments).selectMany(function(x){return x.toArray();});}; /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */observableProto.window = function(windowOpeningsOrClosingSelector,windowClosingSelector){if(arguments.length === 1 && typeof arguments[0] !== 'function'){return observableWindowWithBoundaries.call(this,windowOpeningsOrClosingSelector);}return typeof windowOpeningsOrClosingSelector === 'function'?observableWindowWithClosingSelector.call(this,windowOpeningsOrClosingSelector):observableWindowWithOpenings.call(this,windowOpeningsOrClosingSelector,windowClosingSelector);};function observableWindowWithOpenings(windowOpenings,windowClosingSelector){return windowOpenings.groupJoin(this,windowClosingSelector,observableEmpty,function(_,win){return win;});}function observableWindowWithBoundaries(windowBoundaries){var source=this;return new AnonymousObservable(function(observer){var win=new Subject(),d=new CompositeDisposable(),r=new RefCountDisposable(d);observer.onNext(addRef(win,r));d.add(source.subscribe(function(x){win.onNext(x);},function(err){win.onError(err);observer.onError(err);},function(){win.onCompleted();observer.onCompleted();}));isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));d.add(windowBoundaries.subscribe(function(w){win.onCompleted();win = new Subject();observer.onNext(addRef(win,r));},function(err){win.onError(err);observer.onError(err);},function(){win.onCompleted();observer.onCompleted();}));return r;},source);}function observableWindowWithClosingSelector(windowClosingSelector){var source=this;return new AnonymousObservable(function(observer){var m=new SerialDisposable(),d=new CompositeDisposable(m),r=new RefCountDisposable(d),win=new Subject();observer.onNext(addRef(win,r));d.add(source.subscribe(function(x){win.onNext(x);},function(err){win.onError(err);observer.onError(err);},function(){win.onCompleted();observer.onCompleted();}));function createWindowClose(){var windowClose;try{windowClose = windowClosingSelector();}catch(e) {observer.onError(e);return;}isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));var m1=new SingleAssignmentDisposable();m.setDisposable(m1);m1.setDisposable(windowClose.take(1).subscribe(noop,function(err){win.onError(err);observer.onError(err);},function(){win.onCompleted();win = new Subject();observer.onNext(addRef(win,r));createWindowClose();}));}createWindowClose();return r;},source);} /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */observableProto.pairwise = function(){var source=this;return new AnonymousObservable(function(observer){var previous,hasPrevious=false;return source.subscribe(function(x){if(hasPrevious){observer.onNext([previous,x]);}else {hasPrevious = true;}previous = x;},observer.onError.bind(observer),observer.onCompleted.bind(observer));},source);}; /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */observableProto.partition = function(predicate,thisArg){return [this.filter(predicate,thisArg),this.filter(function(x,i,o){return !predicate.call(thisArg,x,i,o);})];};function enumerableWhile(condition,source){return new Enumerable(function(){return new Enumerator(function(){return condition()?{done:false,value:source}:{done:true,value:undefined};});});} /**
	   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	   *
	   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */observableProto.letBind = observableProto['let'] = function(func){return func(this);}; /**
	   *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
	   *
	   * @example
	   *  1 - res = Rx.Observable.if(condition, obs1);
	   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	   */Observable['if'] = Observable.ifThen = function(condition,thenSource,elseSourceOrScheduler){return observableDefer(function(){elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler)); // Assume a scheduler for empty only
	typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));return condition()?thenSource:elseSourceOrScheduler;});}; /**
	   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	   * There is an alias for this method called 'forIn' for browsers <IE9
	   * @param {Array} sources An array of values to turn into an observable sequence.
	   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	   * @returns {Observable} An observable sequence from the concatenated observable sequences.
	   */Observable['for'] = Observable.forIn = function(sources,resultSelector,thisArg){return enumerableOf(sources,resultSelector,thisArg).concat();}; /**
	   *  Repeats source as long as condition holds emulating a while loop.
	   * There is an alias for this method called 'whileDo' for browsers <IE9
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */var observableWhileDo=Observable['while'] = Observable.whileDo = function(condition,source){isPromise(source) && (source = observableFromPromise(source));return enumerableWhile(condition,source).concat();}; /**
	   *  Repeats source as long as condition holds emulating a do while loop.
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */observableProto.doWhile = function(condition){return observableConcat([this,observableWhileDo(condition,this)]);}; /**
	   *  Uses selector to determine which source in sources to use.
	   *  There is an alias 'switchCase' for browsers <IE9.
	   *
	   * @example
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
	   *
	   * @param {Function} selector The function which extracts the value for to test in a case statement.
	   * @param {Array} sources A object which has keys which correspond to the case statement labels.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	   *
	   * @returns {Observable} An observable sequence which is determined by a case statement.
	   */Observable['case'] = Observable.switchCase = function(selector,sources,defaultSourceOrScheduler){return observableDefer(function(){isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));var result=sources[selector()];isPromise(result) && (result = observableFromPromise(result));return result || defaultSourceOrScheduler;});}; /**
	   *  Expands an observable sequence by recursively invoking selector.
	   *
	   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	   */observableProto.expand = function(selector,scheduler){isScheduler(scheduler) || (scheduler = immediateScheduler);var source=this;return new AnonymousObservable(function(observer){var q=[],m=new SerialDisposable(),d=new CompositeDisposable(m),activeCount=0,isAcquired=false;var ensureActive=function ensureActive(){var isOwner=false;if(q.length > 0){isOwner = !isAcquired;isAcquired = true;}if(isOwner){m.setDisposable(scheduler.scheduleRecursive(function(self){var work;if(q.length > 0){work = q.shift();}else {isAcquired = false;return;}var m1=new SingleAssignmentDisposable();d.add(m1);m1.setDisposable(work.subscribe(function(x){observer.onNext(x);var result=null;try{result = selector(x);}catch(e) {observer.onError(e);}q.push(result);activeCount++;ensureActive();},observer.onError.bind(observer),function(){d.remove(m1);activeCount--;if(activeCount === 0){observer.onCompleted();}}));self();}));}};q.push(source);activeCount++;ensureActive();return d;},this);}; /**
	   *  Runs all observable sequences in parallel and collect their last elements.
	   *
	   * @example
	   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	   */Observable.forkJoin = function(){var allSources=[];if(Array.isArray(arguments[0])){allSources = arguments[0];}else {for(var i=0,len=arguments.length;i < len;i++) {allSources.push(arguments[i]);}}return new AnonymousObservable(function(subscriber){var count=allSources.length;if(count === 0){subscriber.onCompleted();return disposableEmpty;}var group=new CompositeDisposable(),finished=false,hasResults=new Array(count),hasCompleted=new Array(count),results=new Array(count);for(var idx=0;idx < count;idx++) {(function(i){var source=allSources[i];isPromise(source) && (source = observableFromPromise(source));group.add(source.subscribe(function(value){if(!finished){hasResults[i] = true;results[i] = value;}},function(e){finished = true;subscriber.onError(e);group.dispose();},function(){if(!finished){if(!hasResults[i]){subscriber.onCompleted();return;}hasCompleted[i] = true;for(var ix=0;ix < count;ix++) {if(!hasCompleted[ix]){return;}}finished = true;subscriber.onNext(results);subscriber.onCompleted();}}));})(idx);}return group;});}; /**
	   *  Runs two observable sequences in parallel and combines their last elemenets.
	   *
	   * @param {Observable} second Second observable sequence.
	   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	   */observableProto.forkJoin = function(second,resultSelector){var first=this;return new AnonymousObservable(function(observer){var leftStopped=false,rightStopped=false,hasLeft=false,hasRight=false,lastLeft,lastRight,leftSubscription=new SingleAssignmentDisposable(),rightSubscription=new SingleAssignmentDisposable();isPromise(second) && (second = observableFromPromise(second));leftSubscription.setDisposable(first.subscribe(function(left){hasLeft = true;lastLeft = left;},function(err){rightSubscription.dispose();observer.onError(err);},function(){leftStopped = true;if(rightStopped){if(!hasLeft){observer.onCompleted();}else if(!hasRight){observer.onCompleted();}else {var result;try{result = resultSelector(lastLeft,lastRight);}catch(e) {observer.onError(e);return;}observer.onNext(result);observer.onCompleted();}}}));rightSubscription.setDisposable(second.subscribe(function(right){hasRight = true;lastRight = right;},function(err){leftSubscription.dispose();observer.onError(err);},function(){rightStopped = true;if(leftStopped){if(!hasLeft){observer.onCompleted();}else if(!hasRight){observer.onCompleted();}else {var result;try{result = resultSelector(lastLeft,lastRight);}catch(e) {observer.onError(e);return;}observer.onNext(result);observer.onCompleted();}}}));return new CompositeDisposable(leftSubscription,rightSubscription);},first);}; /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */observableProto.manySelect = function(selector,scheduler){isScheduler(scheduler) || (scheduler = immediateScheduler);var source=this;return observableDefer(function(){var chain;return source.map(function(x){var curr=new ChainObservable(x);chain && chain.onNext(x);chain = curr;return curr;}).tap(noop,function(e){chain && chain.onError(e);},function(){chain && chain.onCompleted();}).observeOn(scheduler).map(selector);},source);};var ChainObservable=(function(__super__){function subscribe(observer){var self=this,g=new CompositeDisposable();g.add(currentThreadScheduler.schedule(function(){observer.onNext(self.head);g.add(self.tail.mergeAll().subscribe(observer));}));return g;}inherits(ChainObservable,__super__);function ChainObservable(head){__super__.call(this,subscribe);this.head = head;this.tail = new AsyncSubject();}addProperties(ChainObservable.prototype,Observer,{onCompleted:function onCompleted(){this.onNext(Observable.empty());},onError:function onError(e){this.onNext(Observable.throwError(e));},onNext:function onNext(v){this.tail.onNext(v);this.tail.onCompleted();}});return ChainObservable;})(Observable); /** @private */var Map=root.Map || (function(){function Map(){this._keys = [];this._values = [];}Map.prototype.get = function(key){var i=this._keys.indexOf(key);return i !== -1?this._values[i]:undefined;};Map.prototype.set = function(key,value){var i=this._keys.indexOf(key);i !== -1 && (this._values[i] = value);this._values[this._keys.push(key) - 1] = value;};Map.prototype.forEach = function(callback,thisArg){for(var i=0,len=this._keys.length;i < len;i++) {callback.call(thisArg,this._values[i],this._keys[i]);}};return Map;})(); /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */function Pattern(patterns){this.patterns = patterns;} /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */Pattern.prototype.and = function(other){return new Pattern(this.patterns.concat(other));}; /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */Pattern.prototype.thenDo = function(selector){return new Plan(this,selector);};function Plan(expression,selector){this.expression = expression;this.selector = selector;}Plan.prototype.activate = function(externalSubscriptions,observer,deactivate){var self=this;var joinObservers=[];for(var i=0,len=this.expression.patterns.length;i < len;i++) {joinObservers.push(planCreateObserver(externalSubscriptions,this.expression.patterns[i],observer.onError.bind(observer)));}var activePlan=new ActivePlan(joinObservers,function(){var result;try{result = self.selector.apply(self,arguments);}catch(e) {observer.onError(e);return;}observer.onNext(result);},function(){for(var j=0,jlen=joinObservers.length;j < jlen;j++) {joinObservers[j].removeActivePlan(activePlan);}deactivate(activePlan);});for(i = 0,len = joinObservers.length;i < len;i++) {joinObservers[i].addActivePlan(activePlan);}return activePlan;};function planCreateObserver(externalSubscriptions,observable,onError){var entry=externalSubscriptions.get(observable);if(!entry){var observer=new JoinObserver(observable,onError);externalSubscriptions.set(observable,observer);return observer;}return entry;}function ActivePlan(joinObserverArray,onNext,onCompleted){this.joinObserverArray = joinObserverArray;this.onNext = onNext;this.onCompleted = onCompleted;this.joinObservers = new Map();for(var i=0,len=this.joinObserverArray.length;i < len;i++) {var joinObserver=this.joinObserverArray[i];this.joinObservers.set(joinObserver,joinObserver);}}ActivePlan.prototype.dequeue = function(){this.joinObservers.forEach(function(v){v.queue.shift();});};ActivePlan.prototype.match = function(){var i,len,hasValues=true;for(i = 0,len = this.joinObserverArray.length;i < len;i++) {if(this.joinObserverArray[i].queue.length === 0){hasValues = false;break;}}if(hasValues){var firstValues=[],isCompleted=false;for(i = 0,len = this.joinObserverArray.length;i < len;i++) {firstValues.push(this.joinObserverArray[i].queue[0]);this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);}if(isCompleted){this.onCompleted();}else {this.dequeue();var values=[];for(i = 0,len = firstValues.length;i < firstValues.length;i++) {values.push(firstValues[i].value);}this.onNext.apply(this,values);}}};var JoinObserver=(function(__super__){inherits(JoinObserver,__super__);function JoinObserver(source,onError){__super__.call(this);this.source = source;this.onError = onError;this.queue = [];this.activePlans = [];this.subscription = new SingleAssignmentDisposable();this.isDisposed = false;}var JoinObserverPrototype=JoinObserver.prototype;JoinObserverPrototype.next = function(notification){if(!this.isDisposed){if(notification.kind === 'E'){return this.onError(notification.exception);}this.queue.push(notification);var activePlans=this.activePlans.slice(0);for(var i=0,len=activePlans.length;i < len;i++) {activePlans[i].match();}}};JoinObserverPrototype.error = noop;JoinObserverPrototype.completed = noop;JoinObserverPrototype.addActivePlan = function(activePlan){this.activePlans.push(activePlan);};JoinObserverPrototype.subscribe = function(){this.subscription.setDisposable(this.source.materialize().subscribe(this));};JoinObserverPrototype.removeActivePlan = function(activePlan){this.activePlans.splice(this.activePlans.indexOf(activePlan),1);this.activePlans.length === 0 && this.dispose();};JoinObserverPrototype.dispose = function(){__super__.prototype.dispose.call(this);if(!this.isDisposed){this.isDisposed = true;this.subscription.dispose();}};return JoinObserver;})(AbstractObserver); /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */observableProto.and = function(right){return new Pattern([this,right]);}; /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */observableProto.thenDo = function(selector){return new Pattern([this]).thenDo(selector);}; /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */Observable.when = function(){var len=arguments.length,plans;if(Array.isArray(arguments[0])){plans = arguments[0];}else {plans = new Array(len);for(var i=0;i < len;i++) {plans[i] = arguments[i];}}return new AnonymousObservable(function(o){var activePlans=[],externalSubscriptions=new Map();var outObserver=observerCreate(function(x){o.onNext(x);},function(err){externalSubscriptions.forEach(function(v){v.onError(err);});o.onError(err);},function(x){o.onCompleted();});try{for(var i=0,len=plans.length;i < len;i++) {activePlans.push(plans[i].activate(externalSubscriptions,outObserver,function(activePlan){var idx=activePlans.indexOf(activePlan);activePlans.splice(idx,1);activePlans.length === 0 && o.onCompleted();}));}}catch(e) {observableThrow(e).subscribe(o);}var group=new CompositeDisposable();externalSubscriptions.forEach(function(joinObserver){joinObserver.subscribe();group.add(joinObserver);});return group;});};function observableTimerDate(dueTime,scheduler){return new AnonymousObservable(function(observer){return scheduler.scheduleWithAbsolute(dueTime,function(){observer.onNext(0);observer.onCompleted();});});}function observableTimerDateAndPeriod(dueTime,period,scheduler){return new AnonymousObservable(function(observer){var d=dueTime,p=normalizeTime(period);return scheduler.scheduleRecursiveWithAbsoluteAndState(0,d,function(count,self){if(p > 0){var now=scheduler.now();d = d + p;d <= now && (d = now + p);}observer.onNext(count);self(count + 1,d);});});}function observableTimerTimeSpan(dueTime,scheduler){return new AnonymousObservable(function(observer){return scheduler.scheduleWithRelative(normalizeTime(dueTime),function(){observer.onNext(0);observer.onCompleted();});});}function observableTimerTimeSpanAndPeriod(dueTime,period,scheduler){return dueTime === period?new AnonymousObservable(function(observer){return scheduler.schedulePeriodicWithState(0,period,function(count){observer.onNext(count);return count + 1;});}):observableDefer(function(){return observableTimerDateAndPeriod(scheduler.now() + dueTime,period,scheduler);});} /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */var observableinterval=Observable.interval = function(period,scheduler){return observableTimerTimeSpanAndPeriod(period,period,isScheduler(scheduler)?scheduler:timeoutScheduler);}; /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */var observableTimer=Observable.timer = function(dueTime,periodOrScheduler,scheduler){var period;isScheduler(scheduler) || (scheduler = timeoutScheduler);if(periodOrScheduler !== undefined && typeof periodOrScheduler === 'number'){period = periodOrScheduler;}else if(isScheduler(periodOrScheduler)){scheduler = periodOrScheduler;}if(dueTime instanceof Date && period === undefined){return observableTimerDate(dueTime.getTime(),scheduler);}if(dueTime instanceof Date && period !== undefined){period = periodOrScheduler;return observableTimerDateAndPeriod(dueTime.getTime(),period,scheduler);}return period === undefined?observableTimerTimeSpan(dueTime,scheduler):observableTimerTimeSpanAndPeriod(dueTime,period,scheduler);};function observableDelayTimeSpan(source,dueTime,scheduler){return new AnonymousObservable(function(observer){var active=false,cancelable=new SerialDisposable(),exception=null,q=[],running=false,subscription;subscription = source.materialize().timestamp(scheduler).subscribe(function(notification){var d,shouldRun;if(notification.value.kind === 'E'){q = [];q.push(notification);exception = notification.value.exception;shouldRun = !running;}else {q.push({value:notification.value,timestamp:notification.timestamp + dueTime});shouldRun = !active;active = true;}if(shouldRun){if(exception !== null){observer.onError(exception);}else {d = new SingleAssignmentDisposable();cancelable.setDisposable(d);d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime,function(self){var e,recurseDueTime,result,shouldRecurse;if(exception !== null){return;}running = true;do {result = null;if(q.length > 0 && q[0].timestamp - scheduler.now() <= 0){result = q.shift().value;}if(result !== null){result.accept(observer);}}while(result !== null);shouldRecurse = false;recurseDueTime = 0;if(q.length > 0){shouldRecurse = true;recurseDueTime = Math.max(0,q[0].timestamp - scheduler.now());}else {active = false;}e = exception;running = false;if(e !== null){observer.onError(e);}else if(shouldRecurse){self(recurseDueTime);}}));}}});return new CompositeDisposable(subscription,cancelable);},source);}function observableDelayDate(source,dueTime,scheduler){return observableDefer(function(){return observableDelayTimeSpan(source,dueTime - scheduler.now(),scheduler);});} /**
	   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
	   *
	   * @example
	   *  1 - res = Rx.Observable.delay(new Date());
	   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
	   *
	   *  3 - res = Rx.Observable.delay(5000);
	   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
	   * @memberOf Observable#
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */observableProto.delay = function(dueTime,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return dueTime instanceof Date?observableDelayDate(this,dueTime.getTime(),scheduler):observableDelayTimeSpan(this,dueTime,scheduler);}; /**
	   *  Ignores values from an observable sequence which are followed by another value before dueTime.
	   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The debounced sequence.
	   */observableProto.debounce = observableProto.throttleWithTimeout = function(dueTime,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);var source=this;return new AnonymousObservable(function(observer){var cancelable=new SerialDisposable(),hasvalue=false,value,id=0;var subscription=source.subscribe(function(x){hasvalue = true;value = x;id++;var currentId=id,d=new SingleAssignmentDisposable();cancelable.setDisposable(d);d.setDisposable(scheduler.scheduleWithRelative(dueTime,function(){hasvalue && id === currentId && observer.onNext(value);hasvalue = false;}));},function(e){cancelable.dispose();observer.onError(e);hasvalue = false;id++;},function(){cancelable.dispose();hasvalue && observer.onNext(value);observer.onCompleted();hasvalue = false;id++;});return new CompositeDisposable(subscription,cancelable);},this);}; /**
	   * @deprecated use #debounce or #throttleWithTimeout instead.
	   */observableProto.throttle = function(dueTime,scheduler){ //deprecate('throttle', 'debounce or throttleWithTimeout');
	return this.debounce(dueTime,scheduler);}; /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */observableProto.windowWithTime = function(timeSpan,timeShiftOrScheduler,scheduler){var source=this,timeShift;timeShiftOrScheduler == null && (timeShift = timeSpan);isScheduler(scheduler) || (scheduler = timeoutScheduler);if(typeof timeShiftOrScheduler === 'number'){timeShift = timeShiftOrScheduler;}else if(isScheduler(timeShiftOrScheduler)){timeShift = timeSpan;scheduler = timeShiftOrScheduler;}return new AnonymousObservable(function(observer){var groupDisposable,nextShift=timeShift,nextSpan=timeSpan,q=[],refCountDisposable,timerD=new SerialDisposable(),totalTime=0;groupDisposable = new CompositeDisposable(timerD),refCountDisposable = new RefCountDisposable(groupDisposable);function createTimer(){var m=new SingleAssignmentDisposable(),isSpan=false,isShift=false;timerD.setDisposable(m);if(nextSpan === nextShift){isSpan = true;isShift = true;}else if(nextSpan < nextShift){isSpan = true;}else {isShift = true;}var newTotalTime=isSpan?nextSpan:nextShift,ts=newTotalTime - totalTime;totalTime = newTotalTime;if(isSpan){nextSpan += timeShift;}if(isShift){nextShift += timeShift;}m.setDisposable(scheduler.scheduleWithRelative(ts,function(){if(isShift){var s=new Subject();q.push(s);observer.onNext(addRef(s,refCountDisposable));}isSpan && q.shift().onCompleted();createTimer();}));};q.push(new Subject());observer.onNext(addRef(q[0],refCountDisposable));createTimer();groupDisposable.add(source.subscribe(function(x){for(var i=0,len=q.length;i < len;i++) {q[i].onNext(x);}},function(e){for(var i=0,len=q.length;i < len;i++) {q[i].onError(e);}observer.onError(e);},function(){for(var i=0,len=q.length;i < len;i++) {q[i].onCompleted();}observer.onCompleted();}));return refCountDisposable;},source);}; /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */observableProto.windowWithTimeOrCount = function(timeSpan,count,scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(observer){var timerD=new SerialDisposable(),groupDisposable=new CompositeDisposable(timerD),refCountDisposable=new RefCountDisposable(groupDisposable),n=0,windowId=0,s=new Subject();function createTimer(id){var m=new SingleAssignmentDisposable();timerD.setDisposable(m);m.setDisposable(scheduler.scheduleWithRelative(timeSpan,function(){if(id !== windowId){return;}n = 0;var newId=++windowId;s.onCompleted();s = new Subject();observer.onNext(addRef(s,refCountDisposable));createTimer(newId);}));}observer.onNext(addRef(s,refCountDisposable));createTimer(0);groupDisposable.add(source.subscribe(function(x){var newId=0,newWindow=false;s.onNext(x);if(++n === count){newWindow = true;n = 0;newId = ++windowId;s.onCompleted();s = new Subject();observer.onNext(addRef(s,refCountDisposable));}newWindow && createTimer(newId);},function(e){s.onError(e);observer.onError(e);},function(){s.onCompleted();observer.onCompleted();}));return refCountDisposable;},source);}; /**
	     *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	     *
	     * @example
	     *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
	     *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
	     *
	     * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	     * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	     * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */observableProto.bufferWithTime = function(timeSpan,timeShiftOrScheduler,scheduler){return this.windowWithTime.apply(this,arguments).selectMany(function(x){return x.toArray();});}; /**
	     *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	     *
	     * @example
	     *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
	     *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
	     *
	     * @param {Number} timeSpan Maximum time length of a buffer.
	     * @param {Number} count Maximum element count of a buffer.
	     * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */observableProto.bufferWithTimeOrCount = function(timeSpan,count,scheduler){return this.windowWithTimeOrCount(timeSpan,count,scheduler).selectMany(function(x){return x.toArray();});}; /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */observableProto.timeInterval = function(scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return observableDefer(function(){var last=scheduler.now();return source.map(function(x){var now=scheduler.now(),span=now - last;last = now;return {value:x,interval:span};});});}; /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */observableProto.timestamp = function(scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return this.map(function(x){return {value:x,timestamp:scheduler.now()};});};function sampleObservable(source,sampler){return new AnonymousObservable(function(observer){var atEnd,value,hasValue;function sampleSubscribe(){if(hasValue){hasValue = false;observer.onNext(value);}atEnd && observer.onCompleted();}return new CompositeDisposable(source.subscribe(function(newValue){hasValue = true;value = newValue;},observer.onError.bind(observer),function(){atEnd = true;}),sampler.subscribe(sampleSubscribe,observer.onError.bind(observer),sampleSubscribe));},source);} /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */observableProto.sample = observableProto.throttleLatest = function(intervalOrSampler,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return typeof intervalOrSampler === 'number'?sampleObservable(this,observableinterval(intervalOrSampler,scheduler)):sampleObservable(this,intervalOrSampler);}; /**
	   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */observableProto.timeout = function(dueTime,other,scheduler){(other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));isScheduler(scheduler) || (scheduler = timeoutScheduler);var source=this,schedulerMethod=dueTime instanceof Date?'scheduleWithAbsolute':'scheduleWithRelative';return new AnonymousObservable(function(observer){var id=0,original=new SingleAssignmentDisposable(),subscription=new SerialDisposable(),switched=false,timer=new SerialDisposable();subscription.setDisposable(original);function createTimer(){var myId=id;timer.setDisposable(scheduler[schedulerMethod](dueTime,function(){if(id === myId){isPromise(other) && (other = observableFromPromise(other));subscription.setDisposable(other.subscribe(observer));}}));}createTimer();original.setDisposable(source.subscribe(function(x){if(!switched){id++;observer.onNext(x);createTimer();}},function(e){if(!switched){id++;observer.onError(e);}},function(){if(!switched){id++;observer.onCompleted();}}));return new CompositeDisposable(subscription,timer);},source);}; /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */Observable.generateWithAbsoluteTime = function(initialState,condition,iterate,resultSelector,timeSelector,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(observer){var first=true,hasResult=false,result,state=initialState,time;return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(),function(self){hasResult && observer.onNext(result);try{if(first){first = false;}else {state = iterate(state);}hasResult = condition(state);if(hasResult){result = resultSelector(state);time = timeSelector(state);}}catch(e) {observer.onError(e);return;}if(hasResult){self(time);}else {observer.onCompleted();}});});}; /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */Observable.generateWithRelativeTime = function(initialState,condition,iterate,resultSelector,timeSelector,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(observer){var first=true,hasResult=false,result,state=initialState,time;return scheduler.scheduleRecursiveWithRelative(0,function(self){hasResult && observer.onNext(result);try{if(first){first = false;}else {state = iterate(state);}hasResult = condition(state);if(hasResult){result = resultSelector(state);time = timeSelector(state);}}catch(e) {observer.onError(e);return;}if(hasResult){self(time);}else {observer.onCompleted();}});});}; /**
	   *  Time shifts the observable sequence by delaying the subscription.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Number} dueTime Absolute or relative time to perform the subscription at.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */observableProto.delaySubscription = function(dueTime,scheduler){return this.delayWithSelector(observableTimer(dueTime,isScheduler(scheduler)?scheduler:timeoutScheduler),observableEmpty);}; /**
	   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
	   *
	   * @example
	   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
	   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
	   *
	   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
	   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
	   * @returns {Observable} Time-shifted sequence.
	   */observableProto.delayWithSelector = function(subscriptionDelay,delayDurationSelector){var source=this,subDelay,selector;if(typeof subscriptionDelay === 'function'){selector = subscriptionDelay;}else {subDelay = subscriptionDelay;selector = delayDurationSelector;}return new AnonymousObservable(function(observer){var delays=new CompositeDisposable(),atEnd=false,done=function done(){if(atEnd && delays.length === 0){observer.onCompleted();}},subscription=new SerialDisposable(),start=function start(){subscription.setDisposable(source.subscribe(function(x){var delay;try{delay = selector(x);}catch(error) {observer.onError(error);return;}var d=new SingleAssignmentDisposable();delays.add(d);d.setDisposable(delay.subscribe(function(){observer.onNext(x);delays.remove(d);done();},observer.onError.bind(observer),function(){observer.onNext(x);delays.remove(d);done();}));},observer.onError.bind(observer),function(){atEnd = true;subscription.dispose();done();}));};if(!subDelay){start();}else {subscription.setDisposable(subDelay.subscribe(start,observer.onError.bind(observer),start));}return new CompositeDisposable(subscription,delays);},this);}; /**
	     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
	     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
	     * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
	     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
	     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	     */observableProto.timeoutWithSelector = function(firstTimeout,timeoutdurationSelector,other){if(arguments.length === 1){timeoutdurationSelector = firstTimeout;firstTimeout = observableNever();}other || (other = observableThrow(new Error('Timeout')));var source=this;return new AnonymousObservable(function(observer){var subscription=new SerialDisposable(),timer=new SerialDisposable(),original=new SingleAssignmentDisposable();subscription.setDisposable(original);var id=0,switched=false;function setTimer(timeout){var myId=id;function timerWins(){return id === myId;}var d=new SingleAssignmentDisposable();timer.setDisposable(d);d.setDisposable(timeout.subscribe(function(){timerWins() && subscription.setDisposable(other.subscribe(observer));d.dispose();},function(e){timerWins() && observer.onError(e);},function(){timerWins() && subscription.setDisposable(other.subscribe(observer));}));};setTimer(firstTimeout);function observerWins(){var res=!switched;if(res){id++;}return res;}original.setDisposable(source.subscribe(function(x){if(observerWins()){observer.onNext(x);var timeout;try{timeout = timeoutdurationSelector(x);}catch(e) {observer.onError(e);return;}setTimer(isPromise(timeout)?observableFromPromise(timeout):timeout);}},function(e){observerWins() && observer.onError(e);},function(){observerWins() && observer.onCompleted();}));return new CompositeDisposable(subscription,timer);},source);}; /**
	   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
	   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
	   * @returns {Observable} The debounced sequence.
	   */observableProto.debounceWithSelector = function(durationSelector){var source=this;return new AnonymousObservable(function(observer){var value,hasValue=false,cancelable=new SerialDisposable(),id=0;var subscription=source.subscribe(function(x){var throttle;try{throttle = durationSelector(x);}catch(e) {observer.onError(e);return;}isPromise(throttle) && (throttle = observableFromPromise(throttle));hasValue = true;value = x;id++;var currentid=id,d=new SingleAssignmentDisposable();cancelable.setDisposable(d);d.setDisposable(throttle.subscribe(function(){hasValue && id === currentid && observer.onNext(value);hasValue = false;d.dispose();},observer.onError.bind(observer),function(){hasValue && id === currentid && observer.onNext(value);hasValue = false;d.dispose();}));},function(e){cancelable.dispose();observer.onError(e);hasValue = false;id++;},function(){cancelable.dispose();hasValue && observer.onNext(value);observer.onCompleted();hasValue = false;id++;});return new CompositeDisposable(subscription,cancelable);},source);};observableProto.throttleWithSelector = function(){ //deprecate('throttleWithSelector', 'debounceWithSelector');
	return this.debounceWithSelector.apply(this,arguments);}; /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   *
	   *  1 - res = source.skipLastWithTime(5000);
	   *  2 - res = source.skipLastWithTime(5000, scheduler);
	   *
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */observableProto.skipLastWithTime = function(duration,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);var source=this;return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){var now=scheduler.now();q.push({interval:now,value:x});while(q.length > 0 && now - q[0].interval >= duration) {o.onNext(q.shift().value);}},function(e){o.onError(e);},function(){var now=scheduler.now();while(q.length > 0 && now - q[0].interval >= duration) {o.onNext(q.shift().value);}o.onCompleted();});},source);}; /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */observableProto.takeLastWithTime = function(duration,scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){var now=scheduler.now();q.push({interval:now,value:x});while(q.length > 0 && now - q[0].interval >= duration) {q.shift();}},function(e){o.onError(e);},function(){var now=scheduler.now();while(q.length > 0) {var next=q.shift();if(now - next.interval <= duration){o.onNext(next.value);}}o.onCompleted();});},source);}; /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */observableProto.takeLastBufferWithTime = function(duration,scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(o){var q=[];return source.subscribe(function(x){var now=scheduler.now();q.push({interval:now,value:x});while(q.length > 0 && now - q[0].interval >= duration) {q.shift();}},function(e){o.onError(e);},function(){var now=scheduler.now(),res=[];while(q.length > 0) {var next=q.shift();now - next.interval <= duration && res.push(next.value);}o.onNext(res);o.onCompleted();});},source);}; /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */observableProto.takeWithTime = function(duration,scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(o){return new CompositeDisposable(scheduler.scheduleWithRelative(duration,function(){o.onCompleted();}),source.subscribe(o));},source);}; /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
	   *
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */observableProto.skipWithTime = function(duration,scheduler){var source=this;isScheduler(scheduler) || (scheduler = timeoutScheduler);return new AnonymousObservable(function(observer){var open=false;return new CompositeDisposable(scheduler.scheduleWithRelative(duration,function(){open = true;}),source.subscribe(function(x){open && observer.onNext(x);},observer.onError.bind(observer),observer.onCompleted.bind(observer)));},source);}; /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */observableProto.skipUntilWithTime = function(startTime,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);var source=this,schedulerMethod=startTime instanceof Date?'scheduleWithAbsolute':'scheduleWithRelative';return new AnonymousObservable(function(o){var open=false;return new CompositeDisposable(scheduler[schedulerMethod](startTime,function(){open = true;}),source.subscribe(function(x){open && o.onNext(x);},function(e){o.onError(e);},function(){o.onCompleted();}));},source);}; /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */observableProto.takeUntilWithTime = function(endTime,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);var source=this,schedulerMethod=endTime instanceof Date?'scheduleWithAbsolute':'scheduleWithRelative';return new AnonymousObservable(function(o){return new CompositeDisposable(scheduler[schedulerMethod](endTime,function(){o.onCompleted();}),source.subscribe(o));},source);}; /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */observableProto.throttleFirst = function(windowDuration,scheduler){isScheduler(scheduler) || (scheduler = timeoutScheduler);var duration=+windowDuration || 0;if(duration <= 0){throw new RangeError('windowDuration cannot be less or equal zero.');}var source=this;return new AnonymousObservable(function(o){var lastOnNext=0;return source.subscribe(function(x){var now=scheduler.now();if(lastOnNext === 0 || now - lastOnNext >= duration){lastOnNext = now;o.onNext(x);}},function(e){o.onError(e);},function(){o.onCompleted();});},source);}; /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */observableProto.transduce = function(transducer){var source=this;function transformForObserver(observer){return {init:function init(){return observer;},step:function step(obs,input){return obs.onNext(input);},result:function result(obs){return obs.onCompleted();}};}return new AnonymousObservable(function(observer){var xform=transducer(transformForObserver(observer));return source.subscribe(function(v){try{xform.step(observer,v);}catch(e) {observer.onError(e);}},observer.onError.bind(observer),function(){xform.result(observer);});},source);}; /*
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */observableProto.exclusive = function(){var sources=this;return new AnonymousObservable(function(observer){var hasCurrent=false,isStopped=false,m=new SingleAssignmentDisposable(),g=new CompositeDisposable();g.add(m);m.setDisposable(sources.subscribe(function(innerSource){if(!hasCurrent){hasCurrent = true;isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));var innerSubscription=new SingleAssignmentDisposable();g.add(innerSubscription);innerSubscription.setDisposable(innerSource.subscribe(observer.onNext.bind(observer),observer.onError.bind(observer),function(){g.remove(innerSubscription);hasCurrent = false;if(isStopped && g.length === 1){observer.onCompleted();}}));}},observer.onError.bind(observer),function(){isStopped = true;if(!hasCurrent && g.length === 1){observer.onCompleted();}}));return g;},this);}; /*
	   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @param {Function} selector Selector to invoke for every item in the current subscription.
	   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
	   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
	   */observableProto.exclusiveMap = function(selector,thisArg){var sources=this,selectorFunc=bindCallback(selector,thisArg,3);return new AnonymousObservable(function(observer){var index=0,hasCurrent=false,isStopped=true,m=new SingleAssignmentDisposable(),g=new CompositeDisposable();g.add(m);m.setDisposable(sources.subscribe(function(innerSource){if(!hasCurrent){hasCurrent = true;innerSubscription = new SingleAssignmentDisposable();g.add(innerSubscription);isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));innerSubscription.setDisposable(innerSource.subscribe(function(x){var result;try{result = selectorFunc(x,index++,innerSource);}catch(e) {observer.onError(e);return;}observer.onNext(result);},function(e){observer.onError(e);},function(){g.remove(innerSubscription);hasCurrent = false;if(isStopped && g.length === 1){observer.onCompleted();}}));}},function(e){observer.onError(e);},function(){isStopped = true;if(g.length === 1 && !hasCurrent){observer.onCompleted();}}));return g;},this);}; /** Provides a set of extension methods for virtual time scheduling. */Rx.VirtualTimeScheduler = (function(__super__){function localNow(){return this.toDateTimeOffset(this.clock);}function scheduleNow(state,action){return this.scheduleAbsoluteWithState(state,this.clock,action);}function scheduleRelative(state,dueTime,action){return this.scheduleRelativeWithState(state,this.toRelative(dueTime),action);}function scheduleAbsolute(state,dueTime,action){return this.scheduleRelativeWithState(state,this.toRelative(dueTime - this.now()),action);}function invokeAction(scheduler,action){action();return disposableEmpty;}inherits(VirtualTimeScheduler,__super__); /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */function VirtualTimeScheduler(initialClock,comparer){this.clock = initialClock;this.comparer = comparer;this.isEnabled = false;this.queue = new PriorityQueue(1024);__super__.call(this,localNow,scheduleNow,scheduleRelative,scheduleAbsolute);}var VirtualTimeSchedulerPrototype=VirtualTimeScheduler.prototype; /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */VirtualTimeSchedulerPrototype.add = notImplemented; /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented; /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */VirtualTimeSchedulerPrototype.toRelative = notImplemented; /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function(state,period,action){var s=new SchedulePeriodicRecursive(this,state,period,action);return s.start();}; /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function(state,dueTime,action){var runAt=this.add(this.clock,dueTime);return this.scheduleAbsoluteWithState(state,runAt,action);}; /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */VirtualTimeSchedulerPrototype.scheduleRelative = function(dueTime,action){return this.scheduleRelativeWithState(action,dueTime,invokeAction);}; /**
	     * Starts the virtual time scheduler.
	     */VirtualTimeSchedulerPrototype.start = function(){if(!this.isEnabled){this.isEnabled = true;do {var next=this.getNext();if(next !== null){this.comparer(next.dueTime,this.clock) > 0 && (this.clock = next.dueTime);next.invoke();}else {this.isEnabled = false;}}while(this.isEnabled);}}; /**
	     * Stops the virtual time scheduler.
	     */VirtualTimeSchedulerPrototype.stop = function(){this.isEnabled = false;}; /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */VirtualTimeSchedulerPrototype.advanceTo = function(time){var dueToClock=this.comparer(this.clock,time);if(this.comparer(this.clock,time) > 0){throw new ArgumentOutOfRangeError();}if(dueToClock === 0){return;}if(!this.isEnabled){this.isEnabled = true;do {var next=this.getNext();if(next !== null && this.comparer(next.dueTime,time) <= 0){this.comparer(next.dueTime,this.clock) > 0 && (this.clock = next.dueTime);next.invoke();}else {this.isEnabled = false;}}while(this.isEnabled);this.clock = time;}}; /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */VirtualTimeSchedulerPrototype.advanceBy = function(time){var dt=this.add(this.clock,time),dueToClock=this.comparer(this.clock,dt);if(dueToClock > 0){throw new ArgumentOutOfRangeError();}if(dueToClock === 0){return;}this.advanceTo(dt);}; /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */VirtualTimeSchedulerPrototype.sleep = function(time){var dt=this.add(this.clock,time);if(this.comparer(this.clock,dt) >= 0){throw new ArgumentOutOfRangeError();}this.clock = dt;}; /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */VirtualTimeSchedulerPrototype.getNext = function(){while(this.queue.length > 0) {var next=this.queue.peek();if(next.isCancelled()){this.queue.dequeue();}else {return next;}}return null;}; /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Scheduler} scheduler Scheduler to execute the action on.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */VirtualTimeSchedulerPrototype.scheduleAbsolute = function(dueTime,action){return this.scheduleAbsoluteWithState(action,dueTime,invokeAction);}; /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function(state,dueTime,action){var self=this;function run(scheduler,state1){self.queue.remove(si);return action(scheduler,state1);}var si=new ScheduledItem(this,state,run,dueTime,this.comparer);this.queue.enqueue(si);return si.disposable;};return VirtualTimeScheduler;})(Scheduler); /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */Rx.HistoricalScheduler = (function(__super__){inherits(HistoricalScheduler,__super__); /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */function HistoricalScheduler(initialClock,comparer){var clock=initialClock == null?0:initialClock;var cmp=comparer || defaultSubComparer;__super__.call(this,clock,cmp);}var HistoricalSchedulerProto=HistoricalScheduler.prototype; /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */HistoricalSchedulerProto.add = function(absolute,relative){return absolute + relative;};HistoricalSchedulerProto.toDateTimeOffset = function(absolute){return new Date(absolute).getTime();}; /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */HistoricalSchedulerProto.toRelative = function(timeSpan){return timeSpan;};return HistoricalScheduler;})(Rx.VirtualTimeScheduler);var AnonymousObservable=Rx.AnonymousObservable = (function(__super__){inherits(AnonymousObservable,__super__); // Fix subscriber to check for undefined or function returned to decorate as Disposable
	function fixSubscriber(subscriber){return subscriber && isFunction(subscriber.dispose)?subscriber:isFunction(subscriber)?disposableCreate(subscriber):disposableEmpty;}function setDisposable(s,state){var ado=state[0],subscribe=state[1];var sub=tryCatch(subscribe)(ado);if(sub === errorObj){if(!ado.fail(errorObj.e)){return thrower(errorObj.e);}}ado.setDisposable(fixSubscriber(sub));}function AnonymousObservable(subscribe,parent){this.source = parent;function s(observer){var ado=new AutoDetachObserver(observer),state=[ado,subscribe];if(currentThreadScheduler.scheduleRequired()){currentThreadScheduler.scheduleWithState(state,setDisposable);}else {setDisposable(null,state);}return ado;}__super__.call(this,s);}return AnonymousObservable;})(Observable);var AutoDetachObserver=(function(__super__){inherits(AutoDetachObserver,__super__);function AutoDetachObserver(observer){__super__.call(this);this.observer = observer;this.m = new SingleAssignmentDisposable();}var AutoDetachObserverPrototype=AutoDetachObserver.prototype;AutoDetachObserverPrototype.next = function(value){var result=tryCatch(this.observer.onNext).call(this.observer,value);if(result === errorObj){this.dispose();thrower(result.e);}};AutoDetachObserverPrototype.error = function(err){var result=tryCatch(this.observer.onError).call(this.observer,err);this.dispose();result === errorObj && thrower(result.e);};AutoDetachObserverPrototype.completed = function(){var result=tryCatch(this.observer.onCompleted).call(this.observer);this.dispose();result === errorObj && thrower(result.e);};AutoDetachObserverPrototype.setDisposable = function(value){this.m.setDisposable(value);};AutoDetachObserverPrototype.getDisposable = function(){return this.m.getDisposable();};AutoDetachObserverPrototype.dispose = function(){__super__.prototype.dispose.call(this);this.m.dispose();};return AutoDetachObserver;})(AbstractObserver);var GroupedObservable=(function(__super__){inherits(GroupedObservable,__super__);function subscribe(observer){return this.underlyingObservable.subscribe(observer);}function GroupedObservable(key,underlyingObservable,mergedDisposable){__super__.call(this,subscribe);this.key = key;this.underlyingObservable = !mergedDisposable?underlyingObservable:new AnonymousObservable(function(observer){return new CompositeDisposable(mergedDisposable.getDisposable(),underlyingObservable.subscribe(observer));});}return GroupedObservable;})(Observable); /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */var Subject=Rx.Subject = (function(__super__){function subscribe(observer){checkDisposed(this);if(!this.isStopped){this.observers.push(observer);return new InnerSubscription(this,observer);}if(this.hasError){observer.onError(this.error);return disposableEmpty;}observer.onCompleted();return disposableEmpty;}inherits(Subject,__super__); /**
	     * Creates a subject.
	     */function Subject(){__super__.call(this,subscribe);this.isDisposed = false,this.isStopped = false,this.observers = [];this.hasError = false;}addProperties(Subject.prototype,Observer.prototype,{ /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */hasObservers:function hasObservers(){return this.observers.length > 0;}, /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */onCompleted:function onCompleted(){checkDisposed(this);if(!this.isStopped){this.isStopped = true;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onCompleted();}this.observers.length = 0;}}, /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */onError:function onError(error){checkDisposed(this);if(!this.isStopped){this.isStopped = true;this.error = error;this.hasError = true;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onError(error);}this.observers.length = 0;}}, /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */onNext:function onNext(value){checkDisposed(this);if(!this.isStopped){for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onNext(value);}}}, /**
	       * Unsubscribe all observers and release resources.
	       */dispose:function dispose(){this.isDisposed = true;this.observers = null;}}); /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */Subject.create = function(observer,observable){return new AnonymousSubject(observer,observable);};return Subject;})(Observable); /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */var AsyncSubject=Rx.AsyncSubject = (function(__super__){function subscribe(observer){checkDisposed(this);if(!this.isStopped){this.observers.push(observer);return new InnerSubscription(this,observer);}if(this.hasError){observer.onError(this.error);}else if(this.hasValue){observer.onNext(this.value);observer.onCompleted();}else {observer.onCompleted();}return disposableEmpty;}inherits(AsyncSubject,__super__); /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */function AsyncSubject(){__super__.call(this,subscribe);this.isDisposed = false;this.isStopped = false;this.hasValue = false;this.observers = [];this.hasError = false;}addProperties(AsyncSubject.prototype,Observer,{ /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */hasObservers:function hasObservers(){checkDisposed(this);return this.observers.length > 0;}, /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */onCompleted:function onCompleted(){var i,len;checkDisposed(this);if(!this.isStopped){this.isStopped = true;var os=cloneArray(this.observers),len=os.length;if(this.hasValue){for(i = 0;i < len;i++) {var o=os[i];o.onNext(this.value);o.onCompleted();}}else {for(i = 0;i < len;i++) {os[i].onCompleted();}}this.observers.length = 0;}}, /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */onError:function onError(error){checkDisposed(this);if(!this.isStopped){this.isStopped = true;this.hasError = true;this.error = error;for(var i=0,os=cloneArray(this.observers),len=os.length;i < len;i++) {os[i].onError(error);}this.observers.length = 0;}}, /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */onNext:function onNext(value){checkDisposed(this);if(this.isStopped){return;}this.value = value;this.hasValue = true;}, /**
	       * Unsubscribe all observers and release resources.
	       */dispose:function dispose(){this.isDisposed = true;this.observers = null;this.exception = null;this.value = null;}});return AsyncSubject;})(Observable);var AnonymousSubject=Rx.AnonymousSubject = (function(__super__){inherits(AnonymousSubject,__super__);function subscribe(observer){return this.observable.subscribe(observer);}function AnonymousSubject(observer,observable){this.observer = observer;this.observable = observable;__super__.call(this,subscribe);}addProperties(AnonymousSubject.prototype,Observer.prototype,{onCompleted:function onCompleted(){this.observer.onCompleted();},onError:function onError(error){this.observer.onError(error);},onNext:function onNext(value){this.observer.onNext(value);}});return AnonymousSubject;})(Observable); /**
	  * Used to pause and resume streams.
	  */Rx.Pauser = (function(__super__){inherits(Pauser,__super__);function Pauser(){__super__.call(this);} /**
	     * Pauses the underlying sequence.
	     */Pauser.prototype.pause = function(){this.onNext(false);}; /**
	    * Resumes the underlying sequence.
	    */Pauser.prototype.resume = function(){this.onNext(true);};return Pauser;})(Subject);if(true){root.Rx = Rx;!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return Rx;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if(freeExports && freeModule){ // in Node.js or RingoJS
	if(moduleExports){(freeModule.exports = Rx).Rx = Rx;}else {freeExports.Rx = Rx;}}else { // in a browser or Rhino
	root.Rx = Rx;} // All code before this point will be filtered from stack traces.
	var rEndingLine=captureLine();}).call(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(21)(module), (function() { return this; }()), __webpack_require__(22)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	// shim for using process in browser

	'use strict';

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  OpaqueToken: { get: function get() {
	      return OpaqueToken;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var OpaqueToken = function OpaqueToken(desc) {
	  assert.argumentTypes(desc, assert.type.string);
	  this._desc = "Token(" + desc + ")";
	};
	$traceurRuntime.createClass(OpaqueToken, { toString: function toString() {
	    return this._desc;
	  } }, {});
	Object.defineProperty(OpaqueToken, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=opaque_token.js.map

	//# sourceMappingURL=./opaque_token.map

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Parser: { get: function get() {
	      return Parser;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__lexer__, $__angular2_47_src_47_reflection_47_reflection__, $__ast__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__2.int,
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    StringWrapper = $__2.StringWrapper,
	    RegExpWrapper = $__2.RegExpWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__3.ListWrapper,
	    List = $__3.List;
	var $__4 = ($__lexer__ = __webpack_require__(8), $__lexer__ && $__lexer__.__esModule && $__lexer__ || { "default": $__lexer__ }),
	    Lexer = $__4.Lexer,
	    EOF = $__4.EOF,
	    Token = $__4.Token,
	    $PERIOD = $__4.$PERIOD,
	    $COLON = $__4.$COLON,
	    $SEMICOLON = $__4.$SEMICOLON,
	    $LBRACKET = $__4.$LBRACKET,
	    $RBRACKET = $__4.$RBRACKET,
	    $COMMA = $__4.$COMMA,
	    $LBRACE = $__4.$LBRACE,
	    $RBRACE = $__4.$RBRACE,
	    $LPAREN = $__4.$LPAREN,
	    $RPAREN = $__4.$RPAREN;
	var $__5 = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }),
	    reflector = $__5.reflector,
	    Reflector = $__5.Reflector;
	var $__6 = ($__ast__ = __webpack_require__(5), $__ast__ && $__ast__.__esModule && $__ast__ || { "default": $__ast__ }),
	    AST = $__6.AST,
	    EmptyExpr = $__6.EmptyExpr,
	    ImplicitReceiver = $__6.ImplicitReceiver,
	    AccessMember = $__6.AccessMember,
	    LiteralPrimitive = $__6.LiteralPrimitive,
	    Expression = $__6.Expression,
	    Binary = $__6.Binary,
	    PrefixNot = $__6.PrefixNot,
	    Conditional = $__6.Conditional,
	    Pipe = $__6.Pipe,
	    Assignment = $__6.Assignment,
	    Chain = $__6.Chain,
	    KeyedAccess = $__6.KeyedAccess,
	    LiteralArray = $__6.LiteralArray,
	    LiteralMap = $__6.LiteralMap,
	    Interpolation = $__6.Interpolation,
	    MethodCall = $__6.MethodCall,
	    FunctionCall = $__6.FunctionCall,
	    TemplateBindings = $__6.TemplateBindings,
	    TemplateBinding = $__6.TemplateBinding,
	    ASTWithSource = $__6.ASTWithSource;
	var _implicitReceiver = new ImplicitReceiver();
	var INTERPOLATION_REGEXP = RegExpWrapper.create('\\{\\{(.*?)\\}\\}');
	var QUOTE_REGEXP = RegExpWrapper.create("'");
	var Parser = function Parser(lexer) {
	  var providedReflector = arguments[1] !== void 0 ? arguments[1] : null;
	  assert.argumentTypes(lexer, Lexer, providedReflector, Reflector);
	  this._lexer = lexer;
	  this._reflector = isPresent(providedReflector) ? providedReflector : reflector;
	};
	$traceurRuntime.createClass(Parser, {
	  parseAction: function parseAction(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.any);
	    var tokens = this._lexer.tokenize(input);
	    var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	    return assert.returnType(new ASTWithSource(ast, input, location), ASTWithSource);
	  },
	  parseBinding: function parseBinding(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.any);
	    var tokens = this._lexer.tokenize(input);
	    var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	    return assert.returnType(new ASTWithSource(ast, input, location), ASTWithSource);
	  },
	  addPipes: function addPipes(bindingAst, pipes) {
	    if (ListWrapper.isEmpty(pipes)) return assert.returnType(bindingAst, ASTWithSource);
	    var res = ListWrapper.reduce(pipes, function (result, currentPipeName) {
	      return new Pipe(result, currentPipeName, [], false);
	    }, bindingAst.ast);
	    return assert.returnType(new ASTWithSource(res, bindingAst.source, bindingAst.location), ASTWithSource);
	  },
	  parseTemplateBindings: function parseTemplateBindings(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.any);
	    var tokens = this._lexer.tokenize(input);
	    return assert.returnType(new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings(), assert.genericType(List, TemplateBinding));
	  },
	  parseInterpolation: function parseInterpolation(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.any);
	    var parts = StringWrapper.split(input, INTERPOLATION_REGEXP);
	    if (parts.length <= 1) {
	      return assert.returnType(null, ASTWithSource);
	    }
	    var strings = [];
	    var expressions = [];
	    for (var i = 0; i < parts.length; i++) {
	      var part = parts[i];
	      if (i % 2 === 0) {
	        ListWrapper.push(strings, part);
	      } else {
	        var tokens = this._lexer.tokenize(part);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	        ListWrapper.push(expressions, ast);
	      }
	    }
	    return assert.returnType(new ASTWithSource(new Interpolation(strings, expressions), input, location), ASTWithSource);
	  },
	  wrapLiteralPrimitive: function wrapLiteralPrimitive(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.any);
	    return assert.returnType(new ASTWithSource(new LiteralPrimitive(input), input, location), ASTWithSource);
	  }
	}, {});
	Object.defineProperty(Parser, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(Parser, "parameters", { get: function get() {
	    return [[Lexer], [Reflector]];
	  } });
	Object.defineProperty(Parser.prototype.parseAction, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.parseBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.addPipes, "parameters", { get: function get() {
	    return [[ASTWithSource], [assert.genericType(List, String)]];
	  } });
	Object.defineProperty(Parser.prototype.parseTemplateBindings, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.parseInterpolation, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.wrapLiteralPrimitive, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	var _ParseAST = function _ParseAST(input, location, tokens, reflector, parseAction) {
	  assert.argumentTypes(input, assert.type.string, location, assert.type.any, tokens, List, reflector, Reflector, parseAction, assert.type.boolean);
	  this.input = input;
	  this.location = location;
	  this.tokens = tokens;
	  this.index = 0;
	  this.reflector = reflector;
	  this.parseAction = parseAction;
	};
	$traceurRuntime.createClass(_ParseAST, Object.defineProperties({
	  peek: function peek(offset) {
	    assert.argumentTypes(offset, int);
	    var i = this.index + offset;
	    return assert.returnType(i < this.tokens.length ? this.tokens[i] : EOF, Token);
	  },

	  advance: function advance() {
	    this.index++;
	  },
	  optionalCharacter: function optionalCharacter(code) {
	    assert.argumentTypes(code, int);
	    if (this.next.isCharacter(code)) {
	      this.advance();
	      return assert.returnType(true, assert.type.boolean);
	    } else {
	      return assert.returnType(false, assert.type.boolean);
	    }
	  },
	  optionalKeywordVar: function optionalKeywordVar() {
	    if (this.peekKeywordVar()) {
	      this.advance();
	      return assert.returnType(true, assert.type.boolean);
	    } else {
	      return assert.returnType(false, assert.type.boolean);
	    }
	  },
	  peekKeywordVar: function peekKeywordVar() {
	    return assert.returnType(this.next.isKeywordVar() || this.next.isOperator('#'), assert.type.boolean);
	  },
	  expectCharacter: function expectCharacter(code) {
	    assert.argumentTypes(code, int);
	    if (this.optionalCharacter(code)) return;
	    this.error("Missing expected " + StringWrapper.fromCharCode(code));
	  },
	  optionalOperator: function optionalOperator(op) {
	    assert.argumentTypes(op, assert.type.string);
	    if (this.next.isOperator(op)) {
	      this.advance();
	      return assert.returnType(true, assert.type.boolean);
	    } else {
	      return assert.returnType(false, assert.type.boolean);
	    }
	  },
	  expectOperator: function expectOperator(operator) {
	    assert.argumentTypes(operator, assert.type.string);
	    if (this.optionalOperator(operator)) return;
	    this.error("Missing expected operator " + operator);
	  },
	  expectIdentifierOrKeyword: function expectIdentifierOrKeyword() {
	    var n = this.next;
	    if (!n.isIdentifier() && !n.isKeyword()) {
	      this.error("Unexpected token " + n + ", expected identifier or keyword");
	    }
	    this.advance();
	    return assert.returnType(n.toString(), assert.type.string);
	  },
	  expectIdentifierOrKeywordOrString: function expectIdentifierOrKeywordOrString() {
	    var n = this.next;
	    if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	      this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	    }
	    this.advance();
	    return assert.returnType(n.toString(), assert.type.string);
	  },
	  parseChain: function parseChain() {
	    var exprs = [];
	    while (this.index < this.tokens.length) {
	      var expr = this.parsePipe();
	      ListWrapper.push(exprs, expr);
	      if (this.optionalCharacter($SEMICOLON)) {
	        if (!this.parseAction) {
	          this.error("Binding expression cannot contain chained expression");
	        }
	        while (this.optionalCharacter($SEMICOLON)) {}
	      } else if (this.index < this.tokens.length) {
	        this.error("Unexpected token '" + this.next + "'");
	      }
	    }
	    if (exprs.length == 0) return assert.returnType(new EmptyExpr(), AST);
	    if (exprs.length == 1) return assert.returnType(exprs[0], AST);
	    return assert.returnType(new Chain(exprs), AST);
	  },
	  parsePipe: function parsePipe() {
	    var result = this.parseExpression();
	    while (this.optionalOperator("|")) {
	      if (this.parseAction) {
	        this.error("Cannot have a pipe in an action expression");
	      }
	      var name = this.expectIdentifierOrKeyword();
	      var args = ListWrapper.create();
	      while (this.optionalCharacter($COLON)) {
	        ListWrapper.push(args, this.parseExpression());
	      }
	      result = new Pipe(result, name, args, true);
	    }
	    return result;
	  },
	  parseExpression: function parseExpression() {
	    var start = this.inputIndex;
	    var result = this.parseConditional();
	    while (this.next.isOperator('=')) {
	      if (!result.isAssignable) {
	        var end = this.inputIndex;
	        var expression = this.input.substring(start, end);
	        this.error("Expression " + expression + " is not assignable");
	      }
	      if (!this.parseAction) {
	        this.error("Binding expression cannot contain assignments");
	      }
	      this.expectOperator('=');
	      result = new Assignment(result, this.parseConditional());
	    }
	    return result;
	  },
	  parseConditional: function parseConditional() {
	    var start = this.inputIndex;
	    var result = this.parseLogicalOr();
	    if (this.optionalOperator('?')) {
	      var yes = this.parseExpression();
	      if (!this.optionalCharacter($COLON)) {
	        var end = this.inputIndex;
	        var expression = this.input.substring(start, end);
	        this.error("Conditional expression " + expression + " requires all 3 expressions");
	      }
	      var no = this.parseExpression();
	      return new Conditional(result, yes, no);
	    } else {
	      return result;
	    }
	  },
	  parseLogicalOr: function parseLogicalOr() {
	    var result = this.parseLogicalAnd();
	    while (this.optionalOperator('||')) {
	      result = new Binary('||', result, this.parseLogicalAnd());
	    }
	    return result;
	  },
	  parseLogicalAnd: function parseLogicalAnd() {
	    var result = this.parseEquality();
	    while (this.optionalOperator('&&')) {
	      result = new Binary('&&', result, this.parseEquality());
	    }
	    return result;
	  },
	  parseEquality: function parseEquality() {
	    var result = this.parseRelational();
	    while (true) {
	      if (this.optionalOperator('==')) {
	        result = new Binary('==', result, this.parseRelational());
	      } else if (this.optionalOperator('!=')) {
	        result = new Binary('!=', result, this.parseRelational());
	      } else {
	        return result;
	      }
	    }
	  },
	  parseRelational: function parseRelational() {
	    var result = this.parseAdditive();
	    while (true) {
	      if (this.optionalOperator('<')) {
	        result = new Binary('<', result, this.parseAdditive());
	      } else if (this.optionalOperator('>')) {
	        result = new Binary('>', result, this.parseAdditive());
	      } else if (this.optionalOperator('<=')) {
	        result = new Binary('<=', result, this.parseAdditive());
	      } else if (this.optionalOperator('>=')) {
	        result = new Binary('>=', result, this.parseAdditive());
	      } else {
	        return result;
	      }
	    }
	  },
	  parseAdditive: function parseAdditive() {
	    var result = this.parseMultiplicative();
	    while (true) {
	      if (this.optionalOperator('+')) {
	        result = new Binary('+', result, this.parseMultiplicative());
	      } else if (this.optionalOperator('-')) {
	        result = new Binary('-', result, this.parseMultiplicative());
	      } else {
	        return result;
	      }
	    }
	  },
	  parseMultiplicative: function parseMultiplicative() {
	    var result = this.parsePrefix();
	    while (true) {
	      if (this.optionalOperator('*')) {
	        result = new Binary('*', result, this.parsePrefix());
	      } else if (this.optionalOperator('%')) {
	        result = new Binary('%', result, this.parsePrefix());
	      } else if (this.optionalOperator('/')) {
	        result = new Binary('/', result, this.parsePrefix());
	      } else {
	        return result;
	      }
	    }
	  },
	  parsePrefix: function parsePrefix() {
	    if (this.optionalOperator('+')) {
	      return this.parsePrefix();
	    } else if (this.optionalOperator('-')) {
	      return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());
	    } else if (this.optionalOperator('!')) {
	      return new PrefixNot(this.parsePrefix());
	    } else {
	      return this.parseCallChain();
	    }
	  },
	  parseCallChain: function parseCallChain() {
	    var result = this.parsePrimary();
	    while (true) {
	      if (this.optionalCharacter($PERIOD)) {
	        result = this.parseAccessMemberOrMethodCall(result);
	      } else if (this.optionalCharacter($LBRACKET)) {
	        var key = this.parseExpression();
	        this.expectCharacter($RBRACKET);
	        result = new KeyedAccess(result, key);
	      } else if (this.optionalCharacter($LPAREN)) {
	        var args = this.parseCallArguments();
	        this.expectCharacter($RPAREN);
	        result = new FunctionCall(result, args);
	      } else {
	        return assert.returnType(result, AST);
	      }
	    }
	  },
	  parsePrimary: function parsePrimary() {
	    if (this.optionalCharacter($LPAREN)) {
	      var result = this.parsePipe();
	      this.expectCharacter($RPAREN);
	      return result;
	    } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	      this.advance();
	      return new LiteralPrimitive(null);
	    } else if (this.next.isKeywordTrue()) {
	      this.advance();
	      return new LiteralPrimitive(true);
	    } else if (this.next.isKeywordFalse()) {
	      this.advance();
	      return new LiteralPrimitive(false);
	    } else if (this.optionalCharacter($LBRACKET)) {
	      var elements = this.parseExpressionList($RBRACKET);
	      this.expectCharacter($RBRACKET);
	      return new LiteralArray(elements);
	    } else if (this.next.isCharacter($LBRACE)) {
	      return this.parseLiteralMap();
	    } else if (this.next.isIdentifier()) {
	      return this.parseAccessMemberOrMethodCall(_implicitReceiver);
	    } else if (this.next.isNumber()) {
	      var value = this.next.toNumber();
	      this.advance();
	      return new LiteralPrimitive(value);
	    } else if (this.next.isString()) {
	      var value = this.next.toString();
	      this.advance();
	      return new LiteralPrimitive(value);
	    } else if (this.index >= this.tokens.length) {
	      this.error("Unexpected end of expression: " + this.input);
	    } else {
	      this.error("Unexpected token " + this.next);
	    }
	  },
	  parseExpressionList: function parseExpressionList(terminator) {
	    assert.argumentTypes(terminator, int);
	    var result = [];
	    if (!this.next.isCharacter(terminator)) {
	      do {
	        ListWrapper.push(result, this.parseExpression());
	      } while (this.optionalCharacter($COMMA));
	    }
	    return assert.returnType(result, List);
	  },
	  parseLiteralMap: function parseLiteralMap() {
	    var keys = [];
	    var values = [];
	    this.expectCharacter($LBRACE);
	    if (!this.optionalCharacter($RBRACE)) {
	      do {
	        var key = this.expectIdentifierOrKeywordOrString();
	        ListWrapper.push(keys, key);
	        this.expectCharacter($COLON);
	        ListWrapper.push(values, this.parseExpression());
	      } while (this.optionalCharacter($COMMA));
	      this.expectCharacter($RBRACE);
	    }
	    return new LiteralMap(keys, values);
	  },
	  parseAccessMemberOrMethodCall: function parseAccessMemberOrMethodCall(receiver) {
	    var id = this.expectIdentifierOrKeyword();
	    if (this.optionalCharacter($LPAREN)) {
	      var args = this.parseCallArguments();
	      this.expectCharacter($RPAREN);
	      var fn = this.reflector.method(id);
	      return assert.returnType(new MethodCall(receiver, id, fn, args), AST);
	    } else {
	      var getter = this.reflector.getter(id);
	      var setter = this.reflector.setter(id);
	      return assert.returnType(new AccessMember(receiver, id, getter, setter), AST);
	    }
	  },
	  parseCallArguments: function parseCallArguments() {
	    if (this.next.isCharacter($RPAREN)) return [];
	    var positionals = [];
	    do {
	      ListWrapper.push(positionals, this.parseExpression());
	    } while (this.optionalCharacter($COMMA));
	    return positionals;
	  },
	  expectTemplateBindingKey: function expectTemplateBindingKey() {
	    var result = '';
	    var operatorFound = false;
	    do {
	      result += this.expectIdentifierOrKeywordOrString();
	      operatorFound = this.optionalOperator('-');
	      if (operatorFound) {
	        result += '-';
	      }
	    } while (operatorFound);
	    return result.toString();
	  },
	  parseTemplateBindings: function parseTemplateBindings() {
	    var bindings = [];
	    while (this.index < this.tokens.length) {
	      var keyIsVar = assert.type(this.optionalKeywordVar(), assert.type.boolean);
	      var key = this.expectTemplateBindingKey();
	      this.optionalCharacter($COLON);
	      var name = null;
	      var expression = null;
	      if (this.next !== EOF) {
	        if (keyIsVar) {
	          if (this.optionalOperator("=")) {
	            name = this.expectTemplateBindingKey();
	          } else {
	            name = '\$implicit';
	          }
	        } else if (!this.peekKeywordVar()) {
	          var start = this.inputIndex;
	          var ast = this.parsePipe();
	          var source = this.input.substring(start, this.inputIndex);
	          expression = new ASTWithSource(ast, source, this.location);
	        }
	      }
	      ListWrapper.push(bindings, new TemplateBinding(key, keyIsVar, name, expression));
	      if (!this.optionalCharacter($SEMICOLON)) {
	        this.optionalCharacter($COMMA);
	      }
	      ;
	    }
	    return bindings;
	  },
	  error: function error(message) {
	    var index = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(message, assert.type.string, index, int);
	    if (isBlank(index)) index = this.index;
	    var location = index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
	    throw new BaseException("Parser Error: " + message + " " + location + " [" + this.input + "] in " + this.location);
	  }
	}, {
	  next: {
	    get: function get() {
	      return assert.returnType(this.peek(0), Token);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  inputIndex: {
	    get: function get() {
	      return assert.returnType(this.index < this.tokens.length ? this.next.index : this.input.length, int);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(_ParseAST, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any], [List], [Reflector], [assert.type.boolean]];
	  } });
	Object.defineProperty(_ParseAST.prototype.peek, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.optionalCharacter, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.expectCharacter, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.optionalOperator, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(_ParseAST.prototype.expectOperator, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(_ParseAST.prototype.parseExpressionList, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.error, "parameters", { get: function get() {
	    return [[assert.type.string], [int]];
	  } });
	//# sourceMappingURL=parser.js.map

	//# sourceMappingURL=./parser.map

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Locals: { get: function get() {
	      return Locals;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    BaseException = $__1.BaseException;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper;
	var Locals = function Locals(parent, current) {
	  assert.argumentTypes(parent, $Locals, current, Map);
	  this.parent = parent;
	  this.current = current;
	};
	var $Locals = Locals;
	$traceurRuntime.createClass(Locals, {
	  contains: function contains(name) {
	    assert.argumentTypes(name, assert.type.string);
	    if (MapWrapper.contains(this.current, name)) {
	      return assert.returnType(true, assert.type.boolean);
	    }
	    if (isPresent(this.parent)) {
	      return assert.returnType(this.parent.contains(name), assert.type.boolean);
	    }
	    return assert.returnType(false, assert.type.boolean);
	  },
	  get: function get(name) {
	    assert.argumentTypes(name, assert.type.string);
	    if (MapWrapper.contains(this.current, name)) {
	      return MapWrapper.get(this.current, name);
	    }
	    if (isPresent(this.parent)) {
	      return this.parent.get(name);
	    }
	    throw new BaseException("Cannot find '" + name + "'");
	  },
	  set: function set(name, value) {
	    assert.argumentTypes(name, assert.type.string, value, assert.type.any);
	    if (MapWrapper.contains(this.current, name)) {
	      MapWrapper.set(this.current, name, value);
	    } else {
	      throw new BaseException('Setting of new keys post-construction is not supported.');
	    }
	  },
	  clearValues: function clearValues() {
	    MapWrapper.clearValues(this.current);
	  }
	}, {});
	Object.defineProperty(Locals, "parameters", { get: function get() {
	    return [[Locals], [Map]];
	  } });
	Object.defineProperty(Locals.prototype.contains, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(Locals.prototype.get, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(Locals.prototype.set, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	//# sourceMappingURL=locals.js.map

	//# sourceMappingURL=./locals.map

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ExpressionChangedAfterItHasBeenChecked: { get: function get() {
	      return ExpressionChangedAfterItHasBeenChecked;
	    } },
	  ChangeDetectionError: { get: function get() {
	      return ChangeDetectionError;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__proto_95_record__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var ProtoRecord = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }).ProtoRecord;
	var ExpressionChangedAfterItHasBeenChecked = function ExpressionChangedAfterItHasBeenChecked(proto, change) {
	  assert.argumentTypes(proto, ProtoRecord, change, assert.type.any);
	  $traceurRuntime.superConstructor($ExpressionChangedAfterItHasBeenChecked).call(this);
	  this.message = "Expression '" + proto.expressionAsString + "' has changed after it was checked. " + ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'");
	};
	var $ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
	$traceurRuntime.createClass(ExpressionChangedAfterItHasBeenChecked, { toString: function toString() {
	    return assert.returnType(this.message, assert.type.string);
	  } }, {}, Error);
	Object.defineProperty(ExpressionChangedAfterItHasBeenChecked, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.any]];
	  } });
	var ChangeDetectionError = function ChangeDetectionError(proto, originalException) {
	  assert.argumentTypes(proto, ProtoRecord, originalException, assert.type.any);
	  $traceurRuntime.superConstructor($ChangeDetectionError).call(this);
	  this.originalException = originalException;
	  this.location = proto.expressionAsString;
	  this.message = this.originalException + " in [" + this.location + "]";
	};
	var $ChangeDetectionError = ChangeDetectionError;
	$traceurRuntime.createClass(ChangeDetectionError, { toString: function toString() {
	    return assert.returnType(this.message, assert.type.string);
	  } }, {}, Error);
	Object.defineProperty(ChangeDetectionError, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.any]];
	  } });
	//# sourceMappingURL=exceptions.js.map

	//# sourceMappingURL=./exceptions.map

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  RECORD_TYPE_SELF: { get: function get() {
	      return RECORD_TYPE_SELF;
	    } },
	  RECORD_TYPE_CONST: { get: function get() {
	      return RECORD_TYPE_CONST;
	    } },
	  RECORD_TYPE_PRIMITIVE_OP: { get: function get() {
	      return RECORD_TYPE_PRIMITIVE_OP;
	    } },
	  RECORD_TYPE_PROPERTY: { get: function get() {
	      return RECORD_TYPE_PROPERTY;
	    } },
	  RECORD_TYPE_LOCAL: { get: function get() {
	      return RECORD_TYPE_LOCAL;
	    } },
	  RECORD_TYPE_INVOKE_METHOD: { get: function get() {
	      return RECORD_TYPE_INVOKE_METHOD;
	    } },
	  RECORD_TYPE_INVOKE_CLOSURE: { get: function get() {
	      return RECORD_TYPE_INVOKE_CLOSURE;
	    } },
	  RECORD_TYPE_KEYED_ACCESS: { get: function get() {
	      return RECORD_TYPE_KEYED_ACCESS;
	    } },
	  RECORD_TYPE_PIPE: { get: function get() {
	      return RECORD_TYPE_PIPE;
	    } },
	  RECORD_TYPE_BINDING_PIPE: { get: function get() {
	      return RECORD_TYPE_BINDING_PIPE;
	    } },
	  RECORD_TYPE_INTERPOLATE: { get: function get() {
	      return RECORD_TYPE_INTERPOLATE;
	    } },
	  ProtoRecord: { get: function get() {
	      return ProtoRecord;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var List = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).List;
	var RECORD_TYPE_SELF = 0;
	var RECORD_TYPE_CONST = 1;
	var RECORD_TYPE_PRIMITIVE_OP = 2;
	var RECORD_TYPE_PROPERTY = 3;
	var RECORD_TYPE_LOCAL = 4;
	var RECORD_TYPE_INVOKE_METHOD = 5;
	var RECORD_TYPE_INVOKE_CLOSURE = 6;
	var RECORD_TYPE_KEYED_ACCESS = 7;
	var RECORD_TYPE_PIPE = 8;
	var RECORD_TYPE_BINDING_PIPE = 9;
	var RECORD_TYPE_INTERPOLATE = 10;
	var ProtoRecord = function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, selfIndex, bindingMemento, directiveMemento, expressionAsString, lastInBinding, lastInDirective) {
	  assert.argumentTypes(mode, assert.type.number, name, assert.type.string, funcOrValue, assert.type.any, args, List, fixedArgs, List, contextIndex, assert.type.number, selfIndex, assert.type.number, bindingMemento, assert.type.any, directiveMemento, assert.type.any, expressionAsString, assert.type.string, lastInBinding, assert.type.boolean, lastInDirective, assert.type.boolean);
	  this.mode = mode;
	  this.name = name;
	  this.funcOrValue = funcOrValue;
	  this.args = args;
	  this.fixedArgs = fixedArgs;
	  this.contextIndex = contextIndex;
	  this.selfIndex = selfIndex;
	  this.bindingMemento = bindingMemento;
	  this.directiveMemento = directiveMemento;
	  this.lastInBinding = lastInBinding;
	  this.lastInDirective = lastInDirective;
	  this.expressionAsString = expressionAsString;
	};
	$traceurRuntime.createClass(ProtoRecord, { isPureFunction: function isPureFunction() {
	    return assert.returnType(this.mode === RECORD_TYPE_INTERPOLATE || this.mode === RECORD_TYPE_PRIMITIVE_OP, assert.type.boolean);
	  } }, {});
	Object.defineProperty(ProtoRecord, "parameters", { get: function get() {
	    return [[assert.type.number], [assert.type.string], [], [List], [List], [assert.type.number], [assert.type.number], [assert.type.any], [assert.type.any], [assert.type.string], [assert.type.boolean], [assert.type.boolean]];
	  } });
	//# sourceMappingURL=proto_record.js.map

	//# sourceMappingURL=./proto_record.map

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ChangeRecord: { get: function get() {
	      return ChangeRecord;
	    } },
	  CHECK_ONCE: { get: function get() {
	      return CHECK_ONCE;
	    } },
	  CHECKED: { get: function get() {
	      return CHECKED;
	    } },
	  CHECK_ALWAYS: { get: function get() {
	      return CHECK_ALWAYS;
	    } },
	  DETACHED: { get: function get() {
	      return DETACHED;
	    } },
	  ChangeDispatcher: { get: function get() {
	      return ChangeDispatcher;
	    } },
	  ChangeDetector: { get: function get() {
	      return ChangeDetector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__parser_47_locals__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var List = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).List;
	var Locals = ($__parser_47_locals__ = __webpack_require__(25), $__parser_47_locals__ && $__parser_47_locals__.__esModule && $__parser_47_locals__ || { "default": $__parser_47_locals__ }).Locals;
	var ChangeRecord = function ChangeRecord(bindingMemento, change) {
	  this.bindingMemento = bindingMemento;
	  this.change = change;
	};
	$traceurRuntime.createClass(ChangeRecord, Object.defineProperties({}, {
	  currentValue: {
	    get: function get() {
	      return this.change.currentValue;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  previousValue: {
	    get: function get() {
	      return this.change.previousValue;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	var CHECK_ONCE = "CHECK_ONCE";
	var CHECKED = "CHECKED";
	var CHECK_ALWAYS = "ALWAYS_CHECK";
	var DETACHED = "DETACHED";
	var ChangeDispatcher = function ChangeDispatcher() {
	  ;
	};
	$traceurRuntime.createClass(ChangeDispatcher, { onRecordChange: function onRecordChange(directiveMemento, records) {
	    assert.argumentTypes(directiveMemento, assert.type.any, records, assert.genericType(List, ChangeRecord));
	  } }, {});
	Object.defineProperty(ChangeDispatcher.prototype.onRecordChange, "parameters", { get: function get() {
	    return [[], [assert.genericType(List, ChangeRecord)]];
	  } });
	var ChangeDetector = function ChangeDetector() {
	  ;
	};
	var $ChangeDetector = ChangeDetector;
	$traceurRuntime.createClass(ChangeDetector, {
	  addChild: function addChild(cd) {
	    assert.argumentTypes(cd, $ChangeDetector);
	  },
	  removeChild: function removeChild(cd) {
	    assert.argumentTypes(cd, $ChangeDetector);
	  },
	  remove: function remove() {},
	  hydrate: function hydrate(context, locals) {
	    assert.argumentTypes(context, assert.type.any, locals, Locals);
	  },
	  dehydrate: function dehydrate() {},
	  markPathToRootAsCheckOnce: function markPathToRootAsCheckOnce() {},
	  detectChanges: function detectChanges() {},
	  checkNoChanges: function checkNoChanges() {}
	}, {});
	Object.defineProperty(ChangeDetector.prototype.addChild, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.removeChild, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.hydrate, "parameters", { get: function get() {
	    return [[assert.type.any], [Locals]];
	  } });
	//# sourceMappingURL=interfaces.js.map

	//# sourceMappingURL=./interfaces.map

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ProtoChangeDetector: { get: function get() {
	      return ProtoChangeDetector;
	    } },
	  BindingRecord: { get: function get() {
	      return BindingRecord;
	    } },
	  DynamicProtoChangeDetector: { get: function get() {
	      return DynamicProtoChangeDetector;
	    } },
	  JitProtoChangeDetector: { get: function get() {
	      return JitProtoChangeDetector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__parser_47_ast__, $__interfaces__, $__change_95_detection_95_util__, $__dynamic_95_change_95_detector__, $__change_95_detection_95_jit_95_generator__, $__pipes_47_pipe_95_registry__, $__coalesce__, $__proto_95_record__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    Type = $__1.Type,
	    isString = $__1.isString;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var $__3 = ($__parser_47_ast__ = __webpack_require__(5), $__parser_47_ast__ && $__parser_47_ast__.__esModule && $__parser_47_ast__ || { "default": $__parser_47_ast__ }),
	    AccessMember = $__3.AccessMember,
	    Assignment = $__3.Assignment,
	    AST = $__3.AST,
	    ASTWithSource = $__3.ASTWithSource,
	    AstVisitor = $__3.AstVisitor,
	    Binary = $__3.Binary,
	    Chain = $__3.Chain,
	    Conditional = $__3.Conditional,
	    Pipe = $__3.Pipe,
	    FunctionCall = $__3.FunctionCall,
	    ImplicitReceiver = $__3.ImplicitReceiver,
	    Interpolation = $__3.Interpolation,
	    KeyedAccess = $__3.KeyedAccess,
	    LiteralArray = $__3.LiteralArray,
	    LiteralMap = $__3.LiteralMap,
	    LiteralPrimitive = $__3.LiteralPrimitive,
	    MethodCall = $__3.MethodCall,
	    PrefixNot = $__3.PrefixNot;
	var $__4 = ($__interfaces__ = __webpack_require__(28), $__interfaces__ && $__interfaces__.__esModule && $__interfaces__ || { "default": $__interfaces__ }),
	    ChangeRecord = $__4.ChangeRecord,
	    ChangeDispatcher = $__4.ChangeDispatcher,
	    ChangeDetector = $__4.ChangeDetector;
	var ChangeDetectionUtil = ($__change_95_detection_95_util__ = __webpack_require__(30), $__change_95_detection_95_util__ && $__change_95_detection_95_util__.__esModule && $__change_95_detection_95_util__ || { "default": $__change_95_detection_95_util__ }).ChangeDetectionUtil;
	var DynamicChangeDetector = ($__dynamic_95_change_95_detector__ = __webpack_require__(32), $__dynamic_95_change_95_detector__ && $__dynamic_95_change_95_detector__.__esModule && $__dynamic_95_change_95_detector__ || { "default": $__dynamic_95_change_95_detector__ }).DynamicChangeDetector;
	var ChangeDetectorJITGenerator = ($__change_95_detection_95_jit_95_generator__ = __webpack_require__(36), $__change_95_detection_95_jit_95_generator__ && $__change_95_detection_95_jit_95_generator__.__esModule && $__change_95_detection_95_jit_95_generator__ || { "default": $__change_95_detection_95_jit_95_generator__ }).ChangeDetectorJITGenerator;
	var PipeRegistry = ($__pipes_47_pipe_95_registry__ = __webpack_require__(35), $__pipes_47_pipe_95_registry__ && $__pipes_47_pipe_95_registry__.__esModule && $__pipes_47_pipe_95_registry__ || { "default": $__pipes_47_pipe_95_registry__ }).PipeRegistry;
	var coalesce = ($__coalesce__ = __webpack_require__(37), $__coalesce__ && $__coalesce__.__esModule && $__coalesce__ || { "default": $__coalesce__ }).coalesce;
	var $__10 = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }),
	    ProtoRecord = $__10.ProtoRecord,
	    RECORD_TYPE_SELF = $__10.RECORD_TYPE_SELF,
	    RECORD_TYPE_PROPERTY = $__10.RECORD_TYPE_PROPERTY,
	    RECORD_TYPE_LOCAL = $__10.RECORD_TYPE_LOCAL,
	    RECORD_TYPE_INVOKE_METHOD = $__10.RECORD_TYPE_INVOKE_METHOD,
	    RECORD_TYPE_CONST = $__10.RECORD_TYPE_CONST,
	    RECORD_TYPE_INVOKE_CLOSURE = $__10.RECORD_TYPE_INVOKE_CLOSURE,
	    RECORD_TYPE_PRIMITIVE_OP = $__10.RECORD_TYPE_PRIMITIVE_OP,
	    RECORD_TYPE_KEYED_ACCESS = $__10.RECORD_TYPE_KEYED_ACCESS,
	    RECORD_TYPE_PIPE = $__10.RECORD_TYPE_PIPE,
	    RECORD_TYPE_BINDING_PIPE = $__10.RECORD_TYPE_BINDING_PIPE,
	    RECORD_TYPE_INTERPOLATE = $__10.RECORD_TYPE_INTERPOLATE;
	var ProtoChangeDetector = function ProtoChangeDetector() {
	  ;
	};
	$traceurRuntime.createClass(ProtoChangeDetector, {
	  addAst: function addAst(ast, bindingMemento) {
	    var directiveMemento = arguments[2] !== void 0 ? arguments[2] : null;
	    assert.argumentTypes(ast, AST, bindingMemento, assert.type.any, directiveMemento, assert.type.any);
	  },
	  instantiate: function instantiate(dispatcher, bindingRecords, variableBindings, directiveMemento) {
	    assert.argumentTypes(dispatcher, assert.type.any, bindingRecords, List, variableBindings, List, directiveMemento, List);
	    return assert.returnType(null, ChangeDetector);
	  }
	}, {});
	Object.defineProperty(ProtoChangeDetector.prototype.addAst, "parameters", { get: function get() {
	    return [[AST], [assert.type.any], [assert.type.any]];
	  } });
	Object.defineProperty(ProtoChangeDetector.prototype.instantiate, "parameters", { get: function get() {
	    return [[assert.type.any], [List], [List], [List]];
	  } });
	var BindingRecord = function BindingRecord(ast, bindingMemento, directiveMemento) {
	  assert.argumentTypes(ast, AST, bindingMemento, assert.type.any, directiveMemento, assert.type.any);
	  this.ast = ast;
	  this.bindingMemento = bindingMemento;
	  this.directiveMemento = directiveMemento;
	};
	$traceurRuntime.createClass(BindingRecord, {}, {});
	Object.defineProperty(BindingRecord, "parameters", { get: function get() {
	    return [[AST], [assert.type.any], [assert.type.any]];
	  } });
	var DynamicProtoChangeDetector = function DynamicProtoChangeDetector(pipeRegistry) {
	  assert.argumentTypes(pipeRegistry, PipeRegistry);
	  $traceurRuntime.superConstructor($DynamicProtoChangeDetector).call(this);
	  this._pipeRegistry = pipeRegistry;
	};
	var $DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	$traceurRuntime.createClass(DynamicProtoChangeDetector, {
	  instantiate: function instantiate(dispatcher, bindingRecords, variableBindings, directiveMementos) {
	    assert.argumentTypes(dispatcher, assert.type.any, bindingRecords, List, variableBindings, List, directiveMementos, List);
	    this._createRecordsIfNecessary(bindingRecords, variableBindings);
	    return new DynamicChangeDetector(dispatcher, this._pipeRegistry, this._records, directiveMementos);
	  },
	  _createRecordsIfNecessary: function _createRecordsIfNecessary(bindingRecords, variableBindings) {
	    assert.argumentTypes(bindingRecords, List, variableBindings, List);
	    if (isBlank(this._records)) {
	      var recordBuilder = new ProtoRecordBuilder();
	      ListWrapper.forEach(bindingRecords, function (r) {
	        recordBuilder.addAst(r.ast, r.bindingMemento, r.directiveMemento, variableBindings);
	      });
	      this._records = coalesce(recordBuilder.records);
	    }
	  }
	}, {}, ProtoChangeDetector);
	Object.defineProperty(DynamicProtoChangeDetector, "parameters", { get: function get() {
	    return [[PipeRegistry]];
	  } });
	Object.defineProperty(DynamicProtoChangeDetector.prototype.instantiate, "parameters", { get: function get() {
	    return [[assert.type.any], [List], [List], [List]];
	  } });
	Object.defineProperty(DynamicProtoChangeDetector.prototype._createRecordsIfNecessary, "parameters", { get: function get() {
	    return [[List], [List]];
	  } });
	var _jitProtoChangeDetectorClassCounter = assert.type(0, assert.type.number);
	var JitProtoChangeDetector = function JitProtoChangeDetector(pipeRegistry) {
	  $traceurRuntime.superConstructor($JitProtoChangeDetector).call(this);
	  this._pipeRegistry = pipeRegistry;
	  this._factory = null;
	};
	var $JitProtoChangeDetector = JitProtoChangeDetector;
	$traceurRuntime.createClass(JitProtoChangeDetector, {
	  instantiate: function instantiate(dispatcher, bindingRecords, variableBindings, directiveMementos) {
	    assert.argumentTypes(dispatcher, assert.type.any, bindingRecords, List, variableBindings, List, directiveMementos, List);
	    this._createFactoryIfNecessary(bindingRecords, variableBindings, directiveMementos);
	    return this._factory(dispatcher, this._pipeRegistry);
	  },
	  _createFactoryIfNecessary: function _createFactoryIfNecessary(bindingRecords, variableBindings, directiveMementos) {
	    assert.argumentTypes(bindingRecords, List, variableBindings, List, directiveMementos, List);
	    if (isBlank(this._factory)) {
	      var recordBuilder = new ProtoRecordBuilder();
	      ListWrapper.forEach(bindingRecords, function (r) {
	        recordBuilder.addAst(r.ast, r.bindingMemento, r.directiveMemento, variableBindings);
	      });
	      var c = _jitProtoChangeDetectorClassCounter++;
	      var records = coalesce(recordBuilder.records);
	      var typeName = "ChangeDetector" + c;
	      this._factory = new ChangeDetectorJITGenerator(typeName, records, directiveMementos).generate();
	    }
	  }
	}, {}, ProtoChangeDetector);
	Object.defineProperty(JitProtoChangeDetector.prototype.instantiate, "parameters", { get: function get() {
	    return [[assert.type.any], [List], [List], [List]];
	  } });
	Object.defineProperty(JitProtoChangeDetector.prototype._createFactoryIfNecessary, "parameters", { get: function get() {
	    return [[List], [List], [List]];
	  } });
	var ProtoRecordBuilder = function ProtoRecordBuilder() {
	  this.records = [];
	};
	$traceurRuntime.createClass(ProtoRecordBuilder, { addAst: function addAst(ast, bindingMemento) {
	    var directiveMemento = arguments[2] !== void 0 ? arguments[2] : null;
	    var variableBindings = arguments[3] !== void 0 ? arguments[3] : null;
	    assert.argumentTypes(ast, AST, bindingMemento, assert.type.any, directiveMemento, assert.type.any, variableBindings, List);
	    var last = ListWrapper.last(this.records);
	    if (isPresent(last) && last.directiveMemento == directiveMemento) {
	      last.lastInDirective = false;
	    }
	    var pr = _ConvertAstIntoProtoRecords.convert(ast, bindingMemento, directiveMemento, this.records.length, variableBindings);
	    if (!ListWrapper.isEmpty(pr)) {
	      var last = ListWrapper.last(pr);
	      last.lastInBinding = true;
	      last.lastInDirective = true;
	      this.records = ListWrapper.concat(this.records, pr);
	    }
	  } }, {});
	Object.defineProperty(ProtoRecordBuilder.prototype.addAst, "parameters", { get: function get() {
	    return [[AST], [assert.type.any], [assert.type.any], [List]];
	  } });
	var _ConvertAstIntoProtoRecords = function _ConvertAstIntoProtoRecords(bindingMemento, directiveMemento, contextIndex, expressionAsString, variableBindings) {
	  assert.argumentTypes(bindingMemento, assert.type.any, directiveMemento, assert.type.any, contextIndex, assert.type.number, expressionAsString, assert.type.string, variableBindings, List);
	  this.protoRecords = [];
	  this.bindingMemento = bindingMemento;
	  this.directiveMemento = directiveMemento;
	  this.contextIndex = contextIndex;
	  this.expressionAsString = expressionAsString;
	  this.variableBindings = variableBindings;
	};
	var $_ConvertAstIntoProtoRecords = _ConvertAstIntoProtoRecords;
	$traceurRuntime.createClass(_ConvertAstIntoProtoRecords, {
	  visitImplicitReceiver: function visitImplicitReceiver(ast) {
	    assert.argumentTypes(ast, ImplicitReceiver);
	    return 0;
	  },
	  visitInterpolation: function visitInterpolation(ast) {
	    assert.argumentTypes(ast, Interpolation);
	    var args = this._visitAll(ast.expressions);
	    return this._addRecord(RECORD_TYPE_INTERPOLATE, "interpolate", _interpolationFn(ast.strings), args, ast.strings, 0);
	  },
	  visitLiteralPrimitive: function visitLiteralPrimitive(ast) {
	    assert.argumentTypes(ast, LiteralPrimitive);
	    return this._addRecord(RECORD_TYPE_CONST, "literal", ast.value, [], null, 0);
	  },
	  visitAccessMember: function visitAccessMember(ast) {
	    assert.argumentTypes(ast, AccessMember);
	    var receiver = ast.receiver.visit(this);
	    if (isPresent(this.variableBindings) && ListWrapper.contains(this.variableBindings, ast.name)) {
	      return this._addRecord(RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	    } else {
	      return this._addRecord(RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);
	    }
	  },
	  visitMethodCall: function visitMethodCall(ast) {
	    assert.argumentTypes(ast, MethodCall);
	    ;
	    var receiver = ast.receiver.visit(this);
	    var args = this._visitAll(ast.args);
	    if (isPresent(this.variableBindings) && ListWrapper.contains(this.variableBindings, ast.name)) {
	      var target = this._addRecord(RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	      return this._addRecord(RECORD_TYPE_INVOKE_CLOSURE, "closure", null, args, null, target);
	    } else {
	      return this._addRecord(RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	    }
	  },
	  visitFunctionCall: function visitFunctionCall(ast) {
	    assert.argumentTypes(ast, FunctionCall);
	    var target = ast.target.visit(this);
	    var args = this._visitAll(ast.args);
	    return this._addRecord(RECORD_TYPE_INVOKE_CLOSURE, "closure", null, args, null, target);
	  },
	  visitLiteralArray: function visitLiteralArray(ast) {
	    assert.argumentTypes(ast, LiteralArray);
	    var primitiveName = "arrayFn" + ast.expressions.length;
	    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	  },
	  visitLiteralMap: function visitLiteralMap(ast) {
	    assert.argumentTypes(ast, LiteralMap);
	    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys), ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	  },
	  visitBinary: function visitBinary(ast) {
	    assert.argumentTypes(ast, Binary);
	    var left = ast.left.visit(this);
	    var right = ast.right.visit(this);
	    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	  },
	  visitPrefixNot: function visitPrefixNot(ast) {
	    assert.argumentTypes(ast, PrefixNot);
	    var exp = ast.expression.visit(this);
	    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, "operation_negate", ChangeDetectionUtil.operation_negate, [exp], null, 0);
	  },
	  visitConditional: function visitConditional(ast) {
	    assert.argumentTypes(ast, Conditional);
	    var c = ast.condition.visit(this);
	    var t = ast.trueExp.visit(this);
	    var f = ast.falseExp.visit(this);
	    return this._addRecord(RECORD_TYPE_PRIMITIVE_OP, "cond", ChangeDetectionUtil.cond, [c, t, f], null, 0);
	  },
	  visitPipe: function visitPipe(ast) {
	    assert.argumentTypes(ast, Pipe);
	    var value = ast.exp.visit(this);
	    var type = ast.inBinding ? RECORD_TYPE_BINDING_PIPE : RECORD_TYPE_PIPE;
	    return this._addRecord(type, ast.name, ast.name, [], null, value);
	  },
	  visitKeyedAccess: function visitKeyedAccess(ast) {
	    assert.argumentTypes(ast, KeyedAccess);
	    var obj = ast.obj.visit(this);
	    var key = ast.key.visit(this);
	    return this._addRecord(RECORD_TYPE_KEYED_ACCESS, "keyedAccess", ChangeDetectionUtil.keyedAccess, [key], null, obj);
	  },
	  _visitAll: function _visitAll(asts) {
	    assert.argumentTypes(asts, List);
	    var res = ListWrapper.createFixedSize(asts.length);
	    for (var i = 0; i < asts.length; ++i) {
	      res[i] = asts[i].visit(this);
	    }
	    return res;
	  },
	  _addRecord: function _addRecord(type, name, funcOrValue, args, fixedArgs, context) {
	    var selfIndex = ++this.contextIndex;
	    ListWrapper.push(this.protoRecords, new ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, selfIndex, this.bindingMemento, this.directiveMemento, this.expressionAsString, false, false));
	    return selfIndex;
	  }
	}, { convert: function convert(ast, bindingMemento, directiveMemento, contextIndex, variableBindings) {
	    assert.argumentTypes(ast, AST, bindingMemento, assert.type.any, directiveMemento, assert.type.any, contextIndex, assert.type.number, variableBindings, List);
	    var c = new $_ConvertAstIntoProtoRecords(bindingMemento, directiveMemento, contextIndex, ast.toString(), variableBindings);
	    ast.visit(c);
	    return c.protoRecords;
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any], [assert.type.number], [assert.type.string], [List]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.convert, "parameters", { get: function get() {
	    return [[AST], [assert.type.any], [assert.type.any], [assert.type.number], [List]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver, "parameters", { get: function get() {
	    return [[ImplicitReceiver]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitInterpolation, "parameters", { get: function get() {
	    return [[Interpolation]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive, "parameters", { get: function get() {
	    return [[LiteralPrimitive]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitAccessMember, "parameters", { get: function get() {
	    return [[AccessMember]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitMethodCall, "parameters", { get: function get() {
	    return [[MethodCall]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitFunctionCall, "parameters", { get: function get() {
	    return [[FunctionCall]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralArray, "parameters", { get: function get() {
	    return [[LiteralArray]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralMap, "parameters", { get: function get() {
	    return [[LiteralMap]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitBinary, "parameters", { get: function get() {
	    return [[Binary]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitPrefixNot, "parameters", { get: function get() {
	    return [[PrefixNot]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitConditional, "parameters", { get: function get() {
	    return [[Conditional]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitPipe, "parameters", { get: function get() {
	    return [[Pipe]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitKeyedAccess, "parameters", { get: function get() {
	    return [[KeyedAccess]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype._visitAll, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function _arrayFn(length) {
	  assert.argumentTypes(length, assert.type.number);
	  switch (length) {
	    case 0:
	      return assert.returnType(ChangeDetectionUtil.arrayFn0, Function);
	    case 1:
	      return assert.returnType(ChangeDetectionUtil.arrayFn1, Function);
	    case 2:
	      return assert.returnType(ChangeDetectionUtil.arrayFn2, Function);
	    case 3:
	      return assert.returnType(ChangeDetectionUtil.arrayFn3, Function);
	    case 4:
	      return assert.returnType(ChangeDetectionUtil.arrayFn4, Function);
	    case 5:
	      return assert.returnType(ChangeDetectionUtil.arrayFn5, Function);
	    case 6:
	      return assert.returnType(ChangeDetectionUtil.arrayFn6, Function);
	    case 7:
	      return assert.returnType(ChangeDetectionUtil.arrayFn7, Function);
	    case 8:
	      return assert.returnType(ChangeDetectionUtil.arrayFn8, Function);
	    case 9:
	      return assert.returnType(ChangeDetectionUtil.arrayFn9, Function);
	    default:
	      throw new BaseException("Does not support literal maps with more than 9 elements");
	  }
	}
	Object.defineProperty(_arrayFn, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	function _mapPrimitiveName(keys) {
	  var stringifiedKeys = ListWrapper.join(ListWrapper.map(keys, function (k) {
	    return isString(k) ? "\"" + k + "\"" : "" + k;
	  }), ", ");
	  return "mapFn([" + stringifiedKeys + "])";
	}
	Object.defineProperty(_mapPrimitiveName, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function _operationToPrimitiveName(operation) {
	  assert.argumentTypes(operation, assert.type.string);
	  switch (operation) {
	    case '+':
	      return assert.returnType("operation_add", assert.type.string);
	    case '-':
	      return assert.returnType("operation_subtract", assert.type.string);
	    case '*':
	      return assert.returnType("operation_multiply", assert.type.string);
	    case '/':
	      return assert.returnType("operation_divide", assert.type.string);
	    case '%':
	      return assert.returnType("operation_remainder", assert.type.string);
	    case '==':
	      return assert.returnType("operation_equals", assert.type.string);
	    case '!=':
	      return assert.returnType("operation_not_equals", assert.type.string);
	    case '<':
	      return assert.returnType("operation_less_then", assert.type.string);
	    case '>':
	      return assert.returnType("operation_greater_then", assert.type.string);
	    case '<=':
	      return assert.returnType("operation_less_or_equals_then", assert.type.string);
	    case '>=':
	      return assert.returnType("operation_greater_or_equals_then", assert.type.string);
	    case '&&':
	      return assert.returnType("operation_logical_and", assert.type.string);
	    case '||':
	      return assert.returnType("operation_logical_or", assert.type.string);
	    default:
	      throw new BaseException("Unsupported operation " + operation);
	  }
	}
	Object.defineProperty(_operationToPrimitiveName, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function _operationToFunction(operation) {
	  assert.argumentTypes(operation, assert.type.string);
	  switch (operation) {
	    case '+':
	      return assert.returnType(ChangeDetectionUtil.operation_add, Function);
	    case '-':
	      return assert.returnType(ChangeDetectionUtil.operation_subtract, Function);
	    case '*':
	      return assert.returnType(ChangeDetectionUtil.operation_multiply, Function);
	    case '/':
	      return assert.returnType(ChangeDetectionUtil.operation_divide, Function);
	    case '%':
	      return assert.returnType(ChangeDetectionUtil.operation_remainder, Function);
	    case '==':
	      return assert.returnType(ChangeDetectionUtil.operation_equals, Function);
	    case '!=':
	      return assert.returnType(ChangeDetectionUtil.operation_not_equals, Function);
	    case '<':
	      return assert.returnType(ChangeDetectionUtil.operation_less_then, Function);
	    case '>':
	      return assert.returnType(ChangeDetectionUtil.operation_greater_then, Function);
	    case '<=':
	      return assert.returnType(ChangeDetectionUtil.operation_less_or_equals_then, Function);
	    case '>=':
	      return assert.returnType(ChangeDetectionUtil.operation_greater_or_equals_then, Function);
	    case '&&':
	      return assert.returnType(ChangeDetectionUtil.operation_logical_and, Function);
	    case '||':
	      return assert.returnType(ChangeDetectionUtil.operation_logical_or, Function);
	    default:
	      throw new BaseException("Unsupported operation " + operation);
	  }
	}
	Object.defineProperty(_operationToFunction, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function s(v) {
	  return isPresent(v) ? "" + v : '';
	}
	function _interpolationFn(strings) {
	  var length = strings.length;
	  var c0 = length > 0 ? strings[0] : null;
	  var c1 = length > 1 ? strings[1] : null;
	  var c2 = length > 2 ? strings[2] : null;
	  var c3 = length > 3 ? strings[3] : null;
	  var c4 = length > 4 ? strings[4] : null;
	  var c5 = length > 5 ? strings[5] : null;
	  var c6 = length > 6 ? strings[6] : null;
	  var c7 = length > 7 ? strings[7] : null;
	  var c8 = length > 8 ? strings[8] : null;
	  var c9 = length > 9 ? strings[9] : null;
	  switch (length - 1) {
	    case 1:
	      return function (a1) {
	        return c0 + s(a1) + c1;
	      };
	    case 2:
	      return function (a1, a2) {
	        return c0 + s(a1) + c1 + s(a2) + c2;
	      };
	    case 3:
	      return function (a1, a2, a3) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
	      };
	    case 4:
	      return function (a1, a2, a3, a4) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
	      };
	    case 5:
	      return function (a1, a2, a3, a4, a5) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	      };
	    case 6:
	      return function (a1, a2, a3, a4, a5, a6) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	      };
	    case 7:
	      return function (a1, a2, a3, a4, a5, a6, a7) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
	      };
	    case 8:
	      return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
	      };
	    case 9:
	      return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
	      };
	    default:
	      throw new BaseException("Does not support more than 9 expressions");
	  }
	}
	Object.defineProperty(_interpolationFn, "parameters", { get: function get() {
	    return [[List]];
	  } });
	//# sourceMappingURL=proto_change_detector.js.map

	//# sourceMappingURL=./proto_change_detector.map

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  uninitialized: { get: function get() {
	      return uninitialized;
	    } },
	  SimpleChange: { get: function get() {
	      return SimpleChange;
	    } },
	  ChangeDetectionUtil: { get: function get() {
	      return ChangeDetectionUtil;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__proto_95_record__, $__exceptions__, $__pipes_47_pipe__, $__interfaces__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    Type = $__1.Type;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var ProtoRecord = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }).ProtoRecord;
	var ExpressionChangedAfterItHasBeenChecked = ($__exceptions__ = __webpack_require__(26), $__exceptions__ && $__exceptions__.__esModule && $__exceptions__ || { "default": $__exceptions__ }).ExpressionChangedAfterItHasBeenChecked;
	var NO_CHANGE = ($__pipes_47_pipe__ = __webpack_require__(31), $__pipes_47_pipe__ && $__pipes_47_pipe__.__esModule && $__pipes_47_pipe__ || { "default": $__pipes_47_pipe__ }).NO_CHANGE;
	var $__6 = ($__interfaces__ = __webpack_require__(28), $__interfaces__ && $__interfaces__.__esModule && $__interfaces__ || { "default": $__interfaces__ }),
	    ChangeRecord = $__6.ChangeRecord,
	    ChangeDetector = $__6.ChangeDetector,
	    CHECK_ALWAYS = $__6.CHECK_ALWAYS,
	    CHECK_ONCE = $__6.CHECK_ONCE,
	    CHECKED = $__6.CHECKED,
	    DETACHED = $__6.DETACHED;
	var uninitialized = new Object();
	var SimpleChange = function SimpleChange(previousValue, currentValue) {
	  assert.argumentTypes(previousValue, assert.type.any, currentValue, assert.type.any);
	  this.previousValue = previousValue;
	  this.currentValue = currentValue;
	};
	$traceurRuntime.createClass(SimpleChange, {}, {});
	Object.defineProperty(SimpleChange, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any]];
	  } });
	var _simpleChangesIndex = 0;
	var _simpleChanges = [new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null)];
	var _changeRecordsIndex = 0;
	var _changeRecords = [new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null), new ChangeRecord(null, null)];
	function _simpleChange(previousValue, currentValue) {
	  var index = _simpleChangesIndex++ % 20;
	  var s = _simpleChanges[index];
	  s.previousValue = previousValue;
	  s.currentValue = currentValue;
	  return s;
	}
	function _changeRecord(bindingMemento, change) {
	  var index = _changeRecordsIndex++ % 20;
	  var s = _changeRecords[index];
	  s.bindingMemento = bindingMemento;
	  s.change = change;
	  return s;
	}
	var _singleElementList = [null];
	var ChangeDetectionUtil = function ChangeDetectionUtil() {
	  ;
	};
	$traceurRuntime.createClass(ChangeDetectionUtil, {}, {
	  unitialized: function unitialized() {
	    return uninitialized;
	  },
	  arrayFn0: function arrayFn0() {
	    return [];
	  },
	  arrayFn1: function arrayFn1(a1) {
	    return [a1];
	  },
	  arrayFn2: function arrayFn2(a1, a2) {
	    return [a1, a2];
	  },
	  arrayFn3: function arrayFn3(a1, a2, a3) {
	    return [a1, a2, a3];
	  },
	  arrayFn4: function arrayFn4(a1, a2, a3, a4) {
	    return [a1, a2, a3, a4];
	  },
	  arrayFn5: function arrayFn5(a1, a2, a3, a4, a5) {
	    return [a1, a2, a3, a4, a5];
	  },
	  arrayFn6: function arrayFn6(a1, a2, a3, a4, a5, a6) {
	    return [a1, a2, a3, a4, a5, a6];
	  },
	  arrayFn7: function arrayFn7(a1, a2, a3, a4, a5, a6, a7) {
	    return [a1, a2, a3, a4, a5, a6, a7];
	  },
	  arrayFn8: function arrayFn8(a1, a2, a3, a4, a5, a6, a7, a8) {
	    return [a1, a2, a3, a4, a5, a6, a7, a8];
	  },
	  arrayFn9: function arrayFn9(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	    return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	  },
	  operation_negate: function operation_negate(value) {
	    return !value;
	  },
	  operation_add: function operation_add(left, right) {
	    return left + right;
	  },
	  operation_subtract: function operation_subtract(left, right) {
	    return left - right;
	  },
	  operation_multiply: function operation_multiply(left, right) {
	    return left * right;
	  },
	  operation_divide: function operation_divide(left, right) {
	    return left / right;
	  },
	  operation_remainder: function operation_remainder(left, right) {
	    return left % right;
	  },
	  operation_equals: function operation_equals(left, right) {
	    return left == right;
	  },
	  operation_not_equals: function operation_not_equals(left, right) {
	    return left != right;
	  },
	  operation_less_then: function operation_less_then(left, right) {
	    return left < right;
	  },
	  operation_greater_then: function operation_greater_then(left, right) {
	    return left > right;
	  },
	  operation_less_or_equals_then: function operation_less_or_equals_then(left, right) {
	    return left <= right;
	  },
	  operation_greater_or_equals_then: function operation_greater_or_equals_then(left, right) {
	    return left >= right;
	  },
	  operation_logical_and: function operation_logical_and(left, right) {
	    return left && right;
	  },
	  operation_logical_or: function operation_logical_or(left, right) {
	    return left || right;
	  },
	  cond: function cond(_cond, trueVal, falseVal) {
	    return _cond ? trueVal : falseVal;
	  },
	  mapFn: function mapFn(keys) {
	    function buildMap(values) {
	      var res = StringMapWrapper.create();
	      for (var i = 0; i < keys.length; ++i) {
	        StringMapWrapper.set(res, keys[i], values[i]);
	      }
	      return res;
	    }
	    switch (keys.length) {
	      case 0:
	        return function () {
	          return [];
	        };
	      case 1:
	        return function (a1) {
	          return buildMap([a1]);
	        };
	      case 2:
	        return function (a1, a2) {
	          return buildMap([a1, a2]);
	        };
	      case 3:
	        return function (a1, a2, a3) {
	          return buildMap([a1, a2, a3]);
	        };
	      case 4:
	        return function (a1, a2, a3, a4) {
	          return buildMap([a1, a2, a3, a4]);
	        };
	      case 5:
	        return function (a1, a2, a3, a4, a5) {
	          return buildMap([a1, a2, a3, a4, a5]);
	        };
	      case 6:
	        return function (a1, a2, a3, a4, a5, a6) {
	          return buildMap([a1, a2, a3, a4, a5, a6]);
	        };
	      case 7:
	        return function (a1, a2, a3, a4, a5, a6, a7) {
	          return buildMap([a1, a2, a3, a4, a5, a6, a7]);
	        };
	      case 8:
	        return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	          return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]);
	        };
	      case 9:
	        return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	          return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	        };
	      default:
	        throw new BaseException("Does not support literal maps with more than 9 elements");
	    }
	  },
	  keyedAccess: function keyedAccess(obj, args) {
	    return obj[args[0]];
	  },
	  noChangeMarker: function noChangeMarker(value) {
	    return assert.returnType(value === NO_CHANGE, assert.type.boolean);
	  },
	  throwOnChange: function throwOnChange(proto, change) {
	    assert.argumentTypes(proto, ProtoRecord, change, assert.type.any);
	    throw new ExpressionChangedAfterItHasBeenChecked(proto, change);
	  },
	  simpleChange: function simpleChange(previousValue, currentValue) {
	    assert.argumentTypes(previousValue, assert.type.any, currentValue, assert.type.any);
	    return assert.returnType(_simpleChange(previousValue, currentValue), SimpleChange);
	  },
	  changeRecord: function changeRecord(memento, change) {
	    assert.argumentTypes(memento, assert.type.any, change, assert.type.any);
	    return assert.returnType(_changeRecord(memento, change), ChangeRecord);
	  },
	  simpleChangeRecord: function simpleChangeRecord(memento, previousValue, currentValue) {
	    assert.argumentTypes(memento, assert.type.any, previousValue, assert.type.any, currentValue, assert.type.any);
	    return assert.returnType(_changeRecord(memento, _simpleChange(previousValue, currentValue)), ChangeRecord);
	  },
	  addRecord: function addRecord(updatedRecords, changeRecord) {
	    assert.argumentTypes(updatedRecords, List, changeRecord, ChangeRecord);
	    if (isBlank(updatedRecords)) {
	      updatedRecords = _singleElementList;
	      updatedRecords[0] = changeRecord;
	    } else if (updatedRecords === _singleElementList) {
	      updatedRecords = [_singleElementList[0], changeRecord];
	    } else {
	      ListWrapper.push(updatedRecords, changeRecord);
	    }
	    return assert.returnType(updatedRecords, List);
	  }
	});
	Object.defineProperty(ChangeDetectionUtil.mapFn, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.throwOnChange, "parameters", { get: function get() {
	    return [[ProtoRecord], []];
	  } });
	Object.defineProperty(ChangeDetectionUtil.simpleChange, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.changeRecord, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.simpleChangeRecord, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any], [assert.type.any]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.addRecord, "parameters", { get: function get() {
	    return [[List], [ChangeRecord]];
	  } });
	//# sourceMappingURL=change_detection_util.js.map

	//# sourceMappingURL=./change_detection_util.map

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  NO_CHANGE: { get: function get() {
	      return NO_CHANGE;
	    } },
	  Pipe: { get: function get() {
	      return Pipe;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var NO_CHANGE = new Object();
	var Pipe = function Pipe() {
	  ;
	};
	$traceurRuntime.createClass(Pipe, {
	  supports: function supports(obj) {
	    return assert.returnType(false, assert.type.boolean);
	  },
	  onDestroy: function onDestroy() {},
	  transform: function transform(value) {
	    assert.argumentTypes(value, assert.type.any);
	    return assert.returnType(null, assert.type.any);
	  }
	}, {});
	Object.defineProperty(Pipe.prototype.transform, "parameters", { get: function get() {
	    return [[assert.type.any]];
	  } });
	//# sourceMappingURL=pipe.js.map

	//# sourceMappingURL=./pipe.map

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DynamicChangeDetector: { get: function get() {
	      return DynamicChangeDetector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__abstract_95_change_95_detector__, $__pipes_47_pipe_95_registry__, $__change_95_detection_95_util__, $__proto_95_record__, $__exceptions__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    FunctionWrapper = $__1.FunctionWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var AbstractChangeDetector = ($__abstract_95_change_95_detector__ = __webpack_require__(33), $__abstract_95_change_95_detector__ && $__abstract_95_change_95_detector__.__esModule && $__abstract_95_change_95_detector__ || { "default": $__abstract_95_change_95_detector__ }).AbstractChangeDetector;
	var PipeRegistry = ($__pipes_47_pipe_95_registry__ = __webpack_require__(35), $__pipes_47_pipe_95_registry__ && $__pipes_47_pipe_95_registry__.__esModule && $__pipes_47_pipe_95_registry__ || { "default": $__pipes_47_pipe_95_registry__ }).PipeRegistry;
	var $__5 = ($__change_95_detection_95_util__ = __webpack_require__(30), $__change_95_detection_95_util__ && $__change_95_detection_95_util__.__esModule && $__change_95_detection_95_util__ || { "default": $__change_95_detection_95_util__ }),
	    ChangeDetectionUtil = $__5.ChangeDetectionUtil,
	    uninitialized = $__5.uninitialized;
	var $__6 = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }),
	    ProtoRecord = $__6.ProtoRecord,
	    RECORD_TYPE_SELF = $__6.RECORD_TYPE_SELF,
	    RECORD_TYPE_PROPERTY = $__6.RECORD_TYPE_PROPERTY,
	    RECORD_TYPE_LOCAL = $__6.RECORD_TYPE_LOCAL,
	    RECORD_TYPE_INVOKE_METHOD = $__6.RECORD_TYPE_INVOKE_METHOD,
	    RECORD_TYPE_CONST = $__6.RECORD_TYPE_CONST,
	    RECORD_TYPE_INVOKE_CLOSURE = $__6.RECORD_TYPE_INVOKE_CLOSURE,
	    RECORD_TYPE_PRIMITIVE_OP = $__6.RECORD_TYPE_PRIMITIVE_OP,
	    RECORD_TYPE_KEYED_ACCESS = $__6.RECORD_TYPE_KEYED_ACCESS,
	    RECORD_TYPE_PIPE = $__6.RECORD_TYPE_PIPE,
	    RECORD_TYPE_BINDING_PIPE = $__6.RECORD_TYPE_BINDING_PIPE,
	    RECORD_TYPE_INTERPOLATE = $__6.RECORD_TYPE_INTERPOLATE;
	var $__7 = ($__exceptions__ = __webpack_require__(26), $__exceptions__ && $__exceptions__.__esModule && $__exceptions__ || { "default": $__exceptions__ }),
	    ExpressionChangedAfterItHasBeenChecked = $__7.ExpressionChangedAfterItHasBeenChecked,
	    ChangeDetectionError = $__7.ChangeDetectionError;
	var DynamicChangeDetector = function DynamicChangeDetector(dispatcher, pipeRegistry, protoRecords, directiveMementos) {
	  assert.argumentTypes(dispatcher, assert.type.any, pipeRegistry, PipeRegistry, protoRecords, assert.genericType(List, ProtoRecord), directiveMementos, List);
	  $traceurRuntime.superConstructor($DynamicChangeDetector).call(this);
	  this.dispatcher = dispatcher;
	  this.pipeRegistry = pipeRegistry;
	  this.values = ListWrapper.createFixedSize(protoRecords.length + 1);
	  this.pipes = ListWrapper.createFixedSize(protoRecords.length + 1);
	  this.prevContexts = ListWrapper.createFixedSize(protoRecords.length + 1);
	  this.changes = ListWrapper.createFixedSize(protoRecords.length + 1);
	  ListWrapper.fill(this.values, uninitialized);
	  ListWrapper.fill(this.pipes, null);
	  ListWrapper.fill(this.prevContexts, uninitialized);
	  ListWrapper.fill(this.changes, false);
	  this.locals = null;
	  this.protos = protoRecords;
	  this.directiveMementos = directiveMementos;
	};
	var $DynamicChangeDetector = DynamicChangeDetector;
	$traceurRuntime.createClass(DynamicChangeDetector, {
	  hydrate: function hydrate(context, locals) {
	    assert.argumentTypes(context, assert.type.any, locals, assert.type.any);
	    this.values[0] = context;
	    this.locals = locals;
	  },
	  dehydrate: function dehydrate() {
	    this._destroyPipes();
	    ListWrapper.fill(this.values, uninitialized);
	    ListWrapper.fill(this.changes, false);
	    ListWrapper.fill(this.pipes, null);
	    ListWrapper.fill(this.prevContexts, uninitialized);
	    this.locals = null;
	  },
	  _destroyPipes: function _destroyPipes() {
	    for (var i = 0; i < this.pipes.length; ++i) {
	      if (isPresent(this.pipes[i])) {
	        this.pipes[i].onDestroy();
	      }
	    }
	  },
	  hydrated: function hydrated() {
	    return assert.returnType(this.values[0] !== uninitialized, assert.type.boolean);
	  },
	  detectChangesInRecords: function detectChangesInRecords(throwOnChange) {
	    assert.argumentTypes(throwOnChange, assert.type.boolean);
	    var protos = assert.type(this.protos, assert.genericType(List, ProtoRecord));
	    var updatedRecords = null;
	    for (var i = 0; i < protos.length; ++i) {
	      var proto = assert.type(protos[i], ProtoRecord);
	      var change = this._check(proto);
	      if (isPresent(change)) {
	        var record = ChangeDetectionUtil.changeRecord(proto.bindingMemento, change);
	        updatedRecords = ChangeDetectionUtil.addRecord(updatedRecords, record);
	      }
	      if (proto.lastInDirective && isPresent(updatedRecords)) {
	        if (throwOnChange) ChangeDetectionUtil.throwOnChange(proto, updatedRecords[0]);
	        this.dispatcher.onRecordChange(proto.directiveMemento, updatedRecords);
	        updatedRecords = null;
	      }
	    }
	  },
	  notifyOnAllChangesDone: function notifyOnAllChangesDone() {
	    var mementos = this.directiveMementos;
	    for (var i = mementos.length - 1; i >= 0; --i) {
	      var memento = mementos[i];
	      if (memento.notifyOnAllChangesDone) {
	        this.dispatcher.onAllChangesDone(memento);
	      }
	    }
	  },
	  _check: function _check(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    try {
	      if (proto.mode === RECORD_TYPE_PIPE || proto.mode === RECORD_TYPE_BINDING_PIPE) {
	        return this._pipeCheck(proto);
	      } else {
	        return this._referenceCheck(proto);
	      }
	    } catch (e) {
	      throw new ChangeDetectionError(proto, e);
	    }
	  },
	  _referenceCheck: function _referenceCheck(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    if (this._pureFuncAndArgsDidNotChange(proto)) {
	      this._setChanged(proto, false);
	      return null;
	    }
	    var prevValue = this._readSelf(proto);
	    var currValue = this._calculateCurrValue(proto);
	    if (!isSame(prevValue, currValue)) {
	      this._writeSelf(proto, currValue);
	      this._setChanged(proto, true);
	      if (proto.lastInBinding) {
	        return ChangeDetectionUtil.simpleChange(prevValue, currValue);
	      } else {
	        return null;
	      }
	    } else {
	      this._setChanged(proto, false);
	      return null;
	    }
	  },
	  _calculateCurrValue: function _calculateCurrValue(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    switch (proto.mode) {
	      case RECORD_TYPE_SELF:
	        return this._readContext(proto);
	      case RECORD_TYPE_CONST:
	        return proto.funcOrValue;
	      case RECORD_TYPE_PROPERTY:
	        var context = this._readContext(proto);
	        return proto.funcOrValue(context);
	      case RECORD_TYPE_LOCAL:
	        return this.locals.get(proto.name);
	      case RECORD_TYPE_INVOKE_METHOD:
	        var context = this._readContext(proto);
	        var args = this._readArgs(proto);
	        return proto.funcOrValue(context, args);
	      case RECORD_TYPE_KEYED_ACCESS:
	        var arg = this._readArgs(proto)[0];
	        return this._readContext(proto)[arg];
	      case RECORD_TYPE_INVOKE_CLOSURE:
	        return FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
	      case RECORD_TYPE_INTERPOLATE:
	      case RECORD_TYPE_PRIMITIVE_OP:
	        return FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
	      default:
	        throw new BaseException("Unknown operation " + proto.mode);
	    }
	  },
	  _pipeCheck: function _pipeCheck(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    var context = this._readContext(proto);
	    var pipe = this._pipeFor(proto, context);
	    var newValue = pipe.transform(context);
	    if (!ChangeDetectionUtil.noChangeMarker(newValue)) {
	      var prevValue = this._readSelf(proto);
	      this._writeSelf(proto, newValue);
	      this._setChanged(proto, true);
	      if (proto.lastInBinding) {
	        return ChangeDetectionUtil.simpleChange(prevValue, newValue);
	      } else {
	        return null;
	      }
	    } else {
	      this._setChanged(proto, false);
	      return null;
	    }
	  },
	  _pipeFor: function _pipeFor(proto, context) {
	    assert.argumentTypes(proto, ProtoRecord, context, assert.type.any);
	    var storedPipe = this._readPipe(proto);
	    if (isPresent(storedPipe) && storedPipe.supports(context)) {
	      return storedPipe;
	    }
	    if (isPresent(storedPipe)) {
	      storedPipe.onDestroy();
	    }
	    var bpc = proto.mode === RECORD_TYPE_BINDING_PIPE ? this.bindingPropagationConfig : null;
	    var pipe = this.pipeRegistry.get(proto.name, context, bpc);
	    this._writePipe(proto, pipe);
	    return pipe;
	  },
	  _readContext: function _readContext(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    return this.values[proto.contextIndex];
	  },
	  _readSelf: function _readSelf(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    return this.values[proto.selfIndex];
	  },
	  _writeSelf: function _writeSelf(proto, value) {
	    assert.argumentTypes(proto, ProtoRecord, value, assert.type.any);
	    this.values[proto.selfIndex] = value;
	  },
	  _readPipe: function _readPipe(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    return this.pipes[proto.selfIndex];
	  },
	  _writePipe: function _writePipe(proto, value) {
	    assert.argumentTypes(proto, ProtoRecord, value, assert.type.any);
	    this.pipes[proto.selfIndex] = value;
	  },
	  _setChanged: function _setChanged(proto, value) {
	    assert.argumentTypes(proto, ProtoRecord, value, assert.type.boolean);
	    this.changes[proto.selfIndex] = value;
	  },
	  _pureFuncAndArgsDidNotChange: function _pureFuncAndArgsDidNotChange(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    return assert.returnType(proto.isPureFunction() && !this._argsChanged(proto), assert.type.boolean);
	  },
	  _argsChanged: function _argsChanged(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    var args = proto.args;
	    for (var i = 0; i < args.length; ++i) {
	      if (this.changes[args[i]]) {
	        return assert.returnType(true, assert.type.boolean);
	      }
	    }
	    return assert.returnType(false, assert.type.boolean);
	  },
	  _readArgs: function _readArgs(proto) {
	    assert.argumentTypes(proto, ProtoRecord);
	    var res = ListWrapper.createFixedSize(proto.args.length);
	    var args = proto.args;
	    for (var i = 0; i < args.length; ++i) {
	      res[i] = this.values[args[i]];
	    }
	    return res;
	  }
	}, {}, AbstractChangeDetector);
	Object.defineProperty(DynamicChangeDetector, "parameters", { get: function get() {
	    return [[assert.type.any], [PipeRegistry], [assert.genericType(List, ProtoRecord)], [List]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype.hydrate, "parameters", { get: function get() {
	    return [[assert.type.any], [assert.type.any]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype.detectChangesInRecords, "parameters", { get: function get() {
	    return [[assert.type.boolean]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._check, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._referenceCheck, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._calculateCurrValue, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pipeCheck, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pipeFor, "parameters", { get: function get() {
	    return [[ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readContext, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readSelf, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._writeSelf, "parameters", { get: function get() {
	    return [[ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readPipe, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._writePipe, "parameters", { get: function get() {
	    return [[ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._setChanged, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.boolean]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._argsChanged, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readArgs, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	function isSame(a, b) {
	  if (a === b) return true;
	  if (a instanceof String && b instanceof String && a == b) return true;
	  if (a !== a && b !== b) return true;
	  return false;
	}
	//# sourceMappingURL=dynamic_change_detector.js.map

	//# sourceMappingURL=./dynamic_change_detector.map

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  AbstractChangeDetector: { get: function get() {
	      return AbstractChangeDetector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__binding_95_propagation_95_config__, $__interfaces__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var BindingPropagationConfig = ($__binding_95_propagation_95_config__ = __webpack_require__(34), $__binding_95_propagation_95_config__ && $__binding_95_propagation_95_config__.__esModule && $__binding_95_propagation_95_config__ || { "default": $__binding_95_propagation_95_config__ }).BindingPropagationConfig;
	var $__4 = ($__interfaces__ = __webpack_require__(28), $__interfaces__ && $__interfaces__.__esModule && $__interfaces__ || { "default": $__interfaces__ }),
	    ChangeDetector = $__4.ChangeDetector,
	    CHECK_ALWAYS = $__4.CHECK_ALWAYS,
	    CHECK_ONCE = $__4.CHECK_ONCE,
	    CHECKED = $__4.CHECKED,
	    DETACHED = $__4.DETACHED;
	var AbstractChangeDetector = function AbstractChangeDetector() {
	  $traceurRuntime.superConstructor($AbstractChangeDetector).call(this);
	  this.lightDomChildren = [];
	  this.shadowDomChildren = [];
	  this.bindingPropagationConfig = new BindingPropagationConfig(this);
	  this.mode = CHECK_ALWAYS;
	};
	var $AbstractChangeDetector = AbstractChangeDetector;
	$traceurRuntime.createClass(AbstractChangeDetector, {
	  addChild: function addChild(cd) {
	    assert.argumentTypes(cd, ChangeDetector);
	    ListWrapper.push(this.lightDomChildren, cd);
	    cd.parent = this;
	  },
	  removeChild: function removeChild(cd) {
	    assert.argumentTypes(cd, ChangeDetector);
	    ListWrapper.remove(this.lightDomChildren, cd);
	  },
	  addShadowDomChild: function addShadowDomChild(cd) {
	    assert.argumentTypes(cd, ChangeDetector);
	    ListWrapper.push(this.shadowDomChildren, cd);
	    cd.parent = this;
	  },
	  remove: function remove() {
	    this.parent.removeChild(this);
	  },
	  detectChanges: function detectChanges() {
	    this._detectChanges(false);
	  },
	  checkNoChanges: function checkNoChanges() {
	    this._detectChanges(true);
	  },
	  _detectChanges: function _detectChanges(throwOnChange) {
	    assert.argumentTypes(throwOnChange, assert.type.boolean);
	    if (this.mode === DETACHED || this.mode === CHECKED) return;
	    this.detectChangesInRecords(throwOnChange);
	    this._detectChangesInLightDomChildren(throwOnChange);
	    this.notifyOnAllChangesDone();
	    this._detectChangesInShadowDomChildren(throwOnChange);
	    if (this.mode === CHECK_ONCE) this.mode = CHECKED;
	  },
	  detectChangesInRecords: function detectChangesInRecords(throwOnChange) {
	    assert.argumentTypes(throwOnChange, assert.type.boolean);
	  },
	  notifyOnAllChangesDone: function notifyOnAllChangesDone() {},
	  _detectChangesInLightDomChildren: function _detectChangesInLightDomChildren(throwOnChange) {
	    assert.argumentTypes(throwOnChange, assert.type.boolean);
	    var c = this.lightDomChildren;
	    for (var i = 0; i < c.length; ++i) {
	      c[i]._detectChanges(throwOnChange);
	    }
	  },
	  _detectChangesInShadowDomChildren: function _detectChangesInShadowDomChildren(throwOnChange) {
	    assert.argumentTypes(throwOnChange, assert.type.boolean);
	    var c = this.shadowDomChildren;
	    for (var i = 0; i < c.length; ++i) {
	      c[i]._detectChanges(throwOnChange);
	    }
	  },
	  markPathToRootAsCheckOnce: function markPathToRootAsCheckOnce() {
	    var c = this;
	    while (isPresent(c) && c.mode != DETACHED) {
	      if (c.mode === CHECKED) c.mode = CHECK_ONCE;
	      c = c.parent;
	    }
	  }
	}, {}, ChangeDetector);
	Object.defineProperty(AbstractChangeDetector.prototype.addChild, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.removeChild, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.addShadowDomChild, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChanges, "parameters", { get: function get() {
	    return [[assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.detectChangesInRecords, "parameters", { get: function get() {
	    return [[assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChangesInLightDomChildren, "parameters", { get: function get() {
	    return [[assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChangesInShadowDomChildren, "parameters", { get: function get() {
	    return [[assert.type.boolean]];
	  } });
	//# sourceMappingURL=abstract_change_detector.js.map

	//# sourceMappingURL=./abstract_change_detector.map

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  BindingPropagationConfig: { get: function get() {
	      return BindingPropagationConfig;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__interfaces__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__interfaces__ = __webpack_require__(28), $__interfaces__ && $__interfaces__.__esModule && $__interfaces__ || { "default": $__interfaces__ }),
	    ChangeDetector = $__1.ChangeDetector,
	    CHECK_ONCE = $__1.CHECK_ONCE,
	    DETACHED = $__1.DETACHED,
	    CHECK_ALWAYS = $__1.CHECK_ALWAYS;
	var BindingPropagationConfig = function BindingPropagationConfig(cd) {
	  assert.argumentTypes(cd, ChangeDetector);
	  this._cd = cd;
	};
	$traceurRuntime.createClass(BindingPropagationConfig, {
	  shouldBePropagated: function shouldBePropagated() {
	    this._cd.mode = CHECK_ONCE;
	  },
	  shouldBePropagatedFromRoot: function shouldBePropagatedFromRoot() {
	    this._cd.markPathToRootAsCheckOnce();
	  },
	  shouldNotPropagate: function shouldNotPropagate() {
	    this._cd.mode = DETACHED;
	  },
	  shouldAlwaysPropagate: function shouldAlwaysPropagate() {
	    this._cd.mode = CHECK_ALWAYS;
	  }
	}, {});
	Object.defineProperty(BindingPropagationConfig, "parameters", { get: function get() {
	    return [[ChangeDetector]];
	  } });
	//# sourceMappingURL=binding_propagation_config.js.map

	//# sourceMappingURL=./binding_propagation_config.map

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  PipeRegistry: { get: function get() {
	      return PipeRegistry;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__pipe__, $___46__46__47_binding_95_propagation_95_config__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__1.List,
	    ListWrapper = $__1.ListWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    CONST = $__2.CONST;
	var Pipe = ($__pipe__ = __webpack_require__(31), $__pipe__ && $__pipe__.__esModule && $__pipe__ || { "default": $__pipe__ }).Pipe;
	var BindingPropagationConfig = ($___46__46__47_binding_95_propagation_95_config__ = __webpack_require__(34), $___46__46__47_binding_95_propagation_95_config__ && $___46__46__47_binding_95_propagation_95_config__.__esModule && $___46__46__47_binding_95_propagation_95_config__ || { "default": $___46__46__47_binding_95_propagation_95_config__ }).BindingPropagationConfig;
	var PipeRegistry = function PipeRegistry(config) {
	  this.config = config;
	};
	$traceurRuntime.createClass(PipeRegistry, { get: function get(type, obj, bpc) {
	    var listOfConfigs = this.config[type];
	    if (isBlank(listOfConfigs)) {
	      throw new BaseException("Cannot find a pipe for type '" + type + "' object '" + obj + "'");
	    }
	    var matchingConfig = ListWrapper.find(listOfConfigs, function (pipeConfig) {
	      return pipeConfig.supports(obj);
	    });
	    if (isBlank(matchingConfig)) {
	      throw new BaseException("Cannot find a pipe for type '" + type + "' object '" + obj + "'");
	    }
	    return assert.returnType(matchingConfig.create(bpc), Pipe);
	  } }, {});
	Object.defineProperty(PipeRegistry.prototype.get, "parameters", { get: function get() {
	    return [[assert.type.string], [], [BindingPropagationConfig]];
	  } });
	//# sourceMappingURL=pipe_registry.js.map

	//# sourceMappingURL=./pipe_registry.map

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ChangeDetectorJITGenerator: { get: function get() {
	      return ChangeDetectorJITGenerator;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__abstract_95_change_95_detector__, $__change_95_detection_95_util__, $__proto_95_record__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    Type = $__1.Type;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var AbstractChangeDetector = ($__abstract_95_change_95_detector__ = __webpack_require__(33), $__abstract_95_change_95_detector__ && $__abstract_95_change_95_detector__.__esModule && $__abstract_95_change_95_detector__ || { "default": $__abstract_95_change_95_detector__ }).AbstractChangeDetector;
	var ChangeDetectionUtil = ($__change_95_detection_95_util__ = __webpack_require__(30), $__change_95_detection_95_util__ && $__change_95_detection_95_util__.__esModule && $__change_95_detection_95_util__ || { "default": $__change_95_detection_95_util__ }).ChangeDetectionUtil;
	var $__5 = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }),
	    ProtoRecord = $__5.ProtoRecord,
	    RECORD_TYPE_SELF = $__5.RECORD_TYPE_SELF,
	    RECORD_TYPE_PROPERTY = $__5.RECORD_TYPE_PROPERTY,
	    RECORD_TYPE_LOCAL = $__5.RECORD_TYPE_LOCAL,
	    RECORD_TYPE_INVOKE_METHOD = $__5.RECORD_TYPE_INVOKE_METHOD,
	    RECORD_TYPE_CONST = $__5.RECORD_TYPE_CONST,
	    RECORD_TYPE_INVOKE_CLOSURE = $__5.RECORD_TYPE_INVOKE_CLOSURE,
	    RECORD_TYPE_PRIMITIVE_OP = $__5.RECORD_TYPE_PRIMITIVE_OP,
	    RECORD_TYPE_KEYED_ACCESS = $__5.RECORD_TYPE_KEYED_ACCESS,
	    RECORD_TYPE_PIPE = $__5.RECORD_TYPE_PIPE,
	    RECORD_TYPE_BINDING_PIPE = $__5.RECORD_TYPE_BINDING_PIPE,
	    RECORD_TYPE_INTERPOLATE = $__5.RECORD_TYPE_INTERPOLATE;
	var ABSTRACT_CHANGE_DETECTOR = "AbstractChangeDetector";
	var UTIL = "ChangeDetectionUtil";
	var DISPATCHER_ACCESSOR = "this.dispatcher";
	var PIPE_REGISTRY_ACCESSOR = "this.pipeRegistry";
	var PROTOS_ACCESSOR = "this.protos";
	var MEMENTOS_ACCESSOR = "this.directiveMementos";
	var CONTEXT_ACCESSOR = "this.context";
	var CHANGE_LOCAL = "change";
	var CHANGES_LOCAL = "changes";
	var LOCALS_ACCESSOR = "this.locals";
	var TEMP_LOCAL = "temp";
	function typeTemplate(type, cons, detectChanges, notifyOnAllChangesDone, setContext) {
	  assert.argumentTypes(type, assert.type.string, cons, assert.type.string, detectChanges, assert.type.string, notifyOnAllChangesDone, assert.type.string, setContext, assert.type.string);
	  return assert.returnType("\n" + cons + "\n" + detectChanges + "\n" + notifyOnAllChangesDone + "\n" + setContext + ";\n\nreturn function(dispatcher, pipeRegistry) {\n  return new " + type + "(dispatcher, pipeRegistry, protos, directiveMementos);\n}\n", assert.type.string);
	}
	Object.defineProperty(typeTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	function constructorTemplate(type, fieldsDefinitions) {
	  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string);
	  return assert.returnType("\nvar " + type + " = function " + type + "(dispatcher, pipeRegistry, protos, directiveMementos) {\n" + ABSTRACT_CHANGE_DETECTOR + ".call(this);\n" + DISPATCHER_ACCESSOR + " = dispatcher;\n" + PIPE_REGISTRY_ACCESSOR + " = pipeRegistry;\n" + PROTOS_ACCESSOR + " = protos;\n" + MEMENTOS_ACCESSOR + " = directiveMementos;\n" + fieldsDefinitions + "\n}\n\n" + type + ".prototype = Object.create(" + ABSTRACT_CHANGE_DETECTOR + ".prototype);\n", assert.type.string);
	}
	Object.defineProperty(constructorTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	function pipeOnDestroyTemplate(pipeNames) {
	  return pipeNames.map(function (p) {
	    return p + ".onDestroy()";
	  }).join("\n");
	}
	Object.defineProperty(pipeOnDestroyTemplate, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function hydrateTemplate(type, fieldsDefinitions, pipeOnDestroy) {
	  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string, pipeOnDestroy, assert.type.string);
	  return assert.returnType("\n" + type + ".prototype.hydrate = function(context, locals) {\n  " + CONTEXT_ACCESSOR + " = context;\n  " + LOCALS_ACCESSOR + " = locals;\n}\n" + type + ".prototype.dehydrate = function() {\n  " + pipeOnDestroy + "\n  " + fieldsDefinitions + "\n  " + LOCALS_ACCESSOR + " = null;\n}\n" + type + ".prototype.hydrated = function() {\n  return " + CONTEXT_ACCESSOR + " !== " + UTIL + ".unitialized();\n}\n", assert.type.string);
	}
	Object.defineProperty(hydrateTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	function detectChangesTemplate(type, body) {
	  assert.argumentTypes(type, assert.type.string, body, assert.type.string);
	  return assert.returnType("\n" + type + ".prototype.detectChangesInRecords = function(throwOnChange) {\n  " + body + "\n}\n", assert.type.string);
	}
	Object.defineProperty(detectChangesTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	function notifyOnAllChangesDoneTemplate(type, body) {
	  assert.argumentTypes(type, assert.type.string, body, assert.type.string);
	  return assert.returnType("\n" + type + ".prototype.notifyOnAllChangesDone = function() {\n  " + body + "\n}\n", assert.type.string);
	}
	Object.defineProperty(notifyOnAllChangesDoneTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	function onAllChangesDoneTemplate(index) {
	  assert.argumentTypes(index, assert.type.number);
	  return assert.returnType(DISPATCHER_ACCESSOR + ".onAllChangesDone(" + MEMENTOS_ACCESSOR + "[" + index + "]);", assert.type.string);
	}
	Object.defineProperty(onAllChangesDoneTemplate, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	function bodyTemplate(localDefinitions, changeDefinitions, records) {
	  assert.argumentTypes(localDefinitions, assert.type.string, changeDefinitions, assert.type.string, records, assert.type.string);
	  return assert.returnType("\n" + localDefinitions + "\n" + changeDefinitions + "\nvar " + TEMP_LOCAL + ";\nvar " + CHANGE_LOCAL + ";\nvar " + CHANGES_LOCAL + " = null;\n\ncontext = " + CONTEXT_ACCESSOR + ";\n" + records + "\n", assert.type.string);
	}
	Object.defineProperty(bodyTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	function notifyTemplate(index) {
	  assert.argumentTypes(index, assert.type.number);
	  return assert.returnType("\nif (" + CHANGES_LOCAL + " && " + CHANGES_LOCAL + ".length > 0) {\n  if(throwOnChange) " + UTIL + ".throwOnChange(" + PROTOS_ACCESSOR + "[" + index + "], " + CHANGES_LOCAL + "[0]);\n  " + DISPATCHER_ACCESSOR + ".onRecordChange(" + PROTOS_ACCESSOR + "[" + index + "].directiveMemento, " + CHANGES_LOCAL + ");\n  " + CHANGES_LOCAL + " = null;\n}\n", assert.type.string);
	}
	Object.defineProperty(notifyTemplate, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	function pipeCheckTemplate(context, bindingPropagationConfig, pipe, pipeType, value, change, addRecord, notify) {
	  assert.argumentTypes(context, assert.type.string, bindingPropagationConfig, assert.type.string, pipe, assert.type.string, pipeType, assert.type.string, value, assert.type.string, change, assert.type.string, addRecord, assert.type.string, notify, assert.type.string);
	  return assert.returnType("\nif (" + pipe + " === " + UTIL + ".unitialized()) {\n  " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + bindingPropagationConfig + ");\n} else if (!" + pipe + ".supports(" + context + ")) {\n  " + pipe + ".onDestroy();\n  " + pipe + " = " + PIPE_REGISTRY_ACCESSOR + ".get('" + pipeType + "', " + context + ", " + bindingPropagationConfig + ");\n}\n\n" + CHANGE_LOCAL + " = " + pipe + ".transform(" + context + ");\nif (! " + UTIL + ".noChangeMarker(" + CHANGE_LOCAL + ")) {\n  " + value + " = " + CHANGE_LOCAL + ";\n  " + change + " = true;\n  " + addRecord + "\n}\n" + notify + "\n", assert.type.string);
	}
	Object.defineProperty(pipeCheckTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	function referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {
	  return "\n" + assignment + "\nif (" + newValue + " !== " + oldValue + " || (" + newValue + " !== " + newValue + ") && (" + oldValue + " !== " + oldValue + ")) {\n  " + change + " = true;\n  " + addRecord + "\n  " + oldValue + " = " + newValue + ";\n}\n" + notify + "\n";
	}
	function assignmentTemplate(field, value) {
	  assert.argumentTypes(field, assert.type.string, value, assert.type.string);
	  return field + " = " + value + ";";
	}
	Object.defineProperty(assignmentTemplate, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	function localDefinitionsTemplate(names) {
	  return assert.returnType(names.map(function (n) {
	    return "var " + n + ";";
	  }).join("\n"), assert.type.string);
	}
	Object.defineProperty(localDefinitionsTemplate, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function changeDefinitionsTemplate(names) {
	  return assert.returnType(names.map(function (n) {
	    return "var " + n + " = false;";
	  }).join("\n"), assert.type.string);
	}
	Object.defineProperty(changeDefinitionsTemplate, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function fieldDefinitionsTemplate(names) {
	  return assert.returnType(names.map(function (n) {
	    return n + " = " + UTIL + ".unitialized();";
	  }).join("\n"), assert.type.string);
	}
	Object.defineProperty(fieldDefinitionsTemplate, "parameters", { get: function get() {
	    return [[List]];
	  } });
	function ifChangedGuardTemplate(changeNames, body) {
	  assert.argumentTypes(changeNames, List, body, assert.type.string);
	  var cond = changeNames.join(" || ");
	  return assert.returnType("\nif (" + cond + ") {\n  " + body + "\n}\n", assert.type.string);
	}
	Object.defineProperty(ifChangedGuardTemplate, "parameters", { get: function get() {
	    return [[List], [assert.type.string]];
	  } });
	function addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {
	  assert.argumentTypes(protoIndex, assert.type.number, oldValue, assert.type.string, newValue, assert.type.string);
	  return CHANGES_LOCAL + " = " + UTIL + ".addRecord(" + CHANGES_LOCAL + ",\n    " + UTIL + ".simpleChangeRecord(" + PROTOS_ACCESSOR + "[" + protoIndex + "].bindingMemento, " + oldValue + ", " + newValue + "));";
	}
	Object.defineProperty(addSimpleChangeRecordTemplate, "parameters", { get: function get() {
	    return [[assert.type.number], [assert.type.string], [assert.type.string]];
	  } });
	var ChangeDetectorJITGenerator = function ChangeDetectorJITGenerator(typeName, records, directiveMementos) {
	  assert.argumentTypes(typeName, assert.type.string, records, assert.genericType(List, ProtoRecord), directiveMementos, List);
	  this.typeName = typeName;
	  this.records = records;
	  this.directiveMementos = directiveMementos;
	  this.localNames = this.getLocalNames(records);
	  this.changeNames = this.getChangeNames(this.localNames);
	  this.fieldNames = this.getFieldNames(this.localNames);
	  this.pipeNames = this.getPipeNames(this.localNames);
	};
	$traceurRuntime.createClass(ChangeDetectorJITGenerator, {
	  getLocalNames: function getLocalNames(records) {
	    assert.argumentTypes(records, assert.genericType(List, ProtoRecord));
	    var index = 0;
	    var names = records.map(function (r) {
	      var sanitizedName = r.name.replace(new RegExp("\\W", "g"), '');
	      return "" + sanitizedName + index++;
	    });
	    return assert.returnType(["context"].concat(names), assert.genericType(List, String));
	  },
	  getChangeNames: function getChangeNames(localNames) {
	    return assert.returnType(localNames.map(function (n) {
	      return "change_" + n;
	    }), assert.genericType(List, String));
	  },
	  getFieldNames: function getFieldNames(localNames) {
	    return assert.returnType(localNames.map(function (n) {
	      return "this." + n;
	    }), assert.genericType(List, String));
	  },
	  getPipeNames: function getPipeNames(localNames) {
	    return assert.returnType(localNames.map(function (n) {
	      return "this." + n + "_pipe";
	    }), assert.genericType(List, String));
	  },
	  generate: function generate() {
	    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genNotifyOnAllChangesDone(), this.genHydrate());
	    return assert.returnType(new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveMementos', text)(AbstractChangeDetector, ChangeDetectionUtil, this.records, this.directiveMementos), Function);
	  },
	  genConstructor: function genConstructor() {
	    return assert.returnType(constructorTemplate(this.typeName, this.genFieldDefinitions()), assert.type.string);
	  },
	  genHydrate: function genHydrate() {
	    return assert.returnType(hydrateTemplate(this.typeName, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getNonNullPipeNames())), assert.type.string);
	  },
	  genFieldDefinitions: function genFieldDefinitions() {
	    var fields = [];
	    fields = fields.concat(this.fieldNames);
	    fields = fields.concat(this.getNonNullPipeNames());
	    return fieldDefinitionsTemplate(fields);
	  },
	  getNonNullPipeNames: function getNonNullPipeNames() {
	    var $__6 = this;
	    var pipes = [];
	    this.records.forEach(function (r) {
	      if (r.mode === RECORD_TYPE_PIPE || r.mode === RECORD_TYPE_BINDING_PIPE) {
	        pipes.push($__6.pipeNames[r.selfIndex]);
	      }
	    });
	    return assert.returnType(pipes, assert.genericType(List, String));
	  },
	  genDetectChanges: function genDetectChanges() {
	    var body = this.genBody();
	    return assert.returnType(detectChangesTemplate(this.typeName, body), assert.type.string);
	  },
	  genNotifyOnAllChangesDone: function genNotifyOnAllChangesDone() {
	    var notifications = [];
	    var mementos = this.directiveMementos;
	    for (var i = mementos.length - 1; i >= 0; --i) {
	      var memento = mementos[i];
	      if (memento.notifyOnAllChangesDone) {
	        notifications.push(onAllChangesDoneTemplate(i));
	      }
	    }
	    return assert.returnType(notifyOnAllChangesDoneTemplate(this.typeName, notifications.join(";\n")), assert.type.string);
	  },
	  genBody: function genBody() {
	    var $__6 = this;
	    var rec = this.records.map(function (r) {
	      return $__6.genRecord(r);
	    }).join("\n");
	    return assert.returnType(bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec), assert.type.string);
	  },
	  genLocalDefinitions: function genLocalDefinitions() {
	    return assert.returnType(localDefinitionsTemplate(this.localNames), assert.type.string);
	  },
	  genChangeDefinitions: function genChangeDefinitions() {
	    return assert.returnType(changeDefinitionsTemplate(this.changeNames), assert.type.string);
	  },
	  genRecord: function genRecord(r) {
	    assert.argumentTypes(r, ProtoRecord);
	    if (r.mode === RECORD_TYPE_PIPE || r.mode === RECORD_TYPE_BINDING_PIPE) {
	      return assert.returnType(this.genPipeCheck(r), assert.type.string);
	    } else {
	      return assert.returnType(this.genReferenceCheck(r), assert.type.string);
	    }
	  },
	  genPipeCheck: function genPipeCheck(r) {
	    assert.argumentTypes(r, ProtoRecord);
	    var context = this.localNames[r.contextIndex];
	    var pipe = this.pipeNames[r.selfIndex];
	    var newValue = this.localNames[r.selfIndex];
	    var oldValue = this.fieldNames[r.selfIndex];
	    var change = this.changeNames[r.selfIndex];
	    var bpc = r.mode === RECORD_TYPE_BINDING_PIPE ? "this.bindingPropagationConfig" : "null";
	    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);
	    var notify = this.genNotify(r);
	    return assert.returnType(pipeCheckTemplate(context, bpc, pipe, r.name, newValue, change, addRecord, notify), assert.type.string);
	  },
	  genReferenceCheck: function genReferenceCheck(r) {
	    assert.argumentTypes(r, ProtoRecord);
	    var newValue = this.localNames[r.selfIndex];
	    var oldValue = this.fieldNames[r.selfIndex];
	    var change = this.changeNames[r.selfIndex];
	    var assignment = this.genUpdateCurrentValue(r);
	    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);
	    var notify = this.genNotify(r);
	    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);
	    if (r.isPureFunction()) {
	      return assert.returnType(this.ifChangedGuard(r, check), assert.type.string);
	    } else {
	      return assert.returnType(check, assert.type.string);
	    }
	  },
	  genUpdateCurrentValue: function genUpdateCurrentValue(r) {
	    assert.argumentTypes(r, ProtoRecord);
	    var context = this.localNames[r.contextIndex];
	    var newValue = this.localNames[r.selfIndex];
	    var args = this.genArgs(r);
	    switch (r.mode) {
	      case RECORD_TYPE_SELF:
	        return assert.returnType(assignmentTemplate(newValue, context), assert.type.string);
	      case RECORD_TYPE_CONST:
	        return assert.returnType(newValue + " = " + this.genLiteral(r.funcOrValue), assert.type.string);
	      case RECORD_TYPE_PROPERTY:
	        return assert.returnType(assignmentTemplate(newValue, context + "." + r.name), assert.type.string);
	      case RECORD_TYPE_LOCAL:
	        return assert.returnType(assignmentTemplate(newValue, LOCALS_ACCESSOR + ".get('" + r.name + "')"), assert.type.string);
	      case RECORD_TYPE_INVOKE_METHOD:
	        return assert.returnType(assignmentTemplate(newValue, context + "." + r.name + "(" + args + ")"), assert.type.string);
	      case RECORD_TYPE_INVOKE_CLOSURE:
	        return assert.returnType(assignmentTemplate(newValue, context + "(" + args + ")"), assert.type.string);
	      case RECORD_TYPE_PRIMITIVE_OP:
	        return assert.returnType(assignmentTemplate(newValue, UTIL + "." + r.name + "(" + args + ")"), assert.type.string);
	      case RECORD_TYPE_INTERPOLATE:
	        return assert.returnType(assignmentTemplate(newValue, this.genInterpolation(r)), assert.type.string);
	      case RECORD_TYPE_KEYED_ACCESS:
	        var key = this.localNames[r.args[0]];
	        return assert.returnType(assignmentTemplate(newValue, context + "[" + key + "]"), assert.type.string);
	      default:
	        throw new BaseException("Unknown operation " + r.mode);
	    }
	  },
	  ifChangedGuard: function ifChangedGuard(r, body) {
	    var $__6 = this;
	    return assert.returnType(ifChangedGuardTemplate(r.args.map(function (a) {
	      return $__6.changeNames[a];
	    }), body), assert.type.string);
	  },
	  genInterpolation: function genInterpolation(r) {
	    assert.argumentTypes(r, ProtoRecord);
	    var res = "";
	    for (var i = 0; i < r.args.length; ++i) {
	      res += this.genLiteral(r.fixedArgs[i]);
	      res += " + ";
	      res += this.localNames[r.args[i]];
	      res += " + ";
	    }
	    res += this.genLiteral(r.fixedArgs[r.args.length]);
	    return assert.returnType(res, assert.type.string);
	  },
	  genLiteral: function genLiteral(value) {
	    return assert.returnType(JSON.stringify(value), assert.type.string);
	  },
	  genNotify: function genNotify(r) {
	    return assert.returnType(r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '', assert.type.string);
	  },
	  genArgs: function genArgs(r) {
	    var $__6 = this;
	    return assert.returnType(r.args.map(function (arg) {
	      return $__6.localNames[arg];
	    }).join(", "), assert.type.string);
	  }
	}, {});
	Object.defineProperty(ChangeDetectorJITGenerator, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.genericType(List, ProtoRecord)], [List]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, "parameters", { get: function get() {
	    return [[assert.genericType(List, ProtoRecord)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, "parameters", { get: function get() {
	    return [[assert.genericType(List, String)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, "parameters", { get: function get() {
	    return [[assert.genericType(List, String)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, "parameters", { get: function get() {
	    return [[assert.genericType(List, String)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.string]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, "parameters", { get: function get() {
	    return [[ProtoRecord]];
	  } });
	//# sourceMappingURL=change_detection_jit_generator.es6.map

	//# sourceMappingURL=./change_detection_jit_generator.map

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  coalesce: { get: function get() {
	      return coalesce;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__proto_95_record__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    Map = $__2.Map,
	    MapWrapper = $__2.MapWrapper;
	var $__3 = ($__proto_95_record__ = __webpack_require__(27), $__proto_95_record__ && $__proto_95_record__.__esModule && $__proto_95_record__ || { "default": $__proto_95_record__ }),
	    RECORD_TYPE_SELF = $__3.RECORD_TYPE_SELF,
	    ProtoRecord = $__3.ProtoRecord;
	function coalesce(records) {
	  assert.argumentTypes(records, assert.genericType(List, ProtoRecord));
	  var res = ListWrapper.create();
	  var indexMap = MapWrapper.create();
	  for (var i = 0; i < records.length; ++i) {
	    var r = records[i];
	    var record = _replaceIndices(r, res.length + 1, indexMap);
	    var matchingRecord = _findMatching(record, res);
	    if (isPresent(matchingRecord) && record.lastInBinding) {
	      ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));
	      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	    } else if (isPresent(matchingRecord) && !record.lastInBinding) {
	      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	    } else {
	      ListWrapper.push(res, record);
	      MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);
	    }
	  }
	  return assert.returnType(res, assert.genericType(List, ProtoRecord));
	}
	Object.defineProperty(coalesce, "parameters", { get: function get() {
	    return [[assert.genericType(List, ProtoRecord)]];
	  } });
	function _selfRecord(r, contextIndex, selfIndex) {
	  assert.argumentTypes(r, ProtoRecord, contextIndex, assert.type.number, selfIndex, assert.type.number);
	  return assert.returnType(new ProtoRecord(RECORD_TYPE_SELF, "self", null, [], r.fixedArgs, contextIndex, selfIndex, r.bindingMemento, r.directiveMemento, r.expressionAsString, r.lastInBinding, r.lastInDirective), ProtoRecord);
	}
	Object.defineProperty(_selfRecord, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.number], [assert.type.number]];
	  } });
	function _findMatching(r, rs) {
	  return ListWrapper.find(rs, function (rr) {
	    return rr.mode === r.mode && rr.funcOrValue === r.funcOrValue && rr.contextIndex === r.contextIndex && ListWrapper.equals(rr.args, r.args);
	  });
	}
	Object.defineProperty(_findMatching, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.genericType(List, ProtoRecord)]];
	  } });
	function _replaceIndices(r, selfIndex, indexMap) {
	  var args = ListWrapper.map(r.args, function (a) {
	    return _map(indexMap, a);
	  });
	  var contextIndex = _map(indexMap, r.contextIndex);
	  return new ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, selfIndex, r.bindingMemento, r.directiveMemento, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	Object.defineProperty(_replaceIndices, "parameters", { get: function get() {
	    return [[ProtoRecord], [assert.type.number], [Map]];
	  } });
	function _map(indexMap, value) {
	  assert.argumentTypes(indexMap, Map, value, assert.type.number);
	  var r = MapWrapper.get(indexMap, value);
	  return isPresent(r) ? r : value;
	}
	Object.defineProperty(_map, "parameters", { get: function get() {
	    return [[Map], [assert.type.number]];
	  } });
	//# sourceMappingURL=coalesce.js.map

	//# sourceMappingURL=./coalesce.map

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  IterableChangesFactory: { get: function get() {
	      return IterableChangesFactory;
	    } },
	  IterableChanges: { get: function get() {
	      return IterableChanges;
	    } },
	  CollectionChangeRecord: { get: function get() {
	      return CollectionChangeRecord;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__pipe__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    isListLikeIterable = $__1.isListLikeIterable,
	    iterateListLike = $__1.iterateListLike,
	    ListWrapper = $__1.ListWrapper,
	    MapWrapper = $__1.MapWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__2.int,
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    stringify = $__2.stringify,
	    getMapKey = $__2.getMapKey,
	    looseIdentical = $__2.looseIdentical;
	var $__3 = ($__pipe__ = __webpack_require__(31), $__pipe__ && $__pipe__.__esModule && $__pipe__ || { "default": $__pipe__ }),
	    NO_CHANGE = $__3.NO_CHANGE,
	    Pipe = $__3.Pipe;
	var IterableChangesFactory = function IterableChangesFactory() {
	  ;
	};
	$traceurRuntime.createClass(IterableChangesFactory, {
	  supports: function supports(obj) {
	    return assert.returnType(IterableChanges.supportsObj(obj), assert.type.boolean);
	  },
	  create: function create(bpc) {
	    return assert.returnType(new IterableChanges(), Pipe);
	  }
	}, {});
	var IterableChanges = function IterableChanges() {
	  $traceurRuntime.superConstructor($IterableChanges).call(this);
	  this._collection = null;
	  this._length = null;
	  this._linkedRecords = null;
	  this._unlinkedRecords = null;
	  this._previousItHead = null;
	  this._itHead = null;
	  this._itTail = null;
	  this._additionsHead = null;
	  this._additionsTail = null;
	  this._movesHead = null;
	  this._movesTail = null;
	  this._removalsHead = null;
	  this._removalsTail = null;
	};
	var $IterableChanges = IterableChanges;
	$traceurRuntime.createClass(IterableChanges, Object.defineProperties({
	  supports: function supports(obj) {
	    return assert.returnType($IterableChanges.supportsObj(obj), assert.type.boolean);
	  },

	  forEachItem: function forEachItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._itHead; record !== null; record = record._next) {
	      fn(record);
	    }
	  },
	  forEachPreviousItem: function forEachPreviousItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	      fn(record);
	    }
	  },
	  forEachAddedItem: function forEachAddedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	      fn(record);
	    }
	  },
	  forEachMovedItem: function forEachMovedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._movesHead; record !== null; record = record._nextMoved) {
	      fn(record);
	    }
	  },
	  forEachRemovedItem: function forEachRemovedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	      fn(record);
	    }
	  },
	  transform: function transform(collection) {
	    if (this.check(collection)) {
	      return this;
	    } else {
	      return NO_CHANGE;
	    }
	  },
	  check: function check(collection) {
	    var $__4 = this;
	    this._reset();
	    var record = assert.type(this._itHead, CollectionChangeRecord);
	    var mayBeDirty = assert.type(false, assert.type.boolean);
	    var index;
	    var item;
	    if (ListWrapper.isList(collection)) {
	      var list = collection;
	      this._length = collection.length;
	      for (index = 0; index < this._length; index++) {
	        item = list[index];
	        if (record === null || !looseIdentical(record.item, item)) {
	          record = this._mismatch(record, item, index);
	          mayBeDirty = true;
	        } else if (mayBeDirty) {
	          record = this._verifyReinsertion(record, item, index);
	        }
	        record = record._next;
	      }
	    } else {
	      index = 0;
	      iterateListLike(collection, function (item) {
	        if (record === null || !looseIdentical(record.item, item)) {
	          record = $__4._mismatch(record, item, index);
	          mayBeDirty = true;
	        } else if (mayBeDirty) {
	          record = $__4._verifyReinsertion(record, item, index);
	        }
	        record = record._next;
	        index++;
	      });
	      this._length = index;
	    }
	    this._truncate(record);
	    this._collection = collection;
	    return assert.returnType(this.isDirty, assert.type.boolean);
	  },

	  _reset: function _reset() {
	    if (this.isDirty) {
	      var record;
	      var nextRecord;
	      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	        record._nextPrevious = record._next;
	      }
	      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	        record.previousIndex = record.currentIndex;
	      }
	      this._additionsHead = this._additionsTail = null;
	      for (record = this._movesHead; record !== null; record = nextRecord) {
	        record.previousIndex = record.currentIndex;
	        nextRecord = record._nextMoved;
	      }
	      this._movesHead = this._movesTail = null;
	      this._removalsHead = this._removalsTail = null;
	    }
	  },
	  _mismatch: function _mismatch(record, item, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, item, assert.type.any, index, int);
	    var previousRecord;
	    if (record === null) {
	      previousRecord = this._itTail;
	    } else {
	      previousRecord = record._prev;
	      this._remove(record);
	    }
	    record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	    if (record !== null) {
	      this._moveAfter(record, previousRecord, index);
	    } else {
	      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	      if (record !== null) {
	        this._reinsertAfter(record, previousRecord, index);
	      } else {
	        record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	      }
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _verifyReinsertion: function _verifyReinsertion(record, item, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, item, assert.type.any, index, int);
	    var reinsertRecord = assert.type(this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item), CollectionChangeRecord);
	    if (reinsertRecord !== null) {
	      record = this._reinsertAfter(reinsertRecord, record._prev, index);
	    } else if (record.currentIndex != index) {
	      record.currentIndex = index;
	      this._addToMoves(record, index);
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _truncate: function _truncate(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    while (record !== null) {
	      var nextRecord = assert.type(record._next, CollectionChangeRecord);
	      this._addToRemovals(this._unlink(record));
	      record = nextRecord;
	    }
	    if (this._unlinkedRecords !== null) {
	      this._unlinkedRecords.clear();
	    }
	    if (this._additionsTail !== null) {
	      this._additionsTail._nextAdded = null;
	    }
	    if (this._movesTail !== null) {
	      this._movesTail._nextMoved = null;
	    }
	    if (this._itTail !== null) {
	      this._itTail._next = null;
	    }
	    if (this._removalsTail !== null) {
	      this._removalsTail._nextRemoved = null;
	    }
	  },
	  _reinsertAfter: function _reinsertAfter(record, prevRecord, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, int);
	    if (this._unlinkedRecords !== null) {
	      this._unlinkedRecords.remove(record);
	    }
	    var prev = record._prevRemoved;
	    var next = record._nextRemoved;
	    if (prev === null) {
	      this._removalsHead = next;
	    } else {
	      prev._nextRemoved = next;
	    }
	    if (next === null) {
	      this._removalsTail = prev;
	    } else {
	      next._prevRemoved = prev;
	    }
	    this._insertAfter(record, prevRecord, index);
	    this._addToMoves(record, index);
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _moveAfter: function _moveAfter(record, prevRecord, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, int);
	    this._unlink(record);
	    this._insertAfter(record, prevRecord, index);
	    this._addToMoves(record, index);
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _addAfter: function _addAfter(record, prevRecord, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, int);
	    this._insertAfter(record, prevRecord, index);
	    if (this._additionsTail === null) {
	      this._additionsTail = this._additionsHead = record;
	    } else {
	      this._additionsTail = this._additionsTail._nextAdded = record;
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _insertAfter: function _insertAfter(record, prevRecord, index) {
	    assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, int);
	    var next = assert.type(prevRecord === null ? this._itHead : prevRecord._next, CollectionChangeRecord);
	    record._next = next;
	    record._prev = prevRecord;
	    if (next === null) {
	      this._itTail = record;
	    } else {
	      next._prev = record;
	    }
	    if (prevRecord === null) {
	      this._itHead = record;
	    } else {
	      prevRecord._next = record;
	    }
	    if (this._linkedRecords === null) {
	      this._linkedRecords = new _DuplicateMap();
	    }
	    this._linkedRecords.put(record);
	    record.currentIndex = index;
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _remove: function _remove(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    return assert.returnType(this._addToRemovals(this._unlink(record)), CollectionChangeRecord);
	  },
	  _unlink: function _unlink(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    if (this._linkedRecords !== null) {
	      this._linkedRecords.remove(record);
	    }
	    var prev = record._prev;
	    var next = record._next;
	    if (prev === null) {
	      this._itHead = next;
	    } else {
	      prev._next = next;
	    }
	    if (next === null) {
	      this._itTail = prev;
	    } else {
	      next._prev = prev;
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _addToMoves: function _addToMoves(record, toIndex) {
	    assert.argumentTypes(record, CollectionChangeRecord, toIndex, int);
	    if (record.previousIndex === toIndex) {
	      return assert.returnType(record, CollectionChangeRecord);
	    }
	    if (this._movesTail === null) {
	      this._movesTail = this._movesHead = record;
	    } else {
	      this._movesTail = this._movesTail._nextMoved = record;
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  _addToRemovals: function _addToRemovals(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    if (this._unlinkedRecords === null) {
	      this._unlinkedRecords = new _DuplicateMap();
	    }
	    this._unlinkedRecords.put(record);
	    record.currentIndex = null;
	    record._nextRemoved = null;
	    if (this._removalsTail === null) {
	      this._removalsTail = this._removalsHead = record;
	      record._prevRemoved = null;
	    } else {
	      record._prevRemoved = this._removalsTail;
	      this._removalsTail = this._removalsTail._nextRemoved = record;
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },
	  toString: function toString() {
	    var record;
	    var list = [];
	    for (record = this._itHead; record !== null; record = record._next) {
	      ListWrapper.push(list, record);
	    }
	    var previous = [];
	    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	      ListWrapper.push(previous, record);
	    }
	    var additions = [];
	    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	      ListWrapper.push(additions, record);
	    }
	    var moves = [];
	    for (record = this._movesHead; record !== null; record = record._nextMoved) {
	      ListWrapper.push(moves, record);
	    }
	    var removals = [];
	    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	      ListWrapper.push(removals, record);
	    }
	    return assert.returnType("collection: " + list.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "moves: " + moves.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n", assert.type.string);
	  }
	}, {
	  collection: {
	    get: function get() {
	      return this._collection;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  length: {
	    get: function get() {
	      return assert.returnType(this._length, int);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  isDirty: {
	    get: function get() {
	      return assert.returnType(this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), { supportsObj: function supportsObj(obj) {
	    return assert.returnType(isListLikeIterable(obj), assert.type.boolean);
	  } }, Pipe);
	Object.defineProperty(IterableChanges.prototype.forEachItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachPreviousItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachAddedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachMovedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachRemovedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype._mismatch, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._verifyReinsertion, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._truncate, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._reinsertAfter, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._moveAfter, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addAfter, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._insertAfter, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._remove, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._unlink, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addToMoves, "parameters", { get: function get() {
	    return [[CollectionChangeRecord], [int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addToRemovals, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	var CollectionChangeRecord = function CollectionChangeRecord(item) {
	  this.currentIndex = null;
	  this.previousIndex = null;
	  this.item = item;
	  this._nextPrevious = null;
	  this._prev = null;
	  this._next = null;
	  this._prevDup = null;
	  this._nextDup = null;
	  this._prevRemoved = null;
	  this._nextRemoved = null;
	  this._nextAdded = null;
	  this._nextMoved = null;
	};
	$traceurRuntime.createClass(CollectionChangeRecord, { toString: function toString() {
	    return assert.returnType(this.previousIndex === this.currentIndex ? stringify(this.item) : stringify(this.item) + '[' + stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']', assert.type.string);
	  } }, {});
	var _DuplicateItemRecordList = function _DuplicateItemRecordList() {
	  this._head = null;
	  this._tail = null;
	};
	$traceurRuntime.createClass(_DuplicateItemRecordList, {
	  add: function add(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    if (this._head === null) {
	      this._head = this._tail = record;
	      record._nextDup = null;
	      record._prevDup = null;
	    } else {
	      this._tail._nextDup = record;
	      record._prevDup = this._tail;
	      record._nextDup = null;
	      this._tail = record;
	    }
	  },
	  get: function get(item, afterIndex) {
	    assert.argumentTypes(item, assert.type.any, afterIndex, int);
	    var record;
	    for (record = this._head; record !== null; record = record._nextDup) {
	      if ((afterIndex === null || afterIndex < record.currentIndex) && looseIdentical(record.item, item)) {
	        return assert.returnType(record, CollectionChangeRecord);
	      }
	    }
	    return assert.returnType(null, CollectionChangeRecord);
	  },
	  remove: function remove(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    var prev = assert.type(record._prevDup, CollectionChangeRecord);
	    var next = assert.type(record._nextDup, CollectionChangeRecord);
	    if (prev === null) {
	      this._head = next;
	    } else {
	      prev._nextDup = next;
	    }
	    if (next === null) {
	      this._tail = prev;
	    } else {
	      next._prevDup = prev;
	    }
	    return assert.returnType(this._head === null, assert.type.boolean);
	  }
	}, {});
	Object.defineProperty(_DuplicateItemRecordList.prototype.add, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(_DuplicateItemRecordList.prototype.get, "parameters", { get: function get() {
	    return [[], [int]];
	  } });
	Object.defineProperty(_DuplicateItemRecordList.prototype.remove, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	var _DuplicateMap = function _DuplicateMap() {
	  this.map = MapWrapper.create();
	};
	$traceurRuntime.createClass(_DuplicateMap, Object.defineProperties({
	  put: function put(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    var key = getMapKey(record.item);
	    var duplicates = MapWrapper.get(this.map, key);
	    if (!isPresent(duplicates)) {
	      duplicates = new _DuplicateItemRecordList();
	      MapWrapper.set(this.map, key, duplicates);
	    }
	    duplicates.add(record);
	  },
	  get: function get(value) {
	    var afterIndex = arguments[1] !== void 0 ? arguments[1] : null;
	    var key = getMapKey(value);
	    var recordList = MapWrapper.get(this.map, key);
	    return assert.returnType(isBlank(recordList) ? null : recordList.get(value, afterIndex), CollectionChangeRecord);
	  },
	  remove: function remove(record) {
	    assert.argumentTypes(record, CollectionChangeRecord);
	    var key = getMapKey(record.item);
	    var recordList = assert.type(MapWrapper.get(this.map, key), _DuplicateItemRecordList);
	    if (recordList.remove(record)) {
	      MapWrapper["delete"](this.map, key);
	    }
	    return assert.returnType(record, CollectionChangeRecord);
	  },

	  clear: function clear() {
	    MapWrapper.clear(this.map);
	  },
	  toString: function toString() {
	    return assert.returnType('_DuplicateMap(' + stringify(this.map) + ')', assert.type.string);
	  }
	}, {
	  isEmpty: {
	    get: function get() {
	      return assert.returnType(MapWrapper.size(this.map) === 0, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(_DuplicateMap.prototype.put, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(_DuplicateMap.prototype.remove, "parameters", { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	//# sourceMappingURL=iterable_changes.js.map

	//# sourceMappingURL=./iterable_changes.map

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  KeyValueChangesFactory: { get: function get() {
	      return KeyValueChangesFactory;
	    } },
	  KeyValueChanges: { get: function get() {
	      return KeyValueChanges;
	    } },
	  KVChangeRecord: { get: function get() {
	      return KVChangeRecord;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__pipe__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__1.ListWrapper,
	    MapWrapper = $__1.MapWrapper,
	    StringMapWrapper = $__1.StringMapWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    stringify = $__2.stringify,
	    looseIdentical = $__2.looseIdentical,
	    isJsObject = $__2.isJsObject;
	var $__3 = ($__pipe__ = __webpack_require__(31), $__pipe__ && $__pipe__.__esModule && $__pipe__ || { "default": $__pipe__ }),
	    NO_CHANGE = $__3.NO_CHANGE,
	    Pipe = $__3.Pipe;
	var KeyValueChangesFactory = function KeyValueChangesFactory() {
	  ;
	};
	$traceurRuntime.createClass(KeyValueChangesFactory, {
	  supports: function supports(obj) {
	    return assert.returnType(KeyValueChanges.supportsObj(obj), assert.type.boolean);
	  },
	  create: function create(bpc) {
	    return assert.returnType(new KeyValueChanges(), Pipe);
	  }
	}, {});
	var KeyValueChanges = function KeyValueChanges() {
	  $traceurRuntime.superConstructor($KeyValueChanges).call(this);
	  this._records = MapWrapper.create();
	  this._mapHead = null;
	  this._previousMapHead = null;
	  this._changesHead = null;
	  this._changesTail = null;
	  this._additionsHead = null;
	  this._additionsTail = null;
	  this._removalsHead = null;
	  this._removalsTail = null;
	};
	var $KeyValueChanges = KeyValueChanges;
	$traceurRuntime.createClass(KeyValueChanges, Object.defineProperties({
	  supports: function supports(obj) {
	    return assert.returnType($KeyValueChanges.supportsObj(obj), assert.type.boolean);
	  },
	  transform: function transform(map) {
	    if (this.check(map)) {
	      return this;
	    } else {
	      return NO_CHANGE;
	    }
	  },

	  forEachItem: function forEachItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._mapHead; record !== null; record = record._next) {
	      fn(record);
	    }
	  },
	  forEachPreviousItem: function forEachPreviousItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	      fn(record);
	    }
	  },
	  forEachChangedItem: function forEachChangedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._changesHead; record !== null; record = record._nextChanged) {
	      fn(record);
	    }
	  },
	  forEachAddedItem: function forEachAddedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	      fn(record);
	    }
	  },
	  forEachRemovedItem: function forEachRemovedItem(fn) {
	    assert.argumentTypes(fn, Function);
	    var record;
	    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	      fn(record);
	    }
	  },
	  check: function check(map) {
	    var $__4 = this;
	    this._reset();
	    var records = this._records;
	    var oldSeqRecord = assert.type(this._mapHead, KVChangeRecord);
	    var lastOldSeqRecord = assert.type(null, KVChangeRecord);
	    var lastNewSeqRecord = assert.type(null, KVChangeRecord);
	    var seqChanged = assert.type(false, assert.type.boolean);
	    this._forEach(map, function (value, key) {
	      var newSeqRecord;
	      if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	        newSeqRecord = oldSeqRecord;
	        if (!looseIdentical(value, oldSeqRecord.currentValue)) {
	          oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	          oldSeqRecord.currentValue = value;
	          $__4._addToChanges(oldSeqRecord);
	        }
	      } else {
	        seqChanged = true;
	        if (oldSeqRecord !== null) {
	          oldSeqRecord._next = null;
	          $__4._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	          $__4._addToRemovals(oldSeqRecord);
	        }
	        if (MapWrapper.contains(records, key)) {
	          newSeqRecord = MapWrapper.get(records, key);
	        } else {
	          newSeqRecord = new KVChangeRecord(key);
	          MapWrapper.set(records, key, newSeqRecord);
	          newSeqRecord.currentValue = value;
	          $__4._addToAdditions(newSeqRecord);
	        }
	      }
	      if (seqChanged) {
	        if ($__4._isInRemovals(newSeqRecord)) {
	          $__4._removeFromRemovals(newSeqRecord);
	        }
	        if (lastNewSeqRecord == null) {
	          $__4._mapHead = newSeqRecord;
	        } else {
	          lastNewSeqRecord._next = newSeqRecord;
	        }
	      }
	      lastOldSeqRecord = oldSeqRecord;
	      lastNewSeqRecord = newSeqRecord;
	      oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	    });
	    this._truncate(lastOldSeqRecord, oldSeqRecord);
	    return assert.returnType(this.isDirty, assert.type.boolean);
	  },
	  _reset: function _reset() {
	    if (this.isDirty) {
	      var record;
	      for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	        record._nextPrevious = record._next;
	      }
	      for (record = this._changesHead; record !== null; record = record._nextChanged) {
	        record.previousValue = record.currentValue;
	      }
	      for (record = this._additionsHead; record != null; record = record._nextAdded) {
	        record.previousValue = record.currentValue;
	      }
	      this._changesHead = this._changesTail = null;
	      this._additionsHead = this._additionsTail = null;
	      this._removalsHead = this._removalsTail = null;
	    }
	  },
	  _truncate: function _truncate(lastRecord, record) {
	    assert.argumentTypes(lastRecord, KVChangeRecord, record, KVChangeRecord);
	    while (record !== null) {
	      if (lastRecord === null) {
	        this._mapHead = null;
	      } else {
	        lastRecord._next = null;
	      }
	      var nextRecord = record._next;
	      this._addToRemovals(record);
	      lastRecord = record;
	      record = nextRecord;
	    }
	    for (var rec = assert.type(this._removalsHead, KVChangeRecord); rec !== null; rec = rec._nextRemoved) {
	      rec.previousValue = rec.currentValue;
	      rec.currentValue = null;
	      MapWrapper["delete"](this._records, rec.key);
	    }
	  },
	  _isInRemovals: function _isInRemovals(record) {
	    assert.argumentTypes(record, KVChangeRecord);
	    return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
	  },
	  _addToRemovals: function _addToRemovals(record) {
	    assert.argumentTypes(record, KVChangeRecord);
	    if (this._removalsHead === null) {
	      this._removalsHead = this._removalsTail = record;
	    } else {
	      this._removalsTail._nextRemoved = record;
	      record._prevRemoved = this._removalsTail;
	      this._removalsTail = record;
	    }
	  },
	  _removeFromSeq: function _removeFromSeq(prev, record) {
	    assert.argumentTypes(prev, KVChangeRecord, record, KVChangeRecord);
	    var next = record._next;
	    if (prev === null) {
	      this._mapHead = next;
	    } else {
	      prev._next = next;
	    }
	  },
	  _removeFromRemovals: function _removeFromRemovals(record) {
	    assert.argumentTypes(record, KVChangeRecord);
	    var prev = record._prevRemoved;
	    var next = record._nextRemoved;
	    if (prev === null) {
	      this._removalsHead = next;
	    } else {
	      prev._nextRemoved = next;
	    }
	    if (next === null) {
	      this._removalsTail = prev;
	    } else {
	      next._prevRemoved = prev;
	    }
	    record._prevRemoved = record._nextRemoved = null;
	  },
	  _addToAdditions: function _addToAdditions(record) {
	    assert.argumentTypes(record, KVChangeRecord);
	    if (this._additionsHead === null) {
	      this._additionsHead = this._additionsTail = record;
	    } else {
	      this._additionsTail._nextAdded = record;
	      this._additionsTail = record;
	    }
	  },
	  _addToChanges: function _addToChanges(record) {
	    assert.argumentTypes(record, KVChangeRecord);
	    if (this._changesHead === null) {
	      this._changesHead = this._changesTail = record;
	    } else {
	      this._changesTail._nextChanged = record;
	      this._changesTail = record;
	    }
	  },
	  toString: function toString() {
	    var items = [];
	    var previous = [];
	    var changes = [];
	    var additions = [];
	    var removals = [];
	    var record;
	    for (record = this._mapHead; record !== null; record = record._next) {
	      ListWrapper.push(items, stringify(record));
	    }
	    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	      ListWrapper.push(previous, stringify(record));
	    }
	    for (record = this._changesHead; record !== null; record = record._nextChanged) {
	      ListWrapper.push(changes, stringify(record));
	    }
	    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	      ListWrapper.push(additions, stringify(record));
	    }
	    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	      ListWrapper.push(removals, stringify(record));
	    }
	    return assert.returnType("map: " + items.join(', ') + "\n" + "previous: " + previous.join(', ') + "\n" + "additions: " + additions.join(', ') + "\n" + "changes: " + changes.join(', ') + "\n" + "removals: " + removals.join(', ') + "\n", assert.type.string);
	  },
	  _forEach: function _forEach(obj, fn) {
	    assert.argumentTypes(obj, assert.type.any, fn, Function);
	    if (obj instanceof Map) {
	      MapWrapper.forEach(obj, fn);
	    } else {
	      StringMapWrapper.forEach(obj, fn);
	    }
	  }
	}, {
	  isDirty: {
	    get: function get() {
	      return assert.returnType(this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), { supportsObj: function supportsObj(obj) {
	    return assert.returnType(obj instanceof Map || isJsObject(obj), assert.type.boolean);
	  } }, Pipe);
	Object.defineProperty(KeyValueChanges.prototype.forEachItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachPreviousItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachChangedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachAddedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachRemovedItem, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._truncate, "parameters", { get: function get() {
	    return [[KVChangeRecord], [KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._isInRemovals, "parameters", { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToRemovals, "parameters", { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._removeFromSeq, "parameters", { get: function get() {
	    return [[KVChangeRecord], [KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._removeFromRemovals, "parameters", { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToAdditions, "parameters", { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToChanges, "parameters", { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._forEach, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	var KVChangeRecord = function KVChangeRecord(key) {
	  this.key = key;
	  this.previousValue = null;
	  this.currentValue = null;
	  this._nextPrevious = null;
	  this._next = null;
	  this._nextAdded = null;
	  this._nextRemoved = null;
	  this._prevRemoved = null;
	  this._nextChanged = null;
	};
	$traceurRuntime.createClass(KVChangeRecord, { toString: function toString() {
	    return assert.returnType(looseIdentical(this.previousValue, this.currentValue) ? stringify(this.key) : stringify(this.key) + '[' + stringify(this.previousValue) + '->' + stringify(this.currentValue) + ']', assert.type.string);
	  } }, {});
	//# sourceMappingURL=keyvalue_changes.js.map

	//# sourceMappingURL=./keyvalue_changes.map

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  NullPipeFactory: { get: function get() {
	      return NullPipeFactory;
	    } },
	  NullPipe: { get: function get() {
	      return NullPipe;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__pipe__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isBlank = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isBlank;
	var $__2 = ($__pipe__ = __webpack_require__(31), $__pipe__ && $__pipe__.__esModule && $__pipe__ || { "default": $__pipe__ }),
	    Pipe = $__2.Pipe,
	    NO_CHANGE = $__2.NO_CHANGE;
	var NullPipeFactory = function NullPipeFactory() {
	  ;
	};
	$traceurRuntime.createClass(NullPipeFactory, {
	  supports: function supports(obj) {
	    return assert.returnType(NullPipe.supportsObj(obj), assert.type.boolean);
	  },
	  create: function create(bpc) {
	    return assert.returnType(new NullPipe(), Pipe);
	  }
	}, {});
	var NullPipe = function NullPipe() {
	  $traceurRuntime.superConstructor($NullPipe).call(this);
	  this.called = false;
	};
	var $NullPipe = NullPipe;
	$traceurRuntime.createClass(NullPipe, {
	  supports: function supports(obj) {
	    return $NullPipe.supportsObj(obj);
	  },
	  transform: function transform(value) {
	    if (!this.called) {
	      this.called = true;
	      return null;
	    } else {
	      return NO_CHANGE;
	    }
	  }
	}, { supportsObj: function supportsObj(obj) {
	    return assert.returnType(isBlank(obj), assert.type.boolean);
	  } }, Pipe);
	//# sourceMappingURL=null_pipe.js.map

	//# sourceMappingURL=./null_pipe.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__src_47_core_47_annotations_47_visibility__, $__src_47_core_47_compiler_47_interfaces__, $__src_47_core_47_annotations_47_template__, $__src_47_core_47_application__, $__src_47_core_47_annotations_47_di__, $__src_47_core_47_compiler_47_compiler__, $__src_47_core_47_compiler_47_template_95_loader__, $__src_47_core_47_compiler_47_view__, $__src_47_core_47_compiler_47_view_95_container__, $__src_47_core_47_dom_47_element__;
	var $__src_47_core_47_annotations_47_visibility__ = ($__src_47_core_47_annotations_47_visibility__ = __webpack_require__(42), $__src_47_core_47_annotations_47_visibility__ && $__src_47_core_47_annotations_47_visibility__.__esModule && $__src_47_core_47_annotations_47_visibility__ || { "default": $__src_47_core_47_annotations_47_visibility__ });
	var $__src_47_core_47_compiler_47_interfaces__ = ($__src_47_core_47_compiler_47_interfaces__ = __webpack_require__(43), $__src_47_core_47_compiler_47_interfaces__ && $__src_47_core_47_compiler_47_interfaces__.__esModule && $__src_47_core_47_compiler_47_interfaces__ || { "default": $__src_47_core_47_compiler_47_interfaces__ });
	var $__src_47_core_47_annotations_47_template__ = ($__src_47_core_47_annotations_47_template__ = __webpack_require__(44), $__src_47_core_47_annotations_47_template__ && $__src_47_core_47_annotations_47_template__.__esModule && $__src_47_core_47_annotations_47_template__ || { "default": $__src_47_core_47_annotations_47_template__ });
	var $__src_47_core_47_application__ = ($__src_47_core_47_application__ = __webpack_require__(45), $__src_47_core_47_application__ && $__src_47_core_47_application__.__esModule && $__src_47_core_47_application__ || { "default": $__src_47_core_47_application__ });
	var $__src_47_core_47_annotations_47_di__ = ($__src_47_core_47_annotations_47_di__ = __webpack_require__(56), $__src_47_core_47_annotations_47_di__ && $__src_47_core_47_annotations_47_di__.__esModule && $__src_47_core_47_annotations_47_di__ || { "default": $__src_47_core_47_annotations_47_di__ });
	var $__src_47_core_47_compiler_47_compiler__ = ($__src_47_core_47_compiler_47_compiler__ = __webpack_require__(49), $__src_47_core_47_compiler_47_compiler__ && $__src_47_core_47_compiler_47_compiler__.__esModule && $__src_47_core_47_compiler_47_compiler__ || { "default": $__src_47_core_47_compiler_47_compiler__ });
	var $__src_47_core_47_compiler_47_template_95_loader__ = ($__src_47_core_47_compiler_47_template_95_loader__ = __webpack_require__(89), $__src_47_core_47_compiler_47_template_95_loader__ && $__src_47_core_47_compiler_47_template_95_loader__.__esModule && $__src_47_core_47_compiler_47_template_95_loader__ || { "default": $__src_47_core_47_compiler_47_template_95_loader__ });
	var $__src_47_core_47_compiler_47_view__ = ($__src_47_core_47_compiler_47_view__ = __webpack_require__(53), $__src_47_core_47_compiler_47_view__ && $__src_47_core_47_compiler_47_view__.__esModule && $__src_47_core_47_compiler_47_view__ || { "default": $__src_47_core_47_compiler_47_view__ });
	var $__src_47_core_47_compiler_47_view_95_container__ = ($__src_47_core_47_compiler_47_view_95_container__ = __webpack_require__(57), $__src_47_core_47_compiler_47_view_95_container__ && $__src_47_core_47_compiler_47_view_95_container__.__esModule && $__src_47_core_47_compiler_47_view_95_container__ || { "default": $__src_47_core_47_compiler_47_view_95_container__ });
	var $__src_47_core_47_dom_47_element__ = ($__src_47_core_47_dom_47_element__ = __webpack_require__(62), $__src_47_core_47_dom_47_element__ && $__src_47_core_47_dom_47_element__.__esModule && $__src_47_core_47_dom_47_element__ || { "default": $__src_47_core_47_dom_47_element__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__src_47_core_47_annotations_47_visibility__, $__src_47_core_47_compiler_47_interfaces__, $__src_47_core_47_annotations_47_template__, $__src_47_core_47_application__, $__src_47_core_47_annotations_47_di__, $__src_47_core_47_compiler_47_compiler__, $__src_47_core_47_compiler_47_template_95_loader__, $__src_47_core_47_compiler_47_view__, $__src_47_core_47_compiler_47_view_95_container__, $__src_47_core_47_dom_47_element__);
	//# sourceMappingURL=core.js.map

	//# sourceMappingURL=./core.map

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Parent: { get: function get() {
	      return Parent;
	    } },
	  Ancestor: { get: function get() {
	      return Ancestor;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__, $__angular2_47_di__;
	var CONST = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).CONST;
	var DependencyAnnotation = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).DependencyAnnotation;
	var Parent = function Parent() {
	  $traceurRuntime.superConstructor($Parent).call(this);
	};
	var $Parent = Parent;
	$traceurRuntime.createClass(Parent, {}, {}, DependencyAnnotation);
	Object.defineProperty(Parent, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Ancestor = function Ancestor() {
	  $traceurRuntime.superConstructor($Ancestor).call(this);
	};
	var $Ancestor = Ancestor;
	$traceurRuntime.createClass(Ancestor, {}, {}, DependencyAnnotation);
	Object.defineProperty(Ancestor, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	//# sourceMappingURL=visibility.js.map

	//# sourceMappingURL=./visibility.map

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperties(module.exports, {
	  OnChange: { get: function get() {
	      return OnChange;
	    } },
	  __esModule: { value: true }
	});
	var OnChange = function OnChange() {
	  ;
	};
	$traceurRuntime.createClass(OnChange, { onChange: function onChange(changes) {
	    throw "OnChange.onChange is not implemented";
	  } }, {});
	//# sourceMappingURL=interfaces.js.map

	//# sourceMappingURL=./interfaces.map

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Template: { get: function get() {
	      return Template;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__;
	var $__0 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    ABSTRACT = $__0.ABSTRACT,
	    CONST = $__0.CONST,
	    Type = $__0.Type;
	var Template = function Template($__2) {
	  var $__3 = $__2,
	      url = $__3.url,
	      inline = $__3.inline,
	      directives = $__3.directives,
	      formatters = $__3.formatters,
	      source = $__3.source,
	      locale = $__3.locale,
	      device = $__3.device;
	  this.url = url;
	  this.inline = inline;
	  this.directives = directives;
	  this.formatters = formatters;
	  this.source = source;
	  this.locale = locale;
	  this.device = device;
	};
	$traceurRuntime.createClass(Template, {}, {});
	Object.defineProperty(Template, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	//# sourceMappingURL=template.js.map

	//# sourceMappingURL=./template.map

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  appViewToken: { get: function get() {
	      return appViewToken;
	    } },
	  appChangeDetectorToken: { get: function get() {
	      return appChangeDetectorToken;
	    } },
	  appElementToken: { get: function get() {
	      return appElementToken;
	    } },
	  appComponentAnnotatedTypeToken: { get: function get() {
	      return appComponentAnnotatedTypeToken;
	    } },
	  appDocumentToken: { get: function get() {
	      return appDocumentToken;
	    } },
	  bootstrap: { get: function get() {
	      return bootstrap;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_dom_47_browser_95_adapter__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__compiler_47_compiler__, $__compiler_47_view__, $__angular2_47_src_47_reflection_47_reflection__, $__angular2_47_change_95_detection__, $__exception_95_handler__, $__compiler_47_template_95_loader__, $__compiler_47_template_95_resolver__, $__compiler_47_directive_95_metadata_95_reader__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_async__, $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__, $__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__, $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__, $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__, $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__, $__angular2_47_src_47_core_47_events_47_event_95_manager__, $__angular2_47_src_47_core_47_events_47_hammer_95_gestures__, $__angular2_47_src_47_di_47_binding__, $__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__, $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__, $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__, $__angular2_47_src_47_core_47_compiler_47_style_95_inliner__, $__angular2_47_src_47_core_47_compiler_47_css_95_processor__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }),
	    Injector = $__1.Injector,
	    bind = $__1.bind,
	    OpaqueToken = $__1.OpaqueToken;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__2.Type,
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    assertionsEnabled = $__2.assertionsEnabled,
	    print = $__2.print,
	    stringify = $__2.stringify;
	var BrowserDomAdapter = ($__angular2_47_src_47_dom_47_browser_95_adapter__ = __webpack_require__(46), $__angular2_47_src_47_dom_47_browser_95_adapter__ && $__angular2_47_src_47_dom_47_browser_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_browser_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_browser_95_adapter__ }).BrowserDomAdapter;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__5 = ($__compiler_47_compiler__ = __webpack_require__(49), $__compiler_47_compiler__ && $__compiler_47_compiler__.__esModule && $__compiler_47_compiler__ || { "default": $__compiler_47_compiler__ }),
	    Compiler = $__5.Compiler,
	    CompilerCache = $__5.CompilerCache;
	var ProtoView = ($__compiler_47_view__ = __webpack_require__(53), $__compiler_47_view__ && $__compiler_47_view__.__esModule && $__compiler_47_view__ || { "default": $__compiler_47_view__ }).ProtoView;
	var $__7 = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }),
	    Reflector = $__7.Reflector,
	    reflector = $__7.reflector;
	var $__8 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    Parser = $__8.Parser,
	    Lexer = $__8.Lexer,
	    ChangeDetection = $__8.ChangeDetection,
	    dynamicChangeDetection = $__8.dynamicChangeDetection,
	    jitChangeDetection = $__8.jitChangeDetection;
	var ExceptionHandler = ($__exception_95_handler__ = __webpack_require__(92), $__exception_95_handler__ && $__exception_95_handler__.__esModule && $__exception_95_handler__ || { "default": $__exception_95_handler__ }).ExceptionHandler;
	var TemplateLoader = ($__compiler_47_template_95_loader__ = __webpack_require__(89), $__compiler_47_template_95_loader__ && $__compiler_47_template_95_loader__.__esModule && $__compiler_47_template_95_loader__ || { "default": $__compiler_47_template_95_loader__ }).TemplateLoader;
	var TemplateResolver = ($__compiler_47_template_95_resolver__ = __webpack_require__(90), $__compiler_47_template_95_resolver__ && $__compiler_47_template_95_resolver__.__esModule && $__compiler_47_template_95_resolver__ || { "default": $__compiler_47_template_95_resolver__ }).TemplateResolver;
	var DirectiveMetadataReader = ($__compiler_47_directive_95_metadata_95_reader__ = __webpack_require__(50), $__compiler_47_directive_95_metadata_95_reader__ && $__compiler_47_directive_95_metadata_95_reader__.__esModule && $__compiler_47_directive_95_metadata_95_reader__ || { "default": $__compiler_47_directive_95_metadata_95_reader__ }).DirectiveMetadataReader;
	var $__13 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__13.List,
	    ListWrapper = $__13.ListWrapper;
	var $__14 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Promise = $__14.Promise,
	    PromiseWrapper = $__14.PromiseWrapper;
	var VmTurnZone = ($__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ = __webpack_require__(59), $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__.__esModule && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ || { "default": $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ }).VmTurnZone;
	var LifeCycle = ($__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__ = __webpack_require__(93), $__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__ && $__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__.__esModule && $__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__ || { "default": $__angular2_47_src_47_core_47_life_95_cycle_47_life_95_cycle__ }).LifeCycle;
	var $__17 = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ = __webpack_require__(64), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ || { "default": $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ }),
	    ShadowDomStrategy = $__17.ShadowDomStrategy,
	    NativeShadowDomStrategy = $__17.NativeShadowDomStrategy,
	    EmulatedUnscopedShadowDomStrategy = $__17.EmulatedUnscopedShadowDomStrategy;
	var XHR = ($__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ = __webpack_require__(67), $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__.__esModule && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ || { "default": $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ }).XHR;
	var XHRImpl = ($__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__ = __webpack_require__(94), $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__ && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__.__esModule && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__ || { "default": $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr_95_impl__ }).XHRImpl;
	var $__20 = ($__angular2_47_src_47_core_47_events_47_event_95_manager__ = __webpack_require__(58), $__angular2_47_src_47_core_47_events_47_event_95_manager__ && $__angular2_47_src_47_core_47_events_47_event_95_manager__.__esModule && $__angular2_47_src_47_core_47_events_47_event_95_manager__ || { "default": $__angular2_47_src_47_core_47_events_47_event_95_manager__ }),
	    EventManager = $__20.EventManager,
	    DomEventsPlugin = $__20.DomEventsPlugin;
	var HammerGesturesPlugin = ($__angular2_47_src_47_core_47_events_47_hammer_95_gestures__ = __webpack_require__(95), $__angular2_47_src_47_core_47_events_47_hammer_95_gestures__ && $__angular2_47_src_47_core_47_events_47_hammer_95_gestures__.__esModule && $__angular2_47_src_47_core_47_events_47_hammer_95_gestures__ || { "default": $__angular2_47_src_47_core_47_events_47_hammer_95_gestures__ }).HammerGesturesPlugin;
	var Binding = ($__angular2_47_src_47_di_47_binding__ = __webpack_require__(12), $__angular2_47_src_47_di_47_binding__ && $__angular2_47_src_47_di_47_binding__.__esModule && $__angular2_47_src_47_di_47_binding__ || { "default": $__angular2_47_src_47_di_47_binding__ }).Binding;
	var ComponentUrlMapper = ($__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__ = __webpack_require__(91), $__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__ && $__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__.__esModule && $__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__ || { "default": $__angular2_47_src_47_core_47_compiler_47_component_95_url_95_mapper__ }).ComponentUrlMapper;
	var UrlResolver = ($__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ = __webpack_require__(69), $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ && $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__.__esModule && $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ || { "default": $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ }).UrlResolver;
	var StyleUrlResolver = ($__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ = __webpack_require__(68), $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ && $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__.__esModule && $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ || { "default": $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ }).StyleUrlResolver;
	var StyleInliner = ($__angular2_47_src_47_core_47_compiler_47_style_95_inliner__ = __webpack_require__(66), $__angular2_47_src_47_core_47_compiler_47_style_95_inliner__ && $__angular2_47_src_47_core_47_compiler_47_style_95_inliner__.__esModule && $__angular2_47_src_47_core_47_compiler_47_style_95_inliner__ || { "default": $__angular2_47_src_47_core_47_compiler_47_style_95_inliner__ }).StyleInliner;
	var CssProcessor = ($__angular2_47_src_47_core_47_compiler_47_css_95_processor__ = __webpack_require__(88), $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ && $__angular2_47_src_47_core_47_compiler_47_css_95_processor__.__esModule && $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ || { "default": $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ }).CssProcessor;
	var Component = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Component;
	var PrivateComponentLoader = ($__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__ = __webpack_require__(97), $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__ && $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__.__esModule && $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__ || { "default": $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_loader__ }).PrivateComponentLoader;
	var _rootInjector;
	var _rootBindings = [bind(Reflector).toValue(reflector)];
	var appViewToken = new OpaqueToken('AppView');
	var appChangeDetectorToken = new OpaqueToken('AppChangeDetector');
	var appElementToken = new OpaqueToken('AppElement');
	var appComponentAnnotatedTypeToken = new OpaqueToken('AppComponentAnnotatedType');
	var appDocumentToken = new OpaqueToken('AppDocument');
	function _injectorBindings(appComponentType) {
	  return assert.returnType([bind(appDocumentToken).toValue(DOM.defaultDoc()), bind(appComponentAnnotatedTypeToken).toFactory(function (reader) {
	    return reader.read(appComponentType);
	  }, [DirectiveMetadataReader]), bind(appElementToken).toFactory(function (appComponentAnnotatedType, appDocument) {
	    var selector = appComponentAnnotatedType.annotation.selector;
	    var element = DOM.querySelector(appDocument, selector);
	    if (isBlank(element)) {
	      throw new BaseException("The app selector \"" + selector + "\" did not match any elements");
	    }
	    return element;
	  }, [appComponentAnnotatedTypeToken, appDocumentToken]), bind(appViewToken).toAsyncFactory(function (changeDetection, compiler, injector, appElement, appComponentAnnotatedType, strategy, eventManager) {
	    var annotation = appComponentAnnotatedType.annotation;
	    if (!isBlank(annotation) && !(annotation instanceof Component)) {
	      var type = appComponentAnnotatedType.type;
	      throw new BaseException("Only Components can be bootstrapped; " + ("Directive of " + stringify(type) + " is not a Component"));
	    }
	    return compiler.compile(appComponentAnnotatedType.type).then(function (protoView) {
	      var appProtoView = ProtoView.createRootProtoView(protoView, appElement, appComponentAnnotatedType, changeDetection.createProtoChangeDetector('root'), strategy);
	      var view = appProtoView.instantiate(null, eventManager);
	      view.hydrate(injector, null, null, new Object(), null);
	      return view;
	    });
	  }, [ChangeDetection, Compiler, Injector, appElementToken, appComponentAnnotatedTypeToken, ShadowDomStrategy, EventManager]), bind(appChangeDetectorToken).toFactory(function (rootView) {
	    return rootView.changeDetector;
	  }, [appViewToken]), bind(appComponentType).toFactory(function (rootView) {
	    return rootView.elementInjectors[0].getComponent();
	  }, [appViewToken]), bind(LifeCycle).toFactory(function (exceptionHandler) {
	    return new LifeCycle(exceptionHandler, null, assertionsEnabled());
	  }, [ExceptionHandler]), bind(EventManager).toFactory(function (zone) {
	    var plugins = [new HammerGesturesPlugin(), new DomEventsPlugin()];
	    return new EventManager(plugins, zone);
	  }, [VmTurnZone]), bind(ShadowDomStrategy).toFactory(function (styleUrlResolver, doc) {
	    return new EmulatedUnscopedShadowDomStrategy(styleUrlResolver, doc.head);
	  }, [StyleUrlResolver, appDocumentToken]), Compiler, CompilerCache, TemplateResolver, bind(ChangeDetection).toValue(dynamicChangeDetection), TemplateLoader, DirectiveMetadataReader, Parser, Lexer, ExceptionHandler, bind(XHR).toValue(new XHRImpl()), ComponentUrlMapper, UrlResolver, StyleUrlResolver, StyleInliner, bind(CssProcessor).toFactory(function () {
	    return new CssProcessor(null);
	  }, []), PrivateComponentLoader], assert.genericType(List, Binding));
	}
	function _createVmZone(givenReporter) {
	  assert.argumentTypes(givenReporter, Function);
	  var defaultErrorReporter = function defaultErrorReporter(exception, stackTrace) {
	    var longStackTrace = ListWrapper.join(stackTrace, "\n\n-----async gap-----\n");
	    print(exception + "\n\n" + longStackTrace);
	    throw exception;
	  };
	  var reporter = isPresent(givenReporter) ? givenReporter : defaultErrorReporter;
	  var zone = new VmTurnZone({ enableLongStackTrace: assertionsEnabled() });
	  zone.initCallbacks({ onErrorHandler: reporter });
	  return assert.returnType(zone, VmTurnZone);
	}
	Object.defineProperty(_createVmZone, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	function bootstrap(appComponentType) {
	  var componentServiceBindings = arguments[1] !== void 0 ? arguments[1] : null;
	  var errorReporter = arguments[2] !== void 0 ? arguments[2] : null;
	  assert.argumentTypes(appComponentType, Type, componentServiceBindings, assert.genericType(List, Binding), errorReporter, Function);
	  BrowserDomAdapter.makeCurrent();
	  var bootstrapProcess = PromiseWrapper.completer();
	  var zone = _createVmZone(errorReporter);
	  zone.run(function () {
	    var appInjector = _createAppInjector(appComponentType, componentServiceBindings, zone);
	    PromiseWrapper.then(appInjector.asyncGet(appViewToken), function (rootView) {
	      var lc = appInjector.get(LifeCycle);
	      lc.registerWith(zone, rootView.changeDetector);
	      lc.tick();
	      bootstrapProcess.resolve(appInjector);
	    }, function (err) {
	      bootstrapProcess.reject(err);
	    });
	  });
	  return assert.returnType(bootstrapProcess.promise, assert.genericType(Promise, Injector));
	}
	Object.defineProperty(bootstrap, "parameters", { get: function get() {
	    return [[Type], [assert.genericType(List, Binding)], [Function]];
	  } });
	function _createAppInjector(appComponentType, bindings, zone) {
	  assert.argumentTypes(appComponentType, Type, bindings, assert.genericType(List, Binding), zone, VmTurnZone);
	  if (isBlank(_rootInjector)) _rootInjector = new Injector(_rootBindings);
	  var mergedBindings = isPresent(bindings) ? ListWrapper.concat(_injectorBindings(appComponentType), bindings) : _injectorBindings(appComponentType);
	  ListWrapper.push(mergedBindings, bind(VmTurnZone).toValue(zone));
	  return assert.returnType(_rootInjector.createChild(mergedBindings), Injector);
	}
	Object.defineProperty(_createAppInjector, "parameters", { get: function get() {
	    return [[Type], [assert.genericType(List, Binding)], [VmTurnZone]];
	  } });
	//# sourceMappingURL=application.js.map

	//# sourceMappingURL=./application.map

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  BrowserDomAdapter: { get: function get() {
	      return BrowserDomAdapter;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__dom_95_adapter__, $__generic_95_browser_95_adapter__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__1.List,
	    MapWrapper = $__1.MapWrapper,
	    ListWrapper = $__1.ListWrapper;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var setRootDomAdapter = ($__dom_95_adapter__ = __webpack_require__(47), $__dom_95_adapter__ && $__dom_95_adapter__.__esModule && $__dom_95_adapter__ || { "default": $__dom_95_adapter__ }).setRootDomAdapter;
	var GenericBrowserDomAdapter = ($__generic_95_browser_95_adapter__ = __webpack_require__(48), $__generic_95_browser_95_adapter__ && $__generic_95_browser_95_adapter__.__esModule && $__generic_95_browser_95_adapter__ || { "default": $__generic_95_browser_95_adapter__ }).GenericBrowserDomAdapter;
	var _attrToPropMap = {
	  'innerHtml': 'innerHTML',
	  'readonly': 'readOnly',
	  'tabindex': 'tabIndex'
	};
	var BrowserDomAdapter = function BrowserDomAdapter() {
	  $traceurRuntime.superConstructor($BrowserDomAdapter).apply(this, arguments);
	  ;
	};
	var $BrowserDomAdapter = BrowserDomAdapter;
	$traceurRuntime.createClass(BrowserDomAdapter, Object.defineProperties({
	  query: function query(selector) {
	    assert.argumentTypes(selector, assert.type.string);
	    return document.querySelector(selector);
	  },
	  querySelector: function querySelector(el, selector) {
	    assert.argumentTypes(el, assert.type.any, selector, assert.type.string);
	    return assert.returnType(el.querySelector(selector), Node);
	  },
	  querySelectorAll: function querySelectorAll(el, selector) {
	    assert.argumentTypes(el, assert.type.any, selector, assert.type.string);
	    return assert.returnType(el.querySelectorAll(selector), NodeList);
	  },
	  on: function on(el, evt, listener) {
	    el.addEventListener(evt, listener, false);
	  },
	  dispatchEvent: function dispatchEvent(el, evt) {
	    el.dispatchEvent(evt);
	  },
	  createMouseEvent: function createMouseEvent(eventType) {
	    var evt = new MouseEvent(eventType);
	    evt.initEvent(eventType, true, true);
	    return evt;
	  },
	  createEvent: function createEvent(eventType) {
	    return new Event(eventType, true);
	  },
	  getInnerHTML: function getInnerHTML(el) {
	    return el.innerHTML;
	  },
	  getOuterHTML: function getOuterHTML(el) {
	    return el.outerHTML;
	  },
	  nodeName: function nodeName(node) {
	    assert.argumentTypes(node, Node);
	    return assert.returnType(node.nodeName, assert.type.string);
	  },
	  nodeValue: function nodeValue(node) {
	    assert.argumentTypes(node, Node);
	    return assert.returnType(node.nodeValue, assert.type.string);
	  },
	  type: function type(node) {
	    assert.argumentTypes(node, assert.type.string);
	    return node.type;
	  },
	  content: function content(node) {
	    assert.argumentTypes(node, HTMLTemplateElement);
	    return assert.returnType(node.content, Node);
	  },
	  firstChild: function firstChild(el) {
	    return assert.returnType(el.firstChild, Node);
	  },
	  nextSibling: function nextSibling(el) {
	    return assert.returnType(el.nextSibling, Node);
	  },
	  parentElement: function parentElement(el) {
	    return el.parentElement;
	  },
	  childNodes: function childNodes(el) {
	    return assert.returnType(el.childNodes, NodeList);
	  },
	  childNodesAsList: function childNodesAsList(el) {
	    var childNodes = el.childNodes;
	    var res = ListWrapper.createFixedSize(childNodes.length);
	    for (var i = 0; i < childNodes.length; i++) {
	      res[i] = childNodes[i];
	    }
	    return assert.returnType(res, List);
	  },
	  clearNodes: function clearNodes(el) {
	    for (var i = 0; i < el.childNodes.length; i++) {
	      this.remove(el.childNodes[i]);
	    }
	  },
	  appendChild: function appendChild(el, node) {
	    el.appendChild(node);
	  },
	  removeChild: function removeChild(el, node) {
	    el.removeChild(node);
	  },
	  remove: function remove(el) {
	    var parent = el.parentNode;
	    parent.removeChild(el);
	    return el;
	  },
	  insertBefore: function insertBefore(el, node) {
	    el.parentNode.insertBefore(node, el);
	  },
	  insertAllBefore: function insertAllBefore(el, nodes) {
	    ListWrapper.forEach(nodes, function (n) {
	      el.parentNode.insertBefore(n, el);
	    });
	  },
	  insertAfter: function insertAfter(el, node) {
	    el.parentNode.insertBefore(node, el.nextSibling);
	  },
	  setInnerHTML: function setInnerHTML(el, value) {
	    el.innerHTML = value;
	  },
	  getText: function getText(el) {
	    return el.textContent;
	  },
	  setText: function setText(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.string);
	    el.textContent = value;
	  },
	  getValue: function getValue(el) {
	    return el.value;
	  },
	  setValue: function setValue(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.string);
	    el.value = value;
	  },
	  getChecked: function getChecked(el) {
	    return el.checked;
	  },
	  setChecked: function setChecked(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.boolean);
	    el.checked = value;
	  },
	  createTemplate: function createTemplate(html) {
	    var t = document.createElement('template');
	    t.innerHTML = html;
	    return t;
	  },
	  createElement: function createElement(tagName) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : document;
	    return doc.createElement(tagName);
	  },
	  createTextNode: function createTextNode(text) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : document;
	    assert.argumentTypes(text, assert.type.string, doc, assert.type.any);
	    return doc.createTextNode(text);
	  },
	  createScriptTag: function createScriptTag(attrName, attrValue) {
	    var doc = arguments[2] !== void 0 ? arguments[2] : document;
	    assert.argumentTypes(attrName, assert.type.string, attrValue, assert.type.string, doc, assert.type.any);
	    var el = doc.createElement('SCRIPT');
	    el.setAttribute(attrName, attrValue);
	    return el;
	  },
	  createStyleElement: function createStyleElement(css) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : document;
	    assert.argumentTypes(css, assert.type.string, doc, assert.type.any);
	    var style = doc.createElement('STYLE');
	    style.innerText = css;
	    return assert.returnType(style, HTMLStyleElement);
	  },
	  createShadowRoot: function createShadowRoot(el) {
	    assert.argumentTypes(el, HTMLElement);
	    return assert.returnType(el.createShadowRoot(), ShadowRoot);
	  },
	  getShadowRoot: function getShadowRoot(el) {
	    assert.argumentTypes(el, HTMLElement);
	    return assert.returnType(el.shadowRoot, ShadowRoot);
	  },
	  clone: function clone(node) {
	    assert.argumentTypes(node, Node);
	    return node.cloneNode(true);
	  },
	  hasProperty: function hasProperty(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    return name in element;
	  },
	  getElementsByClassName: function getElementsByClassName(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    return element.getElementsByClassName(name);
	  },
	  getElementsByTagName: function getElementsByTagName(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    return element.getElementsByTagName(name);
	  },
	  classList: function classList(element) {
	    return assert.returnType(Array.prototype.slice.call(element.classList, 0), List);
	  },
	  addClass: function addClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    element.classList.add(classname);
	  },
	  removeClass: function removeClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    element.classList.remove(classname);
	  },
	  hasClass: function hasClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    return element.classList.contains(classname);
	  },
	  setStyle: function setStyle(element, stylename, stylevalue) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string, stylevalue, assert.type.string);
	    element.style[stylename] = stylevalue;
	  },
	  removeStyle: function removeStyle(element, stylename) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string);
	    element.style[stylename] = null;
	  },
	  getStyle: function getStyle(element, stylename) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string);
	    return element.style[stylename];
	  },
	  tagName: function tagName(element) {
	    return assert.returnType(element.tagName, assert.type.string);
	  },
	  attributeMap: function attributeMap(element) {
	    var res = MapWrapper.create();
	    var elAttrs = element.attributes;
	    for (var i = 0; i < elAttrs.length; i++) {
	      var attrib = elAttrs[i];
	      MapWrapper.set(res, attrib.name, attrib.value);
	    }
	    return res;
	  },
	  getAttribute: function getAttribute(element, attribute) {
	    assert.argumentTypes(element, assert.type.any, attribute, assert.type.string);
	    return element.getAttribute(attribute);
	  },
	  setAttribute: function setAttribute(element, name, value) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string, value, assert.type.string);
	    element.setAttribute(name, value);
	  },
	  removeAttribute: function removeAttribute(element, attribute) {
	    assert.argumentTypes(element, assert.type.any, attribute, assert.type.string);
	    return element.removeAttribute(attribute);
	  },
	  templateAwareRoot: function templateAwareRoot(el) {
	    return el instanceof HTMLTemplateElement ? el.content : el;
	  },
	  createHtmlDocument: function createHtmlDocument() {
	    return document.implementation.createHTMLDocument();
	  },
	  defaultDoc: function defaultDoc() {
	    return document;
	  },
	  getTitle: function getTitle() {
	    return document.title;
	  },
	  setTitle: function setTitle(newTitle) {
	    assert.argumentTypes(newTitle, assert.type.string);
	    document.title = newTitle;
	  },
	  elementMatches: function elementMatches(n, selector) {
	    assert.argumentTypes(n, assert.type.any, selector, assert.type.string);
	    return assert.returnType(n instanceof HTMLElement && n.matches(selector), assert.type.boolean);
	  },
	  isTemplateElement: function isTemplateElement(el) {
	    assert.argumentTypes(el, assert.type.any);
	    return assert.returnType(el instanceof HTMLTemplateElement, assert.type.boolean);
	  },
	  isTextNode: function isTextNode(node) {
	    assert.argumentTypes(node, Node);
	    return assert.returnType(node.nodeType === Node.TEXT_NODE, assert.type.boolean);
	  },
	  isCommentNode: function isCommentNode(node) {
	    assert.argumentTypes(node, Node);
	    return assert.returnType(node.nodeType === Node.COMMENT_NODE, assert.type.boolean);
	  },
	  isElementNode: function isElementNode(node) {
	    assert.argumentTypes(node, Node);
	    return assert.returnType(node.nodeType === Node.ELEMENT_NODE, assert.type.boolean);
	  },
	  hasShadowRoot: function hasShadowRoot(node) {
	    return assert.returnType(node instanceof HTMLElement && isPresent(node.shadowRoot), assert.type.boolean);
	  },
	  importIntoDoc: function importIntoDoc(node) {
	    assert.argumentTypes(node, Node);
	    var result = document.importNode(node, true);
	    if (this.isTemplateElement(result) && !result.content.childNodes.length && node.content.childNodes.length) {
	      var childNodes = node.content.childNodes;
	      for (var i = 0; i < childNodes.length; ++i) {
	        result.content.appendChild(this.importIntoDoc(childNodes[i]));
	      }
	    }
	    return result;
	  },
	  isPageRule: function isPageRule(rule) {
	    return assert.returnType(rule.type === CSSRule.PAGE_RULE, assert.type.boolean);
	  },
	  isStyleRule: function isStyleRule(rule) {
	    return assert.returnType(rule.type === CSSRule.STYLE_RULE, assert.type.boolean);
	  },
	  isMediaRule: function isMediaRule(rule) {
	    return assert.returnType(rule.type === CSSRule.MEDIA_RULE, assert.type.boolean);
	  },
	  isKeyframesRule: function isKeyframesRule(rule) {
	    return assert.returnType(rule.type === CSSRule.KEYFRAMES_RULE, assert.type.boolean);
	  },
	  getHref: function getHref(el) {
	    assert.argumentTypes(el, Element);
	    return assert.returnType(el.href, assert.type.string);
	  }
	}, {
	  attrToPropMap: {
	    get: function get() {
	      return _attrToPropMap;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), { makeCurrent: function makeCurrent() {
	    setRootDomAdapter(new $BrowserDomAdapter());
	  } }, GenericBrowserDomAdapter);
	Object.defineProperty(BrowserDomAdapter.prototype.query, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.querySelector, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.querySelectorAll, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.nodeName, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.nodeValue, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.type, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.content, "parameters", { get: function get() {
	    return [[HTMLTemplateElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setText, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setValue, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setChecked, "parameters", { get: function get() {
	    return [[], [assert.type.boolean]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createTextNode, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createScriptTag, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createStyleElement, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createShadowRoot, "parameters", { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getShadowRoot, "parameters", { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.clone, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.hasProperty, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getElementsByClassName, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getElementsByTagName, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.addClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.hasClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setTitle, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.elementMatches, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isTemplateElement, "parameters", { get: function get() {
	    return [[assert.type.any]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isTextNode, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isCommentNode, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isElementNode, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.importIntoDoc, "parameters", { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getHref, "parameters", { get: function get() {
	    return [[Element]];
	  } });
	//# sourceMappingURL=browser_adapter.es6.map

	//# sourceMappingURL=./browser_adapter.map

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DOM: { get: function get() {
	      return DOM;
	    } },
	  setRootDomAdapter: { get: function get() {
	      return setRootDomAdapter;
	    } },
	  DomAdapter: { get: function get() {
	      return DomAdapter;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    ABSTRACT = $__1.ABSTRACT,
	    BaseException = $__1.BaseException;
	var DOM;
	function setRootDomAdapter(adapter) {
	  assert.argumentTypes(adapter, DomAdapter);
	  DOM = adapter;
	}
	Object.defineProperty(setRootDomAdapter, "parameters", { get: function get() {
	    return [[DomAdapter]];
	  } });
	function _abstract() {
	  return new BaseException('This method is abstract');
	}
	var DomAdapter = function DomAdapter() {
	  ;
	};
	$traceurRuntime.createClass(DomAdapter, Object.defineProperties({
	  parse: function parse(templateHtml) {
	    assert.argumentTypes(templateHtml, assert.type.string);
	    throw _abstract();
	  },
	  query: function query(selector) {
	    assert.argumentTypes(selector, assert.type.string);
	    throw _abstract();
	  },
	  querySelector: function querySelector(el, selector) {
	    assert.argumentTypes(el, assert.type.any, selector, assert.type.string);
	    throw _abstract();
	  },
	  querySelectorAll: function querySelectorAll(el, selector) {
	    assert.argumentTypes(el, assert.type.any, selector, assert.type.string);
	    throw _abstract();
	  },
	  on: function on(el, evt, listener) {
	    throw _abstract();
	  },
	  dispatchEvent: function dispatchEvent(el, evt) {
	    throw _abstract();
	  },
	  createMouseEvent: function createMouseEvent(eventType) {
	    throw _abstract();
	  },
	  createEvent: function createEvent(eventType) {
	    throw _abstract();
	  },
	  getInnerHTML: function getInnerHTML(el) {
	    throw _abstract();
	  },
	  getOuterHTML: function getOuterHTML(el) {
	    throw _abstract();
	  },
	  nodeName: function nodeName(node) {
	    throw _abstract();
	  },
	  nodeValue: function nodeValue(node) {
	    throw _abstract();
	  },
	  type: function type(node) {
	    throw _abstract();
	  },
	  content: function content(node) {
	    throw _abstract();
	  },
	  firstChild: function firstChild(el) {
	    throw _abstract();
	  },
	  nextSibling: function nextSibling(el) {
	    throw _abstract();
	  },
	  parentElement: function parentElement(el) {
	    throw _abstract();
	  },
	  childNodes: function childNodes(el) {
	    throw _abstract();
	  },
	  childNodesAsList: function childNodesAsList(el) {
	    throw _abstract();
	  },
	  clearNodes: function clearNodes(el) {
	    throw _abstract();
	  },
	  appendChild: function appendChild(el, node) {
	    throw _abstract();
	  },
	  removeChild: function removeChild(el, node) {
	    throw _abstract();
	  },
	  remove: function remove(el) {
	    throw _abstract();
	  },
	  insertBefore: function insertBefore(el, node) {
	    throw _abstract();
	  },
	  insertAllBefore: function insertAllBefore(el, nodes) {
	    throw _abstract();
	  },
	  insertAfter: function insertAfter(el, node) {
	    throw _abstract();
	  },
	  setInnerHTML: function setInnerHTML(el, value) {
	    throw _abstract();
	  },
	  getText: function getText(el) {
	    throw _abstract();
	  },
	  setText: function setText(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.string);
	    throw _abstract();
	  },
	  getValue: function getValue(el) {
	    throw _abstract();
	  },
	  setValue: function setValue(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.string);
	    throw _abstract();
	  },
	  getChecked: function getChecked(el) {
	    throw _abstract();
	  },
	  setChecked: function setChecked(el, value) {
	    assert.argumentTypes(el, assert.type.any, value, assert.type.boolean);
	    throw _abstract();
	  },
	  createTemplate: function createTemplate(html) {
	    throw _abstract();
	  },
	  createElement: function createElement(tagName) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : null;
	    throw _abstract();
	  },
	  createTextNode: function createTextNode(text) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(text, assert.type.string, doc, assert.type.any);
	    throw _abstract();
	  },
	  createScriptTag: function createScriptTag(attrName, attrValue) {
	    var doc = arguments[2] !== void 0 ? arguments[2] : null;
	    assert.argumentTypes(attrName, assert.type.string, attrValue, assert.type.string, doc, assert.type.any);
	    throw _abstract();
	  },
	  createStyleElement: function createStyleElement(css) {
	    var doc = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(css, assert.type.string, doc, assert.type.any);
	    throw _abstract();
	  },
	  createShadowRoot: function createShadowRoot(el) {
	    throw _abstract();
	  },
	  getShadowRoot: function getShadowRoot(el) {
	    throw _abstract();
	  },
	  getDistributedNodes: function getDistributedNodes(el) {
	    throw _abstract();
	  },
	  clone: function clone(node) {
	    throw _abstract();
	  },
	  hasProperty: function hasProperty(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    throw _abstract();
	  },
	  getElementsByClassName: function getElementsByClassName(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    throw _abstract();
	  },
	  getElementsByTagName: function getElementsByTagName(element, name) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string);
	    throw _abstract();
	  },
	  classList: function classList(element) {
	    throw _abstract();
	  },
	  addClass: function addClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    throw _abstract();
	  },
	  removeClass: function removeClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    throw _abstract();
	  },
	  hasClass: function hasClass(element, classname) {
	    assert.argumentTypes(element, assert.type.any, classname, assert.type.string);
	    throw _abstract();
	  },
	  setStyle: function setStyle(element, stylename, stylevalue) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string, stylevalue, assert.type.string);
	    throw _abstract();
	  },
	  removeStyle: function removeStyle(element, stylename) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string);
	    throw _abstract();
	  },
	  getStyle: function getStyle(element, stylename) {
	    assert.argumentTypes(element, assert.type.any, stylename, assert.type.string);
	    throw _abstract();
	  },
	  tagName: function tagName(element) {
	    throw _abstract();
	  },
	  attributeMap: function attributeMap(element) {
	    throw _abstract();
	  },
	  getAttribute: function getAttribute(element, attribute) {
	    assert.argumentTypes(element, assert.type.any, attribute, assert.type.string);
	    throw _abstract();
	  },
	  setAttribute: function setAttribute(element, name, value) {
	    assert.argumentTypes(element, assert.type.any, name, assert.type.string, value, assert.type.string);
	    throw _abstract();
	  },
	  removeAttribute: function removeAttribute(element, attribute) {
	    assert.argumentTypes(element, assert.type.any, attribute, assert.type.string);
	    throw _abstract();
	  },
	  templateAwareRoot: function templateAwareRoot(el) {
	    throw _abstract();
	  },
	  createHtmlDocument: function createHtmlDocument() {
	    throw _abstract();
	  },
	  defaultDoc: function defaultDoc() {
	    throw _abstract();
	  },
	  getTitle: function getTitle() {
	    throw _abstract();
	  },
	  setTitle: function setTitle(newTitle) {
	    assert.argumentTypes(newTitle, assert.type.string);
	    throw _abstract();
	  },
	  elementMatches: function elementMatches(n, selector) {
	    assert.argumentTypes(n, assert.type.any, selector, assert.type.string);
	    throw _abstract();
	  },
	  isTemplateElement: function isTemplateElement(el) {
	    assert.argumentTypes(el, assert.type.any);
	    throw _abstract();
	  },
	  isTextNode: function isTextNode(node) {
	    throw _abstract();
	  },
	  isCommentNode: function isCommentNode(node) {
	    throw _abstract();
	  },
	  isElementNode: function isElementNode(node) {
	    throw _abstract();
	  },
	  hasShadowRoot: function hasShadowRoot(node) {
	    throw _abstract();
	  },
	  importIntoDoc: function importIntoDoc(node) {
	    throw _abstract();
	  },
	  isPageRule: function isPageRule(rule) {
	    throw _abstract();
	  },
	  isStyleRule: function isStyleRule(rule) {
	    throw _abstract();
	  },
	  isMediaRule: function isMediaRule(rule) {
	    throw _abstract();
	  },
	  isKeyframesRule: function isKeyframesRule(rule) {
	    throw _abstract();
	  },
	  getHref: function getHref(element) {
	    throw _abstract();
	  },
	  resolveAndSetHref: function resolveAndSetHref(element, baseUrl, href) {
	    assert.argumentTypes(element, assert.type.any, baseUrl, assert.type.string, href, assert.type.string);
	    throw _abstract();
	  },
	  cssToRules: function cssToRules(css) {
	    assert.argumentTypes(css, assert.type.string);
	    throw _abstract();
	  },
	  supportsDOMEvents: function supportsDOMEvents() {
	    throw _abstract();
	  },
	  supportsNativeShadowDOM: function supportsNativeShadowDOM() {
	    throw _abstract();
	  }
	}, {
	  attrToPropMap: {
	    get: function get() {
	      throw _abstract();
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(DomAdapter, "annotations", { get: function get() {
	    return [new ABSTRACT()];
	  } });
	Object.defineProperty(DomAdapter.prototype.parse, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.query, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.querySelector, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.querySelectorAll, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setText, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setValue, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setChecked, "parameters", { get: function get() {
	    return [[], [assert.type.boolean]];
	  } });
	Object.defineProperty(DomAdapter.prototype.createTextNode, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.createScriptTag, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.createStyleElement, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.hasProperty, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getElementsByClassName, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getElementsByTagName, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.addClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.hasClass, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeAttribute, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setTitle, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.elementMatches, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.isTemplateElement, "parameters", { get: function get() {
	    return [[assert.type.any]];
	  } });
	Object.defineProperty(DomAdapter.prototype.resolveAndSetHref, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.cssToRules, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=dom_adapter.js.map

	//# sourceMappingURL=./dom_adapter.map

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  GenericBrowserDomAdapter: { get: function get() {
	      return GenericBrowserDomAdapter;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__dom_95_adapter__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var ABSTRACT = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).ABSTRACT;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__3.isPresent,
	    isFunction = $__3.isFunction;
	var DomAdapter = ($__dom_95_adapter__ = __webpack_require__(47), $__dom_95_adapter__ && $__dom_95_adapter__.__esModule && $__dom_95_adapter__ || { "default": $__dom_95_adapter__ }).DomAdapter;
	var GenericBrowserDomAdapter = function GenericBrowserDomAdapter() {
	  $traceurRuntime.superConstructor($GenericBrowserDomAdapter).apply(this, arguments);
	  ;
	};
	var $GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	$traceurRuntime.createClass(GenericBrowserDomAdapter, {
	  getDistributedNodes: function getDistributedNodes(el) {
	    return el.getDistributedNodes();
	  },
	  resolveAndSetHref: function resolveAndSetHref(el, baseUrl, href) {
	    assert.argumentTypes(el, assert.type.any, baseUrl, assert.type.string, href, assert.type.string);
	    el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	  },
	  cssToRules: function cssToRules(css) {
	    assert.argumentTypes(css, assert.type.string);
	    var style = this.createStyleElement(css);
	    this.appendChild(this.defaultDoc().head, style);
	    var rules = ListWrapper.create();
	    if (isPresent(style.sheet)) {
	      try {
	        var rawRules = style.sheet.cssRules;
	        rules = ListWrapper.createFixedSize(rawRules.length);
	        for (var i = 0; i < rawRules.length; i++) {
	          rules[i] = rawRules[i];
	        }
	      } catch (e) {}
	    } else {}
	    this.remove(style);
	    return assert.returnType(rules, List);
	  },
	  supportsDOMEvents: function supportsDOMEvents() {
	    return assert.returnType(true, assert.type.boolean);
	  },
	  supportsNativeShadowDOM: function supportsNativeShadowDOM() {
	    return assert.returnType(isFunction(this.defaultDoc().body.createShadowRoot), assert.type.boolean);
	  }
	}, {}, DomAdapter);
	Object.defineProperty(GenericBrowserDomAdapter, "annotations", { get: function get() {
	    return [new ABSTRACT()];
	  } });
	Object.defineProperty(GenericBrowserDomAdapter.prototype.resolveAndSetHref, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(GenericBrowserDomAdapter.prototype.cssToRules, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=generic_browser_adapter.js.map

	//# sourceMappingURL=./generic_browser_adapter.map

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CompilerCache: { get: function get() {
	      return CompilerCache;
	    } },
	  Compiler: { get: function get() {
	      return Compiler;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_async__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_change_95_detection__, $__directive_95_metadata_95_reader__, $__view__, $__pipeline_47_compile_95_pipeline__, $__pipeline_47_compile_95_element__, $__pipeline_47_default_95_steps__, $__template_95_loader__, $__template_95_resolver__, $___46__46__47_annotations_47_template__, $__shadow_95_dom_95_strategy__, $__pipeline_47_compile_95_step__, $__component_95_url_95_mapper__, $__url_95_resolver__, $__css_95_processor__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__2.Type,
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    normalizeBlank = $__2.normalizeBlank,
	    stringify = $__2.stringify;
	var $__3 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Promise = $__3.Promise,
	    PromiseWrapper = $__3.PromiseWrapper;
	var $__4 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__4.List,
	    ListWrapper = $__4.ListWrapper,
	    Map = $__4.Map,
	    MapWrapper = $__4.MapWrapper;
	var $__5 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    ChangeDetection = $__5.ChangeDetection,
	    Parser = $__5.Parser;
	var DirectiveMetadataReader = ($__directive_95_metadata_95_reader__ = __webpack_require__(50), $__directive_95_metadata_95_reader__ && $__directive_95_metadata_95_reader__.__esModule && $__directive_95_metadata_95_reader__ || { "default": $__directive_95_metadata_95_reader__ }).DirectiveMetadataReader;
	var ProtoView = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ }).ProtoView;
	var CompilePipeline = ($__pipeline_47_compile_95_pipeline__ = __webpack_require__(77), $__pipeline_47_compile_95_pipeline__ && $__pipeline_47_compile_95_pipeline__.__esModule && $__pipeline_47_compile_95_pipeline__ || { "default": $__pipeline_47_compile_95_pipeline__ }).CompilePipeline;
	var CompileElement = ($__pipeline_47_compile_95_element__ = __webpack_require__(71), $__pipeline_47_compile_95_element__ && $__pipeline_47_compile_95_element__.__esModule && $__pipeline_47_compile_95_element__ || { "default": $__pipeline_47_compile_95_element__ }).CompileElement;
	var createDefaultSteps = ($__pipeline_47_default_95_steps__ = __webpack_require__(78), $__pipeline_47_default_95_steps__ && $__pipeline_47_default_95_steps__.__esModule && $__pipeline_47_default_95_steps__ || { "default": $__pipeline_47_default_95_steps__ }).createDefaultSteps;
	var TemplateLoader = ($__template_95_loader__ = __webpack_require__(89), $__template_95_loader__ && $__template_95_loader__.__esModule && $__template_95_loader__ || { "default": $__template_95_loader__ }).TemplateLoader;
	var TemplateResolver = ($__template_95_resolver__ = __webpack_require__(90), $__template_95_resolver__ && $__template_95_resolver__.__esModule && $__template_95_resolver__ || { "default": $__template_95_resolver__ }).TemplateResolver;
	var Template = ($___46__46__47_annotations_47_template__ = __webpack_require__(44), $___46__46__47_annotations_47_template__ && $___46__46__47_annotations_47_template__.__esModule && $___46__46__47_annotations_47_template__ || { "default": $___46__46__47_annotations_47_template__ }).Template;
	var ShadowDomStrategy = ($__shadow_95_dom_95_strategy__ = __webpack_require__(64), $__shadow_95_dom_95_strategy__ && $__shadow_95_dom_95_strategy__.__esModule && $__shadow_95_dom_95_strategy__ || { "default": $__shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var CompileStep = ($__pipeline_47_compile_95_step__ = __webpack_require__(70), $__pipeline_47_compile_95_step__ && $__pipeline_47_compile_95_step__.__esModule && $__pipeline_47_compile_95_step__ || { "default": $__pipeline_47_compile_95_step__ }).CompileStep;
	var ComponentUrlMapper = ($__component_95_url_95_mapper__ = __webpack_require__(91), $__component_95_url_95_mapper__ && $__component_95_url_95_mapper__.__esModule && $__component_95_url_95_mapper__ || { "default": $__component_95_url_95_mapper__ }).ComponentUrlMapper;
	var UrlResolver = ($__url_95_resolver__ = __webpack_require__(69), $__url_95_resolver__ && $__url_95_resolver__.__esModule && $__url_95_resolver__ || { "default": $__url_95_resolver__ }).UrlResolver;
	var CssProcessor = ($__css_95_processor__ = __webpack_require__(88), $__css_95_processor__ && $__css_95_processor__.__esModule && $__css_95_processor__ || { "default": $__css_95_processor__ }).CssProcessor;
	var CompilerCache = function CompilerCache() {
	  this._cache = MapWrapper.create();
	};
	$traceurRuntime.createClass(CompilerCache, {
	  set: function set(component, protoView) {
	    assert.argumentTypes(component, Type, protoView, ProtoView);
	    MapWrapper.set(this._cache, component, protoView);
	  },
	  get: function get(component) {
	    assert.argumentTypes(component, Type);
	    var result = MapWrapper.get(this._cache, component);
	    return assert.returnType(normalizeBlank(result), ProtoView);
	  },
	  clear: function clear() {
	    MapWrapper.clear(this._cache);
	  }
	}, {});
	Object.defineProperty(CompilerCache, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(CompilerCache.prototype.set, "parameters", { get: function get() {
	    return [[Type], [ProtoView]];
	  } });
	Object.defineProperty(CompilerCache.prototype.get, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	var Compiler = function Compiler(changeDetection, templateLoader, reader, parser, cache, shadowDomStrategy, templateResolver, componentUrlMapper, urlResolver, cssProcessor) {
	  assert.argumentTypes(changeDetection, ChangeDetection, templateLoader, TemplateLoader, reader, DirectiveMetadataReader, parser, Parser, cache, CompilerCache, shadowDomStrategy, ShadowDomStrategy, templateResolver, TemplateResolver, componentUrlMapper, ComponentUrlMapper, urlResolver, UrlResolver, cssProcessor, CssProcessor);
	  this._changeDetection = changeDetection;
	  this._reader = reader;
	  this._parser = parser;
	  this._compilerCache = cache;
	  this._templateLoader = templateLoader;
	  this._compiling = MapWrapper.create();
	  this._shadowDomStrategy = shadowDomStrategy;
	  this._templateResolver = templateResolver;
	  this._componentUrlMapper = componentUrlMapper;
	  this._urlResolver = urlResolver;
	  this._appUrl = urlResolver.resolve(null, './');
	  this._cssProcessor = cssProcessor;
	};
	$traceurRuntime.createClass(Compiler, {
	  createSteps: function createSteps(component, template) {
	    var $__19 = this;
	    var dirMetadata = ListWrapper.map(this._flattenDirectives(template), function (d) {
	      return $__19._reader.read(d);
	    });
	    var cmpMetadata = this._reader.read(component);
	    var templateUrl = this._templateLoader.getTemplateUrl(template);
	    return assert.returnType(createDefaultSteps(this._changeDetection, this._parser, cmpMetadata, dirMetadata, this._shadowDomStrategy, templateUrl, this._cssProcessor), assert.genericType(List, CompileStep));
	  },
	  compile: function compile(component) {
	    assert.argumentTypes(component, Type);
	    var protoView = this._compile(component);
	    return assert.returnType(PromiseWrapper.isPromise(protoView) ? protoView : PromiseWrapper.resolve(protoView), assert.genericType(Promise, ProtoView));
	  },
	  _compile: function _compile(component) {
	    var $__19 = this;
	    var protoView = this._compilerCache.get(component);
	    if (isPresent(protoView)) {
	      return protoView;
	    }
	    var pvPromise = MapWrapper.get(this._compiling, component);
	    if (isPresent(pvPromise)) {
	      return pvPromise;
	    }
	    var template = this._templateResolver.resolve(component);
	    var componentUrl = this._componentUrlMapper.getUrl(component);
	    var baseUrl = this._urlResolver.resolve(this._appUrl, componentUrl);
	    this._templateLoader.setBaseUrl(template, baseUrl);
	    var tplElement = this._templateLoader.load(template);
	    if (PromiseWrapper.isPromise(tplElement)) {
	      pvPromise = PromiseWrapper.then(tplElement, function (el) {
	        return $__19._compileTemplate(template, el, component);
	      }, function (_) {
	        throw new BaseException("Failed to load the template for " + stringify(component));
	      });
	      MapWrapper.set(this._compiling, component, pvPromise);
	      return pvPromise;
	    }
	    return this._compileTemplate(template, tplElement, component);
	  },
	  _compileTemplate: function _compileTemplate(template, tplElement, component) {
	    var pipeline = new CompilePipeline(this.createSteps(component, template));
	    var compileElements;
	    try {
	      compileElements = pipeline.process(tplElement, stringify(component));
	    } catch (ex) {
	      return PromiseWrapper.reject(ex);
	    }
	    var protoView = compileElements[0].inheritedProtoView;
	    this._compilerCache.set(component, protoView);
	    MapWrapper["delete"](this._compiling, component);
	    var nestedPVPromises = [];
	    for (var i = 0; i < compileElements.length; i++) {
	      var ce = compileElements[i];
	      if (ce.hasNestedView) {
	        this._compileNestedProtoView(ce, nestedPVPromises);
	      }
	    }
	    if (protoView.stylePromises.length > 0) {
	      var syncProtoView = protoView;
	      protoView = PromiseWrapper.all(syncProtoView.stylePromises).then(function (_) {
	        return syncProtoView;
	      });
	    }
	    if (nestedPVPromises.length > 0) {
	      return PromiseWrapper.then(PromiseWrapper.all(nestedPVPromises), function (_) {
	        return protoView;
	      }, function (e) {
	        throw new BaseException(e.message + " -> Failed to compile " + stringify(component));
	      });
	    }
	    return protoView;
	  },
	  _compileNestedProtoView: function _compileNestedProtoView(ce, promises) {
	    assert.argumentTypes(ce, CompileElement, promises, assert.genericType(List, Promise));
	    var protoView = this._compile(ce.componentDirective.type);
	    if (PromiseWrapper.isPromise(protoView)) {
	      ListWrapper.push(promises, protoView.then(function (pv) {
	        ce.inheritedElementBinder.nestedProtoView = pv;
	      }));
	    } else {
	      ce.inheritedElementBinder.nestedProtoView = protoView;
	    }
	  },
	  _flattenDirectives: function _flattenDirectives(template) {
	    assert.argumentTypes(template, Template);
	    if (isBlank(template.directives)) return assert.returnType([], assert.genericType(List, Type));
	    var directives = [];
	    this._flattenList(template.directives, directives);
	    return assert.returnType(directives, assert.genericType(List, Type));
	  },
	  _flattenList: function _flattenList(tree, out) {
	    assert.argumentTypes(tree, assert.genericType(List, assert.type.any), out, assert.genericType(List, Type));
	    for (var i = 0; i < tree.length; i++) {
	      var item = tree[i];
	      if (ListWrapper.isList(item)) {
	        this._flattenList(item, out);
	      } else {
	        ListWrapper.push(out, item);
	      }
	    }
	  }
	}, {});
	Object.defineProperty(Compiler, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(Compiler, "parameters", { get: function get() {
	    return [[ChangeDetection], [TemplateLoader], [DirectiveMetadataReader], [Parser], [CompilerCache], [ShadowDomStrategy], [TemplateResolver], [ComponentUrlMapper], [UrlResolver], [CssProcessor]];
	  } });
	Object.defineProperty(Compiler.prototype.createSteps, "parameters", { get: function get() {
	    return [[Type], [Template]];
	  } });
	Object.defineProperty(Compiler.prototype.compile, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(Compiler.prototype._compile, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(Compiler.prototype._compileTemplate, "parameters", { get: function get() {
	    return [[Template], [], [Type]];
	  } });
	Object.defineProperty(Compiler.prototype._compileNestedProtoView, "parameters", { get: function get() {
	    return [[CompileElement], [assert.genericType(List, Promise)]];
	  } });
	Object.defineProperty(Compiler.prototype._flattenDirectives, "parameters", { get: function get() {
	    return [[Template]];
	  } });
	Object.defineProperty(Compiler.prototype._flattenList, "parameters", { get: function get() {
	    return [[assert.genericType(List, assert.type.any)], [assert.genericType(List, Type)]];
	  } });
	//# sourceMappingURL=compiler.js.map

	//# sourceMappingURL=./compiler.map

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DirectiveMetadataReader: { get: function get() {
	      return DirectiveMetadataReader;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $___46__46__47_annotations_47_annotations__, $__directive_95_metadata__, $__angular2_47_src_47_reflection_47_reflection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__2.Type,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    stringify = $__2.stringify;
	var Directive = ($___46__46__47_annotations_47_annotations__ = __webpack_require__(51), $___46__46__47_annotations_47_annotations__ && $___46__46__47_annotations_47_annotations__.__esModule && $___46__46__47_annotations_47_annotations__ || { "default": $___46__46__47_annotations_47_annotations__ }).Directive;
	var DirectiveMetadata = ($__directive_95_metadata__ = __webpack_require__(52), $__directive_95_metadata__ && $__directive_95_metadata__.__esModule && $__directive_95_metadata__ || { "default": $__directive_95_metadata__ }).DirectiveMetadata;
	var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }).reflector;
	var DirectiveMetadataReader = function DirectiveMetadataReader() {
	  ;
	};
	$traceurRuntime.createClass(DirectiveMetadataReader, { read: function read(type) {
	    assert.argumentTypes(type, Type);
	    var annotations = reflector.annotations(type);
	    if (isPresent(annotations)) {
	      for (var i = 0; i < annotations.length; i++) {
	        var annotation = annotations[i];
	        if (annotation instanceof Directive) {
	          return assert.returnType(new DirectiveMetadata(type, annotation), DirectiveMetadata);
	        }
	      }
	    }
	    throw new BaseException("No Directive annotation found on " + stringify(type));
	  } }, {});
	Object.defineProperty(DirectiveMetadataReader, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(DirectiveMetadataReader.prototype.read, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	//# sourceMappingURL=directive_metadata_reader.js.map

	//# sourceMappingURL=./directive_metadata_reader.map

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Directive: { get: function get() {
	      return Directive;
	    } },
	  Component: { get: function get() {
	      return Component;
	    } },
	  DynamicComponent: { get: function get() {
	      return DynamicComponent;
	    } },
	  Decorator: { get: function get() {
	      return Decorator;
	    } },
	  Viewport: { get: function get() {
	      return Viewport;
	    } },
	  onDestroy: { get: function get() {
	      return onDestroy;
	    } },
	  onChange: { get: function get() {
	      return onChange;
	    } },
	  onAllChangesDone: { get: function get() {
	      return onAllChangesDone;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_di__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    ABSTRACT = $__1.ABSTRACT,
	    CONST = $__1.CONST,
	    normalizeBlank = $__1.normalizeBlank,
	    isPresent = $__1.isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    List = $__2.List;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var Directive = function Directive() {
	  var $__5 = arguments[0] !== void 0 ? arguments[0] : {},
	      selector = $__5.selector,
	      bind = $__5.bind,
	      events = $__5.events,
	      lifecycle = $__5.lifecycle;
	  $traceurRuntime.superConstructor($Directive).call(this);
	  this.selector = selector;
	  this.bind = bind;
	  this.events = events;
	  this.lifecycle = lifecycle;
	};
	var $Directive = Directive;
	$traceurRuntime.createClass(Directive, { hasLifecycleHook: function hasLifecycleHook(hook) {
	    assert.argumentTypes(hook, assert.type.string);
	    return assert.returnType(isPresent(this.lifecycle) ? ListWrapper.contains(this.lifecycle, hook) : false, assert.type.boolean);
	  } }, {}, Injectable);
	Object.defineProperty(Directive, "annotations", { get: function get() {
	    return [new ABSTRACT(), new CONST()];
	  } });
	Object.defineProperty(Directive.prototype.hasLifecycleHook, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var Component = function Component() {
	  var $__5 = arguments[0] !== void 0 ? arguments[0] : {},
	      selector = $__5.selector,
	      bind = $__5.bind,
	      events = $__5.events,
	      services = $__5.services,
	      lifecycle = $__5.lifecycle;
	  $traceurRuntime.superConstructor($Component).call(this, {
	    selector: selector,
	    bind: bind,
	    events: events,
	    lifecycle: lifecycle
	  });
	  this.services = services;
	};
	var $Component = Component;
	$traceurRuntime.createClass(Component, {}, {}, Directive);
	Object.defineProperty(Component, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var DynamicComponent = function DynamicComponent() {
	  var $__5 = arguments[0] !== void 0 ? arguments[0] : {},
	      selector = $__5.selector,
	      bind = $__5.bind,
	      events = $__5.events,
	      services = $__5.services,
	      lifecycle = $__5.lifecycle;
	  $traceurRuntime.superConstructor($DynamicComponent).call(this, {
	    selector: selector,
	    bind: bind,
	    events: events,
	    lifecycle: lifecycle
	  });
	  this.services = services;
	};
	var $DynamicComponent = DynamicComponent;
	$traceurRuntime.createClass(DynamicComponent, {}, {}, Directive);
	Object.defineProperty(DynamicComponent, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Decorator = function Decorator() {
	  var $__6;
	  var $__5 = arguments[0] !== void 0 ? arguments[0] : {},
	      selector = $__5.selector,
	      bind = $__5.bind,
	      events = $__5.events,
	      lifecycle = $__5.lifecycle,
	      compileChildren = ($__6 = $__5.compileChildren) === void 0 ? true : $__6;
	  $traceurRuntime.superConstructor($Decorator).call(this, {
	    selector: selector,
	    bind: bind,
	    events: events,
	    lifecycle: lifecycle
	  });
	  this.compileChildren = compileChildren;
	};
	var $Decorator = Decorator;
	$traceurRuntime.createClass(Decorator, {}, {}, Directive);
	Object.defineProperty(Decorator, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Viewport = function Viewport() {
	  var $__5 = arguments[0] !== void 0 ? arguments[0] : {},
	      selector = $__5.selector,
	      bind = $__5.bind,
	      events = $__5.events,
	      lifecycle = $__5.lifecycle;
	  $traceurRuntime.superConstructor($Viewport).call(this, {
	    selector: selector,
	    bind: bind,
	    events: events,
	    lifecycle: lifecycle
	  });
	};
	var $Viewport = Viewport;
	$traceurRuntime.createClass(Viewport, {}, {}, Directive);
	Object.defineProperty(Viewport, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var onDestroy = "onDestroy";
	var onChange = "onChange";
	var onAllChangesDone = "onAllChangesDone";
	//# sourceMappingURL=annotations.js.map

	//# sourceMappingURL=./annotations.map

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DirectiveMetadata: { get: function get() {
	      return DirectiveMetadata;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_core_47_annotations_47_annotations__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Type = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).Type;
	var Directive = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Directive;
	var DirectiveMetadata = function DirectiveMetadata(type, annotation) {
	  assert.argumentTypes(type, Type, annotation, Directive);
	  this.annotation = annotation;
	  this.type = type;
	};
	$traceurRuntime.createClass(DirectiveMetadata, {}, {});
	Object.defineProperty(DirectiveMetadata, "parameters", { get: function get() {
	    return [[Type], [Directive]];
	  } });
	//# sourceMappingURL=directive_metadata.js.map

	//# sourceMappingURL=./directive_metadata.map

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  View: { get: function get() {
	      return View;
	    } },
	  ProtoView: { get: function get() {
	      return ProtoView;
	    } },
	  ElementBindingMemento: { get: function get() {
	      return ElementBindingMemento;
	    } },
	  DirectiveBindingMemento: { get: function get() {
	      return DirectiveBindingMemento;
	    } },
	  PropertyUpdate: { get: function get() {
	      return PropertyUpdate;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_async__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_change_95_detection__, $__element_95_injector__, $__element_95_binder__, $__directive_95_metadata__, $__angular2_47_src_47_reflection_47_types__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_di__, $__angular2_47_src_47_core_47_dom_47_element__, $__view_95_container__, $__shadow_95_dom_95_emulation_47_light_95_dom__, $__shadow_95_dom_95_emulation_47_content_95_tag__, $__shadow_95_dom_95_strategy__, $__view_95_pool__, $__angular2_47_src_47_core_47_events_47_event_95_manager__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var Promise = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }).Promise;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__3.ListWrapper,
	    MapWrapper = $__3.MapWrapper,
	    Map = $__3.Map,
	    StringMapWrapper = $__3.StringMapWrapper,
	    List = $__3.List;
	var $__4 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    AST = $__4.AST,
	    Locals = $__4.Locals,
	    ChangeDispatcher = $__4.ChangeDispatcher,
	    ProtoChangeDetector = $__4.ProtoChangeDetector,
	    ChangeDetector = $__4.ChangeDetector,
	    ChangeRecord = $__4.ChangeRecord,
	    BindingRecord = $__4.BindingRecord,
	    BindingPropagationConfig = $__4.BindingPropagationConfig,
	    uninitialized = $__4.uninitialized;
	var $__5 = ($__element_95_injector__ = __webpack_require__(54), $__element_95_injector__ && $__element_95_injector__.__esModule && $__element_95_injector__ || { "default": $__element_95_injector__ }),
	    ProtoElementInjector = $__5.ProtoElementInjector,
	    ElementInjector = $__5.ElementInjector,
	    PreBuiltObjects = $__5.PreBuiltObjects;
	var ElementBinder = ($__element_95_binder__ = __webpack_require__(72), $__element_95_binder__ && $__element_95_binder__.__esModule && $__element_95_binder__ || { "default": $__element_95_binder__ }).ElementBinder;
	var DirectiveMetadata = ($__directive_95_metadata__ = __webpack_require__(52), $__directive_95_metadata__ && $__directive_95_metadata__.__esModule && $__directive_95_metadata__ || { "default": $__directive_95_metadata__ }).DirectiveMetadata;
	var SetterFn = ($__angular2_47_src_47_reflection_47_types__ = __webpack_require__(15), $__angular2_47_src_47_reflection_47_types__ && $__angular2_47_src_47_reflection_47_types__.__esModule && $__angular2_47_src_47_reflection_47_types__ || { "default": $__angular2_47_src_47_reflection_47_types__ }).SetterFn;
	var $__9 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    IMPLEMENTS = $__9.IMPLEMENTS,
	    int = $__9.int,
	    isPresent = $__9.isPresent,
	    isBlank = $__9.isBlank,
	    BaseException = $__9.BaseException;
	var Injector = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injector;
	var NgElement = ($__angular2_47_src_47_core_47_dom_47_element__ = __webpack_require__(62), $__angular2_47_src_47_core_47_dom_47_element__ && $__angular2_47_src_47_core_47_dom_47_element__.__esModule && $__angular2_47_src_47_core_47_dom_47_element__ || { "default": $__angular2_47_src_47_core_47_dom_47_element__ }).NgElement;
	var ViewContainer = ($__view_95_container__ = __webpack_require__(57), $__view_95_container__ && $__view_95_container__.__esModule && $__view_95_container__ || { "default": $__view_95_container__ }).ViewContainer;
	var LightDom = ($__shadow_95_dom_95_emulation_47_light_95_dom__ = __webpack_require__(60), $__shadow_95_dom_95_emulation_47_light_95_dom__ && $__shadow_95_dom_95_emulation_47_light_95_dom__.__esModule && $__shadow_95_dom_95_emulation_47_light_95_dom__ || { "default": $__shadow_95_dom_95_emulation_47_light_95_dom__ }).LightDom;
	var Content = ($__shadow_95_dom_95_emulation_47_content_95_tag__ = __webpack_require__(61), $__shadow_95_dom_95_emulation_47_content_95_tag__ && $__shadow_95_dom_95_emulation_47_content_95_tag__.__esModule && $__shadow_95_dom_95_emulation_47_content_95_tag__ || { "default": $__shadow_95_dom_95_emulation_47_content_95_tag__ }).Content;
	var ShadowDomStrategy = ($__shadow_95_dom_95_strategy__ = __webpack_require__(64), $__shadow_95_dom_95_strategy__ && $__shadow_95_dom_95_strategy__.__esModule && $__shadow_95_dom_95_strategy__ || { "default": $__shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var ViewPool = ($__view_95_pool__ = __webpack_require__(76), $__view_95_pool__ && $__view_95_pool__.__esModule && $__view_95_pool__ || { "default": $__view_95_pool__ }).ViewPool;
	var EventManager = ($__angular2_47_src_47_core_47_events_47_event_95_manager__ = __webpack_require__(58), $__angular2_47_src_47_core_47_events_47_event_95_manager__ && $__angular2_47_src_47_core_47_events_47_event_95_manager__.__esModule && $__angular2_47_src_47_core_47_events_47_event_95_manager__ || { "default": $__angular2_47_src_47_core_47_events_47_event_95_manager__ }).EventManager;
	var NG_BINDING_CLASS = 'ng-binding';
	var NG_BINDING_CLASS_SELECTOR = '.ng-binding';
	var VIEW_POOL_CAPACITY = 10000;
	var VIEW_POOL_PREFILL = 0;
	var View = function View(proto, nodes, protoLocals) {
	  assert.argumentTypes(proto, ProtoView, nodes, List, protoLocals, Map);
	  this.proto = proto;
	  this.nodes = nodes;
	  this.changeDetector = null;
	  this.elementInjectors = null;
	  this.rootElementInjectors = null;
	  this.textNodes = null;
	  this.bindElements = null;
	  this.componentChildViews = null;
	  this.viewContainers = null;
	  this.contentTags = null;
	  this.preBuiltObjects = null;
	  this.lightDoms = null;
	  this.context = null;
	  this.locals = new Locals(null, MapWrapper.clone(protoLocals));
	};
	$traceurRuntime.createClass(View, {
	  init: function init(changeDetector, elementInjectors, rootElementInjectors, textNodes, bindElements, viewContainers, contentTags, preBuiltObjects, componentChildViews, lightDoms) {
	    assert.argumentTypes(changeDetector, ChangeDetector, elementInjectors, List, rootElementInjectors, List, textNodes, List, bindElements, List, viewContainers, List, contentTags, List, preBuiltObjects, List, componentChildViews, List, lightDoms, assert.genericType(List, LightDom));
	    this.changeDetector = changeDetector;
	    this.elementInjectors = elementInjectors;
	    this.rootElementInjectors = rootElementInjectors;
	    this.textNodes = textNodes;
	    this.bindElements = bindElements;
	    this.viewContainers = viewContainers;
	    this.contentTags = contentTags;
	    this.preBuiltObjects = preBuiltObjects;
	    this.componentChildViews = componentChildViews;
	    this.lightDoms = lightDoms;
	  },
	  setLocal: function setLocal(contextName, value) {
	    assert.argumentTypes(contextName, assert.type.string, value, assert.type.any);
	    if (!this.hydrated()) throw new BaseException('Cannot set locals on dehydrated view.');
	    if (!MapWrapper.contains(this.proto.variableBindings, contextName)) {
	      return;
	    }
	    var templateName = MapWrapper.get(this.proto.variableBindings, contextName);
	    this.locals.set(templateName, value);
	  },
	  hydrated: function hydrated() {
	    return isPresent(this.context);
	  },
	  _hydrateContext: function _hydrateContext(newContext, locals) {
	    this.context = newContext;
	    this.locals.parent = locals;
	    this.changeDetector.hydrate(this.context, this.locals);
	  },
	  _dehydrateContext: function _dehydrateContext() {
	    if (isPresent(this.locals)) {
	      this.locals.clearValues();
	    }
	    this.context = null;
	    this.changeDetector.dehydrate();
	  },
	  hydrate: function hydrate(appInjector, hostElementInjector, hostLightDom, context, locals) {
	    assert.argumentTypes(appInjector, Injector, hostElementInjector, ElementInjector, hostLightDom, LightDom, context, Object, locals, Locals);
	    if (this.hydrated()) throw new BaseException('The view is already hydrated.');
	    this._hydrateContext(context, locals);
	    for (var i = 0; i < this.viewContainers.length; i++) {
	      var vc = this.viewContainers[i];
	      if (isPresent(vc)) {
	        vc.hydrate(appInjector, hostElementInjector, hostLightDom);
	      }
	    }
	    var binders = this.proto.elementBinders;
	    var componentChildViewIndex = 0;
	    for (var i = 0; i < binders.length; ++i) {
	      var componentDirective = binders[i].componentDirective;
	      var shadowDomAppInjector = null;
	      if (isPresent(componentDirective)) {
	        var services = componentDirective.annotation.services;
	        if (isPresent(services)) shadowDomAppInjector = appInjector.createChild(services);else {
	          shadowDomAppInjector = appInjector;
	        }
	      } else {
	        shadowDomAppInjector = null;
	      }
	      var elementInjector = this.elementInjectors[i];
	      if (isPresent(elementInjector)) {
	        elementInjector.instantiateDirectives(appInjector, shadowDomAppInjector, this.preBuiltObjects[i]);
	        var exportImplicitName = elementInjector.getExportImplicitName();
	        if (elementInjector.isExportingComponent()) {
	          this.locals.set(exportImplicitName, elementInjector.getComponent());
	        } else if (elementInjector.isExportingElement()) {
	          this.locals.set(exportImplicitName, elementInjector.getNgElement().domElement);
	        }
	      }
	      if (isPresent(binders[i].nestedProtoView) && isPresent(componentDirective)) {
	        this.componentChildViews[componentChildViewIndex++].hydrate(shadowDomAppInjector, elementInjector, this.lightDoms[i], elementInjector.getComponent(), null);
	      }
	    }
	    for (var i = 0; i < this.lightDoms.length; ++i) {
	      var lightDom = this.lightDoms[i];
	      if (isPresent(lightDom)) {
	        lightDom.redistribute();
	      }
	    }
	  },
	  dehydrate: function dehydrate() {
	    for (var i = 0; i < this.componentChildViews.length; i++) {
	      this.componentChildViews[i].dehydrate();
	    }
	    for (var i = 0; i < this.elementInjectors.length; i++) {
	      if (isPresent(this.elementInjectors[i])) {
	        this.elementInjectors[i].clearDirectives();
	      }
	    }
	    if (isPresent(this.viewContainers)) {
	      for (var i = 0; i < this.viewContainers.length; i++) {
	        var vc = this.viewContainers[i];
	        if (isPresent(vc)) {
	          vc.dehydrate();
	        }
	      }
	    }
	    this._dehydrateContext();
	  },
	  triggerEventHandlers: function triggerEventHandlers(eventName, eventObj, binderIndex) {
	    assert.argumentTypes(eventName, assert.type.string, eventObj, assert.type.any, binderIndex, int);
	    var handlers = this.proto.eventHandlers[binderIndex];
	    if (isBlank(handlers)) return;
	    var handler = StringMapWrapper.get(handlers, eventName);
	    if (isBlank(handler)) return;
	    handler(eventObj, this);
	  },
	  onRecordChange: function onRecordChange(directiveMemento, records) {
	    assert.argumentTypes(directiveMemento, assert.type.any, records, List);
	    this._invokeMementos(records);
	    if (directiveMemento instanceof DirectiveMemento) {
	      this._notifyDirectiveAboutChanges(directiveMemento, records);
	    }
	  },
	  onAllChangesDone: function onAllChangesDone(directiveMemento) {
	    var dir = directiveMemento.directive(this.elementInjectors);
	    dir.onAllChangesDone();
	  },
	  _invokeMementos: function _invokeMementos(records) {
	    assert.argumentTypes(records, List);
	    for (var i = 0; i < records.length; ++i) {
	      this._invokeMementoFor(records[i]);
	    }
	  },
	  _notifyDirectiveAboutChanges: function _notifyDirectiveAboutChanges(directiveMemento, records) {
	    assert.argumentTypes(directiveMemento, assert.type.any, records, List);
	    var dir = directiveMemento.directive(this.elementInjectors);
	    var binding = directiveMemento.directiveBinding(this.elementInjectors);
	    if (binding.callOnChange) {
	      dir.onChange(this._collectChanges(records));
	    }
	  },
	  _invokeMementoFor: function _invokeMementoFor(record) {
	    assert.argumentTypes(record, ChangeRecord);
	    var memento = record.bindingMemento;
	    if (memento instanceof DirectiveBindingMemento) {
	      var directiveMemento = assert.type(memento, DirectiveBindingMemento);
	      directiveMemento.invoke(record, this.elementInjectors);
	    } else if (memento instanceof ElementBindingMemento) {
	      var elementMemento = assert.type(memento, ElementBindingMemento);
	      elementMemento.invoke(record, this.bindElements);
	    } else {
	      var textNodeIndex = assert.type(memento, assert.type.number);
	      DOM.setText(this.textNodes[textNodeIndex], record.currentValue);
	    }
	  },
	  _collectChanges: function _collectChanges(records) {
	    assert.argumentTypes(records, List);
	    var changes = StringMapWrapper.create();
	    for (var i = 0; i < records.length; ++i) {
	      var record = records[i];
	      var propertyUpdate = new PropertyUpdate(record.currentValue, record.previousValue);
	      StringMapWrapper.set(changes, record.bindingMemento._setterName, propertyUpdate);
	    }
	    return changes;
	  }
	}, {});
	Object.defineProperty(View, "annotations", { get: function get() {
	    return [new IMPLEMENTS(ChangeDispatcher)];
	  } });
	Object.defineProperty(View, "parameters", { get: function get() {
	    return [[ProtoView], [List], [Map]];
	  } });
	Object.defineProperty(View.prototype.init, "parameters", { get: function get() {
	    return [[ChangeDetector], [List], [List], [List], [List], [List], [List], [List], [List], [assert.genericType(List, LightDom)]];
	  } });
	Object.defineProperty(View.prototype.setLocal, "parameters", { get: function get() {
	    return [[assert.type.string], []];
	  } });
	Object.defineProperty(View.prototype.hydrate, "parameters", { get: function get() {
	    return [[Injector], [ElementInjector], [LightDom], [Object], [Locals]];
	  } });
	Object.defineProperty(View.prototype.triggerEventHandlers, "parameters", { get: function get() {
	    return [[assert.type.string], [], [int]];
	  } });
	Object.defineProperty(View.prototype.onRecordChange, "parameters", { get: function get() {
	    return [[], [List]];
	  } });
	Object.defineProperty(View.prototype._invokeMementos, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(View.prototype._notifyDirectiveAboutChanges, "parameters", { get: function get() {
	    return [[], [List]];
	  } });
	Object.defineProperty(View.prototype._invokeMementoFor, "parameters", { get: function get() {
	    return [[ChangeRecord]];
	  } });
	Object.defineProperty(View.prototype._collectChanges, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var ProtoView = function ProtoView(template, protoChangeDetector, shadowDomStrategy) {
	  var parentProtoView = arguments[3] !== void 0 ? arguments[3] : null;
	  assert.argumentTypes(template, assert.type.any, protoChangeDetector, ProtoChangeDetector, shadowDomStrategy, ShadowDomStrategy, parentProtoView, $ProtoView);
	  this.element = template;
	  this.elementBinders = [];
	  this.variableBindings = MapWrapper.create();
	  this.protoLocals = MapWrapper.create();
	  this.protoChangeDetector = protoChangeDetector;
	  this.parentProtoView = parentProtoView;
	  this.textNodesWithBindingCount = 0;
	  this.elementsWithBindingCount = 0;
	  this.instantiateInPlace = false;
	  this.rootBindingOffset = isPresent(this.element) && DOM.hasClass(this.element, NG_BINDING_CLASS) ? 1 : 0;
	  this.isTemplateElement = DOM.isTemplateElement(this.element);
	  this.shadowDomStrategy = shadowDomStrategy;
	  this._viewPool = new ViewPool(VIEW_POOL_CAPACITY);
	  this.stylePromises = [];
	  this.eventHandlers = [];
	  this.bindingRecords = [];
	  this._directiveMementosMap = MapWrapper.create();
	  this._variableBindings = null;
	  this._directiveMementos = null;
	};
	var $ProtoView = ProtoView;
	$traceurRuntime.createClass(ProtoView, {
	  instantiate: function instantiate(hostElementInjector, eventManager) {
	    assert.argumentTypes(hostElementInjector, ElementInjector, eventManager, EventManager);
	    if (this._viewPool.length() == 0) this._preFillPool(hostElementInjector, eventManager);
	    var view = this._viewPool.pop();
	    return assert.returnType(isPresent(view) ? view : this._instantiate(hostElementInjector, eventManager), View);
	  },
	  _preFillPool: function _preFillPool(hostElementInjector, eventManager) {
	    assert.argumentTypes(hostElementInjector, ElementInjector, eventManager, EventManager);
	    for (var i = 0; i < VIEW_POOL_PREFILL; i++) {
	      this._viewPool.push(this._instantiate(hostElementInjector, eventManager));
	    }
	  },
	  _getVariableBindings: function _getVariableBindings() {
	    var $__18 = this;
	    if (isPresent(this._variableBindings)) {
	      return this._variableBindings;
	    }
	    this._variableBindings = isPresent(this.parentProtoView) ? ListWrapper.clone(this.parentProtoView._getVariableBindings()) : [];
	    MapWrapper.forEach(this.protoLocals, function (v, local) {
	      ListWrapper.push($__18._variableBindings, local);
	    });
	    return this._variableBindings;
	  },
	  _getDirectiveMementos: function _getDirectiveMementos() {
	    if (isPresent(this._directiveMementos)) {
	      return this._directiveMementos;
	    }
	    this._directiveMementos = [];
	    for (var injectorIndex = 0; injectorIndex < this.elementBinders.length; ++injectorIndex) {
	      var pei = this.elementBinders[injectorIndex].protoElementInjector;
	      if (isPresent(pei)) {
	        for (var directiveIndex = 0; directiveIndex < pei.numberOfDirectives; ++directiveIndex) {
	          ListWrapper.push(this._directiveMementos, this._getDirectiveMemento(injectorIndex, directiveIndex));
	        }
	      }
	    }
	    return this._directiveMementos;
	  },
	  _instantiate: function _instantiate(hostElementInjector, eventManager) {
	    assert.argumentTypes(hostElementInjector, ElementInjector, eventManager, EventManager);
	    var rootElementClone = this.instantiateInPlace ? this.element : DOM.importIntoDoc(this.element);
	    var elementsWithBindingsDynamic;
	    if (this.isTemplateElement) {
	      elementsWithBindingsDynamic = DOM.querySelectorAll(DOM.content(rootElementClone), NG_BINDING_CLASS_SELECTOR);
	    } else {
	      elementsWithBindingsDynamic = DOM.getElementsByClassName(rootElementClone, NG_BINDING_CLASS);
	    }
	    var elementsWithBindings = ListWrapper.createFixedSize(elementsWithBindingsDynamic.length);
	    for (var binderIdx = 0; binderIdx < elementsWithBindingsDynamic.length; ++binderIdx) {
	      elementsWithBindings[binderIdx] = elementsWithBindingsDynamic[binderIdx];
	    }
	    var viewNodes;
	    if (this.isTemplateElement) {
	      var childNode = DOM.firstChild(DOM.content(rootElementClone));
	      viewNodes = [];
	      while (childNode != null) {
	        ListWrapper.push(viewNodes, childNode);
	        childNode = DOM.nextSibling(childNode);
	      }
	    } else {
	      viewNodes = [rootElementClone];
	    }
	    var view = new View(this, viewNodes, this.protoLocals);
	    var changeDetector = this.protoChangeDetector.instantiate(view, this.bindingRecords, this._getVariableBindings(), this._getDirectiveMementos());
	    var binders = this.elementBinders;
	    var elementInjectors = ListWrapper.createFixedSize(binders.length);
	    var eventHandlers = ListWrapper.createFixedSize(binders.length);
	    var rootElementInjectors = [];
	    var textNodes = [];
	    var elementsWithPropertyBindings = [];
	    var preBuiltObjects = ListWrapper.createFixedSize(binders.length);
	    var viewContainers = ListWrapper.createFixedSize(binders.length);
	    var contentTags = ListWrapper.createFixedSize(binders.length);
	    var componentChildViews = [];
	    var lightDoms = ListWrapper.createFixedSize(binders.length);
	    for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	      var binder = binders[binderIdx];
	      var element = void 0;
	      if (binderIdx === 0 && this.rootBindingOffset === 1) {
	        element = rootElementClone;
	      } else {
	        element = elementsWithBindings[binderIdx - this.rootBindingOffset];
	      }
	      var elementInjector = null;
	      var protoElementInjector = binder.protoElementInjector;
	      if (isPresent(protoElementInjector)) {
	        if (isPresent(protoElementInjector.parent)) {
	          var parentElementInjector = elementInjectors[protoElementInjector.parent.index];
	          elementInjector = protoElementInjector.instantiate(parentElementInjector, null);
	        } else {
	          elementInjector = protoElementInjector.instantiate(null, hostElementInjector);
	          ListWrapper.push(rootElementInjectors, elementInjector);
	        }
	      }
	      elementInjectors[binderIdx] = elementInjector;
	      if (binder.hasElementPropertyBindings) {
	        ListWrapper.push(elementsWithPropertyBindings, element);
	      }
	      var textNodeIndices = binder.textNodeIndices;
	      if (isPresent(textNodeIndices)) {
	        var childNode = DOM.firstChild(DOM.templateAwareRoot(element));
	        for (var j = 0, k = 0; j < textNodeIndices.length; j++) {
	          for (var index = textNodeIndices[j]; k < index; k++) {
	            childNode = DOM.nextSibling(childNode);
	          }
	          ListWrapper.push(textNodes, childNode);
	        }
	      }
	      var lightDom = null;
	      var bindingPropagationConfig = null;
	      if (isPresent(binder.nestedProtoView) && isPresent(binder.componentDirective)) {
	        var strategy = this.shadowDomStrategy;
	        var childView = binder.nestedProtoView.instantiate(elementInjector, eventManager);
	        changeDetector.addChild(childView.changeDetector);
	        lightDom = strategy.constructLightDom(view, childView, element);
	        strategy.attachTemplate(element, childView);
	        bindingPropagationConfig = new BindingPropagationConfig(childView.changeDetector);
	        ListWrapper.push(componentChildViews, childView);
	      }
	      lightDoms[binderIdx] = lightDom;
	      var destLightDom = null;
	      if (isPresent(binder.parent) && binder.distanceToParent === 1) {
	        destLightDom = lightDoms[binder.parent.index];
	      }
	      var viewContainer = null;
	      if (isPresent(binder.viewportDirective)) {
	        viewContainer = new ViewContainer(view, element, binder.nestedProtoView, elementInjector, eventManager, destLightDom);
	      }
	      viewContainers[binderIdx] = viewContainer;
	      var contentTag = null;
	      if (isPresent(binder.contentTagSelector)) {
	        contentTag = new Content(destLightDom, element, binder.contentTagSelector);
	      }
	      contentTags[binderIdx] = contentTag;
	      if (isPresent(elementInjector)) {
	        preBuiltObjects[binderIdx] = new PreBuiltObjects(view, new NgElement(element), viewContainer, bindingPropagationConfig);
	      }
	      if (isPresent(binder.events)) {
	        eventHandlers[binderIdx] = StringMapWrapper.create();
	        StringMapWrapper.forEach(binder.events, function (eventMap, eventName) {
	          var handler = $ProtoView.buildEventHandler(eventMap, binderIdx);
	          StringMapWrapper.set(eventHandlers[binderIdx], eventName, handler);
	          if (isBlank(elementInjector) || !elementInjector.hasEventEmitter(eventName)) {
	            eventManager.addEventListener(element, eventName, function (event) {
	              handler(event, view);
	            });
	          }
	        });
	      }
	    }
	    this.eventHandlers = eventHandlers;
	    view.init(changeDetector, elementInjectors, rootElementInjectors, textNodes, elementsWithPropertyBindings, viewContainers, contentTags, preBuiltObjects, componentChildViews, lightDoms);
	    return assert.returnType(view, View);
	  },
	  returnToPool: function returnToPool(view) {
	    assert.argumentTypes(view, View);
	    this._viewPool.push(view);
	  },
	  bindVariable: function bindVariable(contextName, templateName) {
	    assert.argumentTypes(contextName, assert.type.string, templateName, assert.type.string);
	    MapWrapper.set(this.variableBindings, contextName, templateName);
	    MapWrapper.set(this.protoLocals, templateName, null);
	  },
	  bindElement: function bindElement(parent, distanceToParent, protoElementInjector) {
	    var componentDirective = arguments[3] !== void 0 ? arguments[3] : null;
	    var viewportDirective = arguments[4] !== void 0 ? arguments[4] : null;
	    assert.argumentTypes(parent, ElementBinder, distanceToParent, int, protoElementInjector, ProtoElementInjector, componentDirective, DirectiveMetadata, viewportDirective, DirectiveMetadata);
	    var elBinder = new ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective, viewportDirective);
	    ListWrapper.push(this.elementBinders, elBinder);
	    return assert.returnType(elBinder, ElementBinder);
	  },
	  bindTextNode: function bindTextNode(indexInParent, expression) {
	    assert.argumentTypes(indexInParent, int, expression, AST);
	    var elBinder = this.elementBinders[this.elementBinders.length - 1];
	    if (isBlank(elBinder.textNodeIndices)) {
	      elBinder.textNodeIndices = ListWrapper.create();
	    }
	    ListWrapper.push(elBinder.textNodeIndices, indexInParent);
	    var memento = this.textNodesWithBindingCount++;
	    ListWrapper.push(this.bindingRecords, new BindingRecord(expression, memento, null));
	  },
	  bindElementProperty: function bindElementProperty(expression, setterName, setter) {
	    assert.argumentTypes(expression, AST, setterName, assert.type.string, setter, SetterFn);
	    var elBinder = this.elementBinders[this.elementBinders.length - 1];
	    if (!elBinder.hasElementPropertyBindings) {
	      elBinder.hasElementPropertyBindings = true;
	      this.elementsWithBindingCount++;
	    }
	    var memento = new ElementBindingMemento(this.elementsWithBindingCount - 1, setterName, setter);
	    ListWrapper.push(this.bindingRecords, new BindingRecord(expression, memento, null));
	  },
	  bindEvent: function bindEvent(eventName, expression) {
	    var directiveIndex = arguments[2] !== void 0 ? arguments[2] : -1;
	    assert.argumentTypes(eventName, assert.type.string, expression, AST, directiveIndex, int);
	    var elBinder = this.elementBinders[this.elementBinders.length - 1];
	    var events = elBinder.events;
	    if (isBlank(events)) {
	      events = StringMapWrapper.create();
	      elBinder.events = events;
	    }
	    var event = StringMapWrapper.get(events, eventName);
	    if (isBlank(event)) {
	      event = MapWrapper.create();
	      StringMapWrapper.set(events, eventName, event);
	    }
	    MapWrapper.set(event, directiveIndex, expression);
	  },
	  bindDirectiveProperty: function bindDirectiveProperty(directiveIndex, expression, setterName, setter) {
	    assert.argumentTypes(directiveIndex, assert.type.number, expression, AST, setterName, assert.type.string, setter, SetterFn);
	    var elementIndex = this.elementBinders.length - 1;
	    var bindingMemento = new DirectiveBindingMemento(elementIndex, directiveIndex, setterName, setter);
	    var directiveMemento = this._getDirectiveMemento(elementIndex, directiveIndex);
	    ListWrapper.push(this.bindingRecords, new BindingRecord(expression, bindingMemento, directiveMemento));
	  },
	  _getDirectiveMemento: function _getDirectiveMemento(elementInjectorIndex, directiveIndex) {
	    assert.argumentTypes(elementInjectorIndex, assert.type.number, directiveIndex, assert.type.number);
	    var id = elementInjectorIndex * 100 + directiveIndex;
	    var protoElementInjector = this.elementBinders[elementInjectorIndex].protoElementInjector;
	    if (!MapWrapper.contains(this._directiveMementosMap, id)) {
	      var binding = protoElementInjector.getDirectiveBindingAtIndex(directiveIndex);
	      MapWrapper.set(this._directiveMementosMap, id, new DirectiveMemento(elementInjectorIndex, directiveIndex, binding.callOnAllChangesDone));
	    }
	    return MapWrapper.get(this._directiveMementosMap, id);
	  }
	}, {
	  buildEventHandler: function buildEventHandler(eventMap, injectorIdx) {
	    assert.argumentTypes(eventMap, Map, injectorIdx, int);
	    var locals = MapWrapper.create();
	    return function (event, view) {
	      if (view.hydrated()) {
	        MapWrapper.set(locals, '$event', event);
	        MapWrapper.forEach(eventMap, function (expr, directiveIndex) {
	          var context;
	          if (directiveIndex === -1) {
	            context = view.context;
	          } else {
	            context = view.elementInjectors[injectorIdx].getDirectiveAtIndex(directiveIndex);
	          }
	          expr.eval(context, new Locals(view.locals, locals));
	        });
	      }
	    };
	  },
	  createRootProtoView: function createRootProtoView(protoView, insertionElement, rootComponentAnnotatedType, protoChangeDetector, shadowDomStrategy) {
	    assert.argumentTypes(protoView, $ProtoView, insertionElement, assert.type.any, rootComponentAnnotatedType, DirectiveMetadata, protoChangeDetector, ProtoChangeDetector, shadowDomStrategy, ShadowDomStrategy);
	    DOM.addClass(insertionElement, NG_BINDING_CLASS);
	    var cmpType = rootComponentAnnotatedType.type;
	    var rootProtoView = new $ProtoView(insertionElement, protoChangeDetector, shadowDomStrategy);
	    rootProtoView.instantiateInPlace = true;
	    var binder = rootProtoView.bindElement(null, 0, new ProtoElementInjector(null, 0, [cmpType], true));
	    binder.componentDirective = rootComponentAnnotatedType;
	    binder.nestedProtoView = protoView;
	    shadowDomStrategy.shimAppElement(rootComponentAnnotatedType, insertionElement);
	    return assert.returnType(rootProtoView, $ProtoView);
	  }
	});
	Object.defineProperty(ProtoView, "parameters", { get: function get() {
	    return [[], [ProtoChangeDetector], [ShadowDomStrategy], [ProtoView]];
	  } });
	Object.defineProperty(ProtoView.prototype.instantiate, "parameters", { get: function get() {
	    return [[ElementInjector], [EventManager]];
	  } });
	Object.defineProperty(ProtoView.prototype._preFillPool, "parameters", { get: function get() {
	    return [[ElementInjector], [EventManager]];
	  } });
	Object.defineProperty(ProtoView.prototype._instantiate, "parameters", { get: function get() {
	    return [[ElementInjector], [EventManager]];
	  } });
	Object.defineProperty(ProtoView.prototype.returnToPool, "parameters", { get: function get() {
	    return [[View]];
	  } });
	Object.defineProperty(ProtoView.buildEventHandler, "parameters", { get: function get() {
	    return [[Map], [int]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindVariable, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindElement, "parameters", { get: function get() {
	    return [[ElementBinder], [int], [ProtoElementInjector], [DirectiveMetadata], [DirectiveMetadata]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindTextNode, "parameters", { get: function get() {
	    return [[int], [AST]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindElementProperty, "parameters", { get: function get() {
	    return [[AST], [assert.type.string], [SetterFn]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindEvent, "parameters", { get: function get() {
	    return [[assert.type.string], [AST], [int]];
	  } });
	Object.defineProperty(ProtoView.prototype.bindDirectiveProperty, "parameters", { get: function get() {
	    return [[assert.type.number], [AST], [assert.type.string], [SetterFn]];
	  } });
	Object.defineProperty(ProtoView.prototype._getDirectiveMemento, "parameters", { get: function get() {
	    return [[assert.type.number], [assert.type.number]];
	  } });
	Object.defineProperty(ProtoView.createRootProtoView, "parameters", { get: function get() {
	    return [[ProtoView], [], [DirectiveMetadata], [ProtoChangeDetector], [ShadowDomStrategy]];
	  } });
	var ElementBindingMemento = function ElementBindingMemento(elementIndex, setterName, setter) {
	  assert.argumentTypes(elementIndex, int, setterName, assert.type.string, setter, SetterFn);
	  this._elementIndex = elementIndex;
	  this._setterName = setterName;
	  this._setter = setter;
	};
	$traceurRuntime.createClass(ElementBindingMemento, { invoke: function invoke(record, bindElements) {
	    assert.argumentTypes(record, ChangeRecord, bindElements, List);
	    var element = bindElements[this._elementIndex];
	    this._setter(element, record.currentValue);
	  } }, {});
	Object.defineProperty(ElementBindingMemento, "parameters", { get: function get() {
	    return [[int], [assert.type.string], [SetterFn]];
	  } });
	Object.defineProperty(ElementBindingMemento.prototype.invoke, "parameters", { get: function get() {
	    return [[ChangeRecord], [List]];
	  } });
	var DirectiveBindingMemento = function DirectiveBindingMemento(elementInjectorIndex, directiveIndex, setterName, setter) {
	  assert.argumentTypes(elementInjectorIndex, assert.type.number, directiveIndex, assert.type.number, setterName, assert.type.string, setter, SetterFn);
	  this._elementInjectorIndex = elementInjectorIndex;
	  this._directiveIndex = directiveIndex;
	  this._setterName = setterName;
	  this._setter = setter;
	};
	$traceurRuntime.createClass(DirectiveBindingMemento, { invoke: function invoke(record, elementInjectors) {
	    assert.argumentTypes(record, ChangeRecord, elementInjectors, assert.genericType(List, ElementInjector));
	    var elementInjector = assert.type(elementInjectors[this._elementInjectorIndex], ElementInjector);
	    var directive = elementInjector.getDirectiveAtIndex(this._directiveIndex);
	    this._setter(directive, record.currentValue);
	  } }, {});
	Object.defineProperty(DirectiveBindingMemento, "parameters", { get: function get() {
	    return [[assert.type.number], [assert.type.number], [assert.type.string], [SetterFn]];
	  } });
	Object.defineProperty(DirectiveBindingMemento.prototype.invoke, "parameters", { get: function get() {
	    return [[ChangeRecord], [assert.genericType(List, ElementInjector)]];
	  } });
	var DirectiveMemento = function DirectiveMemento(elementInjectorIndex, directiveIndex, notifyOnAllChangesDone) {
	  assert.argumentTypes(elementInjectorIndex, assert.type.number, directiveIndex, assert.type.number, notifyOnAllChangesDone, assert.type.boolean);
	  this._elementInjectorIndex = elementInjectorIndex;
	  this._directiveIndex = directiveIndex;
	  this.notifyOnAllChangesDone = notifyOnAllChangesDone;
	};
	$traceurRuntime.createClass(DirectiveMemento, {
	  directive: function directive(elementInjectors) {
	    assert.argumentTypes(elementInjectors, assert.genericType(List, ElementInjector));
	    var elementInjector = assert.type(elementInjectors[this._elementInjectorIndex], ElementInjector);
	    return elementInjector.getDirectiveAtIndex(this._directiveIndex);
	  },
	  directiveBinding: function directiveBinding(elementInjectors) {
	    assert.argumentTypes(elementInjectors, assert.genericType(List, ElementInjector));
	    var elementInjector = assert.type(elementInjectors[this._elementInjectorIndex], ElementInjector);
	    return elementInjector.getDirectiveBindingAtIndex(this._directiveIndex);
	  }
	}, {});
	Object.defineProperty(DirectiveMemento, "parameters", { get: function get() {
	    return [[assert.type.number], [assert.type.number], [assert.type.boolean]];
	  } });
	Object.defineProperty(DirectiveMemento.prototype.directive, "parameters", { get: function get() {
	    return [[assert.genericType(List, ElementInjector)]];
	  } });
	Object.defineProperty(DirectiveMemento.prototype.directiveBinding, "parameters", { get: function get() {
	    return [[assert.genericType(List, ElementInjector)]];
	  } });
	var PropertyUpdate = function PropertyUpdate(currentValue, previousValue) {
	  this.currentValue = currentValue;
	  this.previousValue = previousValue;
	};
	var $PropertyUpdate = PropertyUpdate;
	$traceurRuntime.createClass(PropertyUpdate, {}, { createWithoutPrevious: function createWithoutPrevious(currentValue) {
	    return new $PropertyUpdate(currentValue, uninitialized);
	  } });
	//# sourceMappingURL=view.js.map

	//# sourceMappingURL=./view.map

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DirectiveDependency: { get: function get() {
	      return DirectiveDependency;
	    } },
	  DirectiveBinding: { get: function get() {
	      return DirectiveBinding;
	    } },
	  PreBuiltObjects: { get: function get() {
	      return PreBuiltObjects;
	    } },
	  ProtoElementInjector: { get: function get() {
	      return ProtoElementInjector;
	    } },
	  ElementInjector: { get: function get() {
	      return ElementInjector;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_math__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_di__, $__angular2_47_src_47_core_47_annotations_47_visibility__, $__angular2_47_src_47_core_47_annotations_47_di__, $__angular2_47_src_47_core_47_compiler_47_view__, $__angular2_47_src_47_core_47_compiler_47_view_95_container__, $__angular2_47_src_47_core_47_dom_47_element__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_change_95_detection__, $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__, $__property_95_setter_95_factory__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    Type = $__1.Type,
	    int = $__1.int,
	    BaseException = $__1.BaseException;
	var Math = ($__angular2_47_src_47_facade_47_math__ = __webpack_require__(55), $__angular2_47_src_47_facade_47_math__ && $__angular2_47_src_47_facade_47_math__.__esModule && $__angular2_47_src_47_facade_47_math__ || { "default": $__angular2_47_src_47_facade_47_math__ }).Math;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__3.List,
	    ListWrapper = $__3.ListWrapper,
	    MapWrapper = $__3.MapWrapper;
	var $__4 = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }),
	    Injector = $__4.Injector,
	    Key = $__4.Key,
	    Dependency = $__4.Dependency,
	    bind = $__4.bind,
	    Binding = $__4.Binding,
	    NoProviderError = $__4.NoProviderError,
	    ProviderError = $__4.ProviderError,
	    CyclicDependencyError = $__4.CyclicDependencyError;
	var $__5 = ($__angular2_47_src_47_core_47_annotations_47_visibility__ = __webpack_require__(42), $__angular2_47_src_47_core_47_annotations_47_visibility__ && $__angular2_47_src_47_core_47_annotations_47_visibility__.__esModule && $__angular2_47_src_47_core_47_annotations_47_visibility__ || { "default": $__angular2_47_src_47_core_47_annotations_47_visibility__ }),
	    Parent = $__5.Parent,
	    Ancestor = $__5.Ancestor;
	var $__6 = ($__angular2_47_src_47_core_47_annotations_47_di__ = __webpack_require__(56), $__angular2_47_src_47_core_47_annotations_47_di__ && $__angular2_47_src_47_core_47_annotations_47_di__.__esModule && $__angular2_47_src_47_core_47_annotations_47_di__ || { "default": $__angular2_47_src_47_core_47_annotations_47_di__ }),
	    EventEmitter = $__6.EventEmitter,
	    PropertySetter = $__6.PropertySetter,
	    Attribute = $__6.Attribute;
	var viewModule = ($__angular2_47_src_47_core_47_compiler_47_view__ = __webpack_require__(53), $__angular2_47_src_47_core_47_compiler_47_view__ && $__angular2_47_src_47_core_47_compiler_47_view__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view__ });
	var ViewContainer = ($__angular2_47_src_47_core_47_compiler_47_view_95_container__ = __webpack_require__(57), $__angular2_47_src_47_core_47_compiler_47_view_95_container__ && $__angular2_47_src_47_core_47_compiler_47_view_95_container__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view_95_container__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view_95_container__ }).ViewContainer;
	var NgElement = ($__angular2_47_src_47_core_47_dom_47_element__ = __webpack_require__(62), $__angular2_47_src_47_core_47_dom_47_element__ && $__angular2_47_src_47_core_47_dom_47_element__.__esModule && $__angular2_47_src_47_core_47_dom_47_element__ || { "default": $__angular2_47_src_47_core_47_dom_47_element__ }).NgElement;
	var $__9 = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }),
	    Directive = $__9.Directive,
	    onChange = $__9.onChange,
	    onDestroy = $__9.onDestroy,
	    onAllChangesDone = $__9.onAllChangesDone;
	var BindingPropagationConfig = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).BindingPropagationConfig;
	var pclModule = ($__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__ = __webpack_require__(63), $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__ && $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__.__esModule && $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__ || { "default": $__angular2_47_src_47_core_47_compiler_47_private_95_component_95_location__ });
	var setterFactory = ($__property_95_setter_95_factory__ = __webpack_require__(75), $__property_95_setter_95_factory__ && $__property_95_setter_95_factory__.__esModule && $__property_95_setter_95_factory__ || { "default": $__property_95_setter_95_factory__ }).setterFactory;
	var _MAX_DIRECTIVE_CONSTRUCTION_COUNTER = 10;
	var MAX_DEPTH = Math.pow(2, 30) - 1;
	var _undefined = new Object();
	var _staticKeys;
	var StaticKeys = function StaticKeys() {
	  this.viewId = Key.get(viewModule.View).id;
	  this.ngElementId = Key.get(NgElement).id;
	  this.viewContainerId = Key.get(ViewContainer).id;
	  this.bindingPropagationConfigId = Key.get(BindingPropagationConfig).id;
	  this.privateComponentLocationId = Key.get(pclModule.PrivateComponentLocation).id;
	};
	var $StaticKeys = StaticKeys;
	$traceurRuntime.createClass(StaticKeys, {}, { instance: function instance() {
	    if (isBlank(_staticKeys)) _staticKeys = new $StaticKeys();
	    return _staticKeys;
	  } });
	var TreeNode = function TreeNode(parent) {
	  assert.argumentTypes(parent, $TreeNode);
	  this._parent = parent;
	  this._head = null;
	  this._tail = null;
	  this._next = null;
	  if (isPresent(parent)) parent._addChild(this);
	};
	var $TreeNode = TreeNode;
	$traceurRuntime.createClass(TreeNode, Object.defineProperties({
	  _addChild: function _addChild(child) {
	    assert.argumentTypes(child, $TreeNode);
	    if (isPresent(this._tail)) {
	      this._tail._next = child;
	      this._tail = child;
	    } else {
	      this._tail = this._head = child;
	    }
	  }
	}, {
	  parent: {
	    get: function get() {
	      return this._parent;
	    },
	    set: function set(node) {
	      assert.argumentTypes(node, $TreeNode);
	      this._parent = node;
	    },
	    configurable: true,
	    enumerable: true
	  },
	  children: {
	    get: function get() {
	      var res = [];
	      var child = this._head;
	      while (child != null) {
	        ListWrapper.push(res, child);
	        child = child._next;
	      }
	      return res;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(TreeNode, "parameters", { get: function get() {
	    return [[TreeNode]];
	  } });
	Object.defineProperty(TreeNode.prototype._addChild, "parameters", { get: function get() {
	    return [[TreeNode]];
	  } });
	Object.defineProperty(Object.getOwnPropertyDescriptor(TreeNode.prototype, "parent").set, "parameters", { get: function get() {
	    return [[TreeNode]];
	  } });
	var DirectiveDependency = function DirectiveDependency(key, asPromise, lazy, optional, properties, depth, eventEmitterName, propSetterName, attributeName) {
	  assert.argumentTypes(key, Key, asPromise, assert.type.boolean, lazy, assert.type.boolean, optional, assert.type.boolean, properties, List, depth, int, eventEmitterName, assert.type.string, propSetterName, assert.type.string, attributeName, assert.type.string);
	  $traceurRuntime.superConstructor($DirectiveDependency).call(this, key, asPromise, lazy, optional, properties);
	  this.depth = depth;
	  this.eventEmitterName = eventEmitterName;
	  this.propSetterName = propSetterName;
	  this.attributeName = attributeName;
	};
	var $DirectiveDependency = DirectiveDependency;
	$traceurRuntime.createClass(DirectiveDependency, {}, { createFrom: function createFrom(d) {
	    assert.argumentTypes(d, Dependency);
	    var depth = 0;
	    var eventName = null;
	    var propName = null;
	    var attributeName = null;
	    var properties = d.properties;
	    for (var i = 0; i < properties.length; i++) {
	      var property = properties[i];
	      if (property instanceof Parent) {
	        depth = 1;
	      } else if (property instanceof Ancestor) {
	        depth = MAX_DEPTH;
	      } else if (property instanceof EventEmitter) {
	        eventName = property.eventName;
	      } else if (property instanceof PropertySetter) {
	        propName = property.propName;
	      } else if (property instanceof Attribute) {
	        attributeName = property.attributeName;
	      }
	    }
	    return assert.returnType(new $DirectiveDependency(d.key, d.asPromise, d.lazy, d.optional, d.properties, depth, eventName, propName, attributeName), Dependency);
	  } }, Dependency);
	Object.defineProperty(DirectiveDependency, "parameters", { get: function get() {
	    return [[Key], [assert.type.boolean], [assert.type.boolean], [assert.type.boolean], [List], [int], [assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(DirectiveDependency.createFrom, "parameters", { get: function get() {
	    return [[Dependency]];
	  } });
	var DirectiveBinding = function DirectiveBinding(key, factory, dependencies, providedAsPromise, annotation) {
	  assert.argumentTypes(key, Key, factory, Function, dependencies, List, providedAsPromise, assert.type.boolean, annotation, Directive);
	  $traceurRuntime.superConstructor($DirectiveBinding).call(this, key, factory, dependencies, providedAsPromise);
	  this.callOnDestroy = isPresent(annotation) && annotation.hasLifecycleHook(onDestroy);
	  this.callOnChange = isPresent(annotation) && annotation.hasLifecycleHook(onChange);
	  this.callOnAllChangesDone = isPresent(annotation) && annotation.hasLifecycleHook(onAllChangesDone);
	};
	var $DirectiveBinding = DirectiveBinding;
	$traceurRuntime.createClass(DirectiveBinding, {}, {
	  createFromBinding: function createFromBinding(b, annotation) {
	    assert.argumentTypes(b, Binding, annotation, Directive);
	    var deps = ListWrapper.map(b.dependencies, DirectiveDependency.createFrom);
	    return assert.returnType(new $DirectiveBinding(b.key, b.factory, deps, b.providedAsPromise, annotation), Binding);
	  },
	  createFromType: function createFromType(type, annotation) {
	    assert.argumentTypes(type, Type, annotation, Directive);
	    var binding = bind(type).toClass(type);
	    return assert.returnType($DirectiveBinding.createFromBinding(binding, annotation), Binding);
	  },
	  _hasEventEmitter: function _hasEventEmitter(eventName, binding) {
	    return ListWrapper.any(binding.dependencies, function (d) {
	      return d.eventEmitterName == eventName;
	    });
	  }
	}, Binding);
	Object.defineProperty(DirectiveBinding, "parameters", { get: function get() {
	    return [[Key], [Function], [List], [assert.type.boolean], [Directive]];
	  } });
	Object.defineProperty(DirectiveBinding.createFromBinding, "parameters", { get: function get() {
	    return [[Binding], [Directive]];
	  } });
	Object.defineProperty(DirectiveBinding.createFromType, "parameters", { get: function get() {
	    return [[Type], [Directive]];
	  } });
	Object.defineProperty(DirectiveBinding._hasEventEmitter, "parameters", { get: function get() {
	    return [[assert.type.string], [DirectiveBinding]];
	  } });
	var PreBuiltObjects = function PreBuiltObjects(view, element, viewContainer, bindingPropagationConfig) {
	  assert.argumentTypes(view, assert.type.any, element, NgElement, viewContainer, ViewContainer, bindingPropagationConfig, BindingPropagationConfig);
	  this.view = view;
	  this.element = element;
	  this.viewContainer = viewContainer;
	  this.bindingPropagationConfig = bindingPropagationConfig;
	};
	$traceurRuntime.createClass(PreBuiltObjects, {}, {});
	Object.defineProperty(PreBuiltObjects, "parameters", { get: function get() {
	    return [[], [NgElement], [ViewContainer], [BindingPropagationConfig]];
	  } });
	var ProtoElementInjector = function ProtoElementInjector(parent, index, bindings) {
	  var firstBindingIsComponent = arguments[3] !== void 0 ? arguments[3] : false;
	  var distanceToParent = arguments[4] !== void 0 ? arguments[4] : 0;
	  assert.argumentTypes(parent, $ProtoElementInjector, index, int, bindings, List, firstBindingIsComponent, assert.type.boolean, distanceToParent, assert.type.number);
	  this.parent = parent;
	  this.index = index;
	  this.distanceToParent = distanceToParent;
	  this.exportComponent = false;
	  this.exportElement = false;
	  this._binding0IsComponent = firstBindingIsComponent;
	  this._binding0 = null;
	  this._keyId0 = null;
	  this._binding1 = null;
	  this._keyId1 = null;
	  this._binding2 = null;
	  this._keyId2 = null;
	  this._binding3 = null;
	  this._keyId3 = null;
	  this._binding4 = null;
	  this._keyId4 = null;
	  this._binding5 = null;
	  this._keyId5 = null;
	  this._binding6 = null;
	  this._keyId6 = null;
	  this._binding7 = null;
	  this._keyId7 = null;
	  this._binding8 = null;
	  this._keyId8 = null;
	  this._binding9 = null;
	  this._keyId9 = null;
	  this.numberOfDirectives = bindings.length;
	  var length = bindings.length;
	  if (length > 0) {
	    this._binding0 = this._createBinding(bindings[0]);
	    this._keyId0 = this._binding0.key.id;
	  }
	  if (length > 1) {
	    this._binding1 = this._createBinding(bindings[1]);
	    this._keyId1 = this._binding1.key.id;
	  }
	  if (length > 2) {
	    this._binding2 = this._createBinding(bindings[2]);
	    this._keyId2 = this._binding2.key.id;
	  }
	  if (length > 3) {
	    this._binding3 = this._createBinding(bindings[3]);
	    this._keyId3 = this._binding3.key.id;
	  }
	  if (length > 4) {
	    this._binding4 = this._createBinding(bindings[4]);
	    this._keyId4 = this._binding4.key.id;
	  }
	  if (length > 5) {
	    this._binding5 = this._createBinding(bindings[5]);
	    this._keyId5 = this._binding5.key.id;
	  }
	  if (length > 6) {
	    this._binding6 = this._createBinding(bindings[6]);
	    this._keyId6 = this._binding6.key.id;
	  }
	  if (length > 7) {
	    this._binding7 = this._createBinding(bindings[7]);
	    this._keyId7 = this._binding7.key.id;
	  }
	  if (length > 8) {
	    this._binding8 = this._createBinding(bindings[8]);
	    this._keyId8 = this._binding8.key.id;
	  }
	  if (length > 9) {
	    this._binding9 = this._createBinding(bindings[9]);
	    this._keyId9 = this._binding9.key.id;
	  }
	  if (length > 10) {
	    throw 'Maximum number of directives per element has been reached.';
	  }
	};
	var $ProtoElementInjector = ProtoElementInjector;
	$traceurRuntime.createClass(ProtoElementInjector, Object.defineProperties({
	  instantiate: function instantiate(parent, host) {
	    assert.argumentTypes(parent, ElementInjector, host, ElementInjector);
	    return assert.returnType(new ElementInjector(this, parent, host), ElementInjector);
	  },
	  directParent: function directParent() {
	    return assert.returnType(this.distanceToParent < 2 ? this.parent : null, $ProtoElementInjector);
	  },
	  _createBinding: function _createBinding(bindingOrType) {
	    if (bindingOrType instanceof DirectiveBinding) {
	      return bindingOrType;
	    } else {
	      var b = bind(bindingOrType).toClass(bindingOrType);
	      return DirectiveBinding.createFromBinding(b, null);
	    }
	  },

	  getDirectiveBindingAtIndex: function getDirectiveBindingAtIndex(index) {
	    assert.argumentTypes(index, int);
	    if (index == 0) return this._binding0;
	    if (index == 1) return this._binding1;
	    if (index == 2) return this._binding2;
	    if (index == 3) return this._binding3;
	    if (index == 4) return this._binding4;
	    if (index == 5) return this._binding5;
	    if (index == 6) return this._binding6;
	    if (index == 7) return this._binding7;
	    if (index == 8) return this._binding8;
	    if (index == 9) return this._binding9;
	    throw new OutOfBoundsAccess(index);
	  },
	  hasEventEmitter: function hasEventEmitter(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    var p = this;
	    if (isPresent(p._binding0) && DirectiveBinding._hasEventEmitter(eventName, p._binding0)) return true;
	    if (isPresent(p._binding1) && DirectiveBinding._hasEventEmitter(eventName, p._binding1)) return true;
	    if (isPresent(p._binding2) && DirectiveBinding._hasEventEmitter(eventName, p._binding2)) return true;
	    if (isPresent(p._binding3) && DirectiveBinding._hasEventEmitter(eventName, p._binding3)) return true;
	    if (isPresent(p._binding4) && DirectiveBinding._hasEventEmitter(eventName, p._binding4)) return true;
	    if (isPresent(p._binding5) && DirectiveBinding._hasEventEmitter(eventName, p._binding5)) return true;
	    if (isPresent(p._binding6) && DirectiveBinding._hasEventEmitter(eventName, p._binding6)) return true;
	    if (isPresent(p._binding7) && DirectiveBinding._hasEventEmitter(eventName, p._binding7)) return true;
	    if (isPresent(p._binding8) && DirectiveBinding._hasEventEmitter(eventName, p._binding8)) return true;
	    if (isPresent(p._binding9) && DirectiveBinding._hasEventEmitter(eventName, p._binding9)) return true;
	    return false;
	  }
	}, {
	  hasBindings: {
	    get: function get() {
	      return assert.returnType(isPresent(this._binding0), assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(ProtoElementInjector, "parameters", { get: function get() {
	    return [[ProtoElementInjector], [int], [List], [assert.type.boolean], [assert.type.number]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype.instantiate, "parameters", { get: function get() {
	    return [[ElementInjector], [ElementInjector]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype.getDirectiveBindingAtIndex, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype.hasEventEmitter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var ElementInjector = function ElementInjector(proto, parent, host) {
	  assert.argumentTypes(proto, ProtoElementInjector, parent, $ElementInjector, host, $ElementInjector);
	  $traceurRuntime.superConstructor($ElementInjector).call(this, parent);
	  if (isPresent(parent) && isPresent(host)) {
	    throw new BaseException('Only either parent or host is allowed');
	  }
	  this._host = null;
	  if (isPresent(parent)) {
	    this._host = parent._host;
	  } else {
	    this._host = host;
	  }
	  this._proto = proto;
	  this._preBuiltObjects = null;
	  this._lightDomAppInjector = null;
	  this._shadowDomAppInjector = null;
	  this._obj0 = null;
	  this._obj1 = null;
	  this._obj2 = null;
	  this._obj3 = null;
	  this._obj4 = null;
	  this._obj5 = null;
	  this._obj6 = null;
	  this._obj7 = null;
	  this._obj8 = null;
	  this._obj9 = null;
	  this._constructionCounter = 0;
	};
	var $ElementInjector = ElementInjector;
	$traceurRuntime.createClass(ElementInjector, {
	  clearDirectives: function clearDirectives() {
	    this._preBuiltObjects = null;
	    this._lightDomAppInjector = null;
	    this._shadowDomAppInjector = null;
	    var p = this._proto;
	    if (isPresent(p._binding0) && p._binding0.callOnDestroy) {
	      this._obj0.onDestroy();
	    }
	    if (isPresent(p._binding1) && p._binding1.callOnDestroy) {
	      this._obj1.onDestroy();
	    }
	    if (isPresent(p._binding2) && p._binding2.callOnDestroy) {
	      this._obj2.onDestroy();
	    }
	    if (isPresent(p._binding3) && p._binding3.callOnDestroy) {
	      this._obj3.onDestroy();
	    }
	    if (isPresent(p._binding4) && p._binding4.callOnDestroy) {
	      this._obj4.onDestroy();
	    }
	    if (isPresent(p._binding5) && p._binding5.callOnDestroy) {
	      this._obj5.onDestroy();
	    }
	    if (isPresent(p._binding6) && p._binding6.callOnDestroy) {
	      this._obj6.onDestroy();
	    }
	    if (isPresent(p._binding7) && p._binding7.callOnDestroy) {
	      this._obj7.onDestroy();
	    }
	    if (isPresent(p._binding8) && p._binding8.callOnDestroy) {
	      this._obj8.onDestroy();
	    }
	    if (isPresent(p._binding9) && p._binding9.callOnDestroy) {
	      this._obj9.onDestroy();
	    }
	    if (isPresent(this._privateComponentBinding) && this._privateComponentBinding.callOnDestroy) {
	      this._privateComponent.onDestroy();
	    }
	    this._obj0 = null;
	    this._obj1 = null;
	    this._obj2 = null;
	    this._obj3 = null;
	    this._obj4 = null;
	    this._obj5 = null;
	    this._obj6 = null;
	    this._obj7 = null;
	    this._obj8 = null;
	    this._obj9 = null;
	    this._privateComponent = null;
	    this._constructionCounter = 0;
	  },
	  instantiateDirectives: function instantiateDirectives(lightDomAppInjector, shadowDomAppInjector, preBuiltObjects) {
	    assert.argumentTypes(lightDomAppInjector, Injector, shadowDomAppInjector, Injector, preBuiltObjects, PreBuiltObjects);
	    this._checkShadowDomAppInjector(shadowDomAppInjector);
	    this._preBuiltObjects = preBuiltObjects;
	    this._lightDomAppInjector = lightDomAppInjector;
	    this._shadowDomAppInjector = shadowDomAppInjector;
	    var p = this._proto;
	    if (isPresent(p._keyId0)) this._getDirectiveByKeyId(p._keyId0);
	    if (isPresent(p._keyId1)) this._getDirectiveByKeyId(p._keyId1);
	    if (isPresent(p._keyId2)) this._getDirectiveByKeyId(p._keyId2);
	    if (isPresent(p._keyId3)) this._getDirectiveByKeyId(p._keyId3);
	    if (isPresent(p._keyId4)) this._getDirectiveByKeyId(p._keyId4);
	    if (isPresent(p._keyId5)) this._getDirectiveByKeyId(p._keyId5);
	    if (isPresent(p._keyId6)) this._getDirectiveByKeyId(p._keyId6);
	    if (isPresent(p._keyId7)) this._getDirectiveByKeyId(p._keyId7);
	    if (isPresent(p._keyId8)) this._getDirectiveByKeyId(p._keyId8);
	    if (isPresent(p._keyId9)) this._getDirectiveByKeyId(p._keyId9);
	    if (isPresent(this._privateComponentBinding)) {
	      this._privateComponent = this._new(this._privateComponentBinding);
	    }
	  },
	  createPrivateComponent: function createPrivateComponent(componentType, annotation) {
	    assert.argumentTypes(componentType, Type, annotation, Directive);
	    this._privateComponentBinding = DirectiveBinding.createFromType(componentType, annotation);
	    this._privateComponent = this._new(this._privateComponentBinding);
	    return this._privateComponent;
	  },
	  _checkShadowDomAppInjector: function _checkShadowDomAppInjector(shadowDomAppInjector) {
	    assert.argumentTypes(shadowDomAppInjector, Injector);
	    if (this._proto._binding0IsComponent && isBlank(shadowDomAppInjector)) {
	      throw new BaseException('A shadowDomAppInjector is required as this ElementInjector contains a component');
	    } else if (!this._proto._binding0IsComponent && isPresent(shadowDomAppInjector)) {
	      throw new BaseException('No shadowDomAppInjector allowed as there is not component stored in this ElementInjector');
	    }
	  },
	  get: function get(token) {
	    return this._getByKey(Key.get(token), 0, false, null);
	  },
	  hasDirective: function hasDirective(type) {
	    assert.argumentTypes(type, Type);
	    return assert.returnType(this._getDirectiveByKeyId(Key.get(type).id) !== _undefined, assert.type.boolean);
	  },
	  hasPreBuiltObject: function hasPreBuiltObject(type) {
	    assert.argumentTypes(type, Type);
	    var pb = this._getPreBuiltObjectByKeyId(Key.get(type).id);
	    return assert.returnType(pb !== _undefined && isPresent(pb), assert.type.boolean);
	  },
	  forElement: function forElement(el) {
	    return assert.returnType(this._preBuiltObjects.element.domElement === el, assert.type.boolean);
	  },
	  getNgElement: function getNgElement() {
	    return this._preBuiltObjects.element;
	  },
	  getComponent: function getComponent() {
	    if (this._proto._binding0IsComponent) {
	      return this._obj0;
	    } else {
	      throw new BaseException('There is not component stored in this ElementInjector');
	    }
	  },
	  getPrivateComponent: function getPrivateComponent() {
	    return this._privateComponent;
	  },
	  getShadowDomAppInjector: function getShadowDomAppInjector() {
	    return this._shadowDomAppInjector;
	  },
	  directParent: function directParent() {
	    return assert.returnType(this._proto.distanceToParent < 2 ? this.parent : null, $ElementInjector);
	  },
	  _isComponentKey: function _isComponentKey(key) {
	    assert.argumentTypes(key, Key);
	    return this._proto._binding0IsComponent && key.id === this._proto._keyId0;
	  },
	  _isPrivateComponentKey: function _isPrivateComponentKey(key) {
	    assert.argumentTypes(key, Key);
	    return isPresent(this._privateComponentBinding) && key.id === this._privateComponentBinding.key.id;
	  },
	  _new: function _new(binding) {
	    assert.argumentTypes(binding, Binding);
	    if (this._constructionCounter++ > _MAX_DIRECTIVE_CONSTRUCTION_COUNTER) {
	      throw new CyclicDependencyError(binding.key);
	    }
	    var factory = binding.factory;
	    var deps = binding.dependencies;
	    var length = deps.length;
	    var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	    try {
	      d0 = length > 0 ? this._getByDependency(deps[0], binding.key) : null;
	      d1 = length > 1 ? this._getByDependency(deps[1], binding.key) : null;
	      d2 = length > 2 ? this._getByDependency(deps[2], binding.key) : null;
	      d3 = length > 3 ? this._getByDependency(deps[3], binding.key) : null;
	      d4 = length > 4 ? this._getByDependency(deps[4], binding.key) : null;
	      d5 = length > 5 ? this._getByDependency(deps[5], binding.key) : null;
	      d6 = length > 6 ? this._getByDependency(deps[6], binding.key) : null;
	      d7 = length > 7 ? this._getByDependency(deps[7], binding.key) : null;
	      d8 = length > 8 ? this._getByDependency(deps[8], binding.key) : null;
	      d9 = length > 9 ? this._getByDependency(deps[9], binding.key) : null;
	    } catch (e) {
	      if (e instanceof ProviderError) e.addKey(binding.key);
	      throw e;
	    }
	    var obj;
	    switch (length) {
	      case 0:
	        obj = factory();
	        break;
	      case 1:
	        obj = factory(d0);
	        break;
	      case 2:
	        obj = factory(d0, d1);
	        break;
	      case 3:
	        obj = factory(d0, d1, d2);
	        break;
	      case 4:
	        obj = factory(d0, d1, d2, d3);
	        break;
	      case 5:
	        obj = factory(d0, d1, d2, d3, d4);
	        break;
	      case 6:
	        obj = factory(d0, d1, d2, d3, d4, d5);
	        break;
	      case 7:
	        obj = factory(d0, d1, d2, d3, d4, d5, d6);
	        break;
	      case 8:
	        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	        break;
	      case 9:
	        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	        break;
	      case 10:
	        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	        break;
	      default:
	        throw "Directive " + binding.key.token + " can only have up to 10 dependencies.";
	    }
	    return obj;
	  },
	  _getByDependency: function _getByDependency(dep, requestor) {
	    assert.argumentTypes(dep, DirectiveDependency, requestor, Key);
	    if (isPresent(dep.eventEmitterName)) return this._buildEventEmitter(dep);
	    if (isPresent(dep.propSetterName)) return this._buildPropSetter(dep);
	    if (isPresent(dep.attributeName)) return this._buildAttribute(dep);
	    return this._getByKey(dep.key, dep.depth, dep.optional, requestor);
	  },
	  _buildEventEmitter: function _buildEventEmitter(dep) {
	    var $__12 = this;
	    var view = this._getPreBuiltObjectByKeyId(StaticKeys.instance().viewId);
	    return function (event) {
	      view.triggerEventHandlers(dep.eventEmitterName, event, $__12._proto.index);
	    };
	  },
	  _buildPropSetter: function _buildPropSetter(dep) {
	    var ngElement = this._getPreBuiltObjectByKeyId(StaticKeys.instance().ngElementId);
	    var domElement = ngElement.domElement;
	    var setter = setterFactory(dep.propSetterName);
	    return function (v) {
	      setter(domElement, v);
	    };
	  },
	  _buildAttribute: function _buildAttribute(dep) {
	    var attributes = this._proto.attributes;
	    if (isPresent(attributes) && MapWrapper.contains(attributes, dep.attributeName)) {
	      return assert.returnType(MapWrapper.get(attributes, dep.attributeName), assert.type.string);
	    } else {
	      return assert.returnType(null, assert.type.string);
	    }
	  },
	  _getByKey: function _getByKey(key, depth, optional, requestor) {
	    assert.argumentTypes(key, Key, depth, assert.type.number, optional, assert.type.boolean, requestor, Key);
	    var ei = this;
	    if (!this._shouldIncludeSelf(depth)) {
	      depth -= ei._proto.distanceToParent;
	      ei = ei._parent;
	    }
	    while (ei != null && depth >= 0) {
	      var preBuiltObj = ei._getPreBuiltObjectByKeyId(key.id);
	      if (preBuiltObj !== _undefined) return preBuiltObj;
	      var dir = ei._getDirectiveByKeyId(key.id);
	      if (dir !== _undefined) return dir;
	      depth -= ei._proto.distanceToParent;
	      ei = ei._parent;
	    }
	    if (isPresent(this._host) && this._host._isComponentKey(key)) {
	      return this._host.getComponent();
	    } else if (isPresent(this._host) && this._host._isPrivateComponentKey(key)) {
	      return this._host.getPrivateComponent();
	    } else if (optional) {
	      return this._appInjector(requestor).getOptional(key);
	    } else {
	      return this._appInjector(requestor).get(key);
	    }
	  },
	  _appInjector: function _appInjector(requestor) {
	    assert.argumentTypes(requestor, Key);
	    if (isPresent(requestor) && this._isComponentKey(requestor)) {
	      return this._shadowDomAppInjector;
	    } else {
	      return this._lightDomAppInjector;
	    }
	  },
	  _shouldIncludeSelf: function _shouldIncludeSelf(depth) {
	    assert.argumentTypes(depth, int);
	    return depth === 0;
	  },
	  _getPreBuiltObjectByKeyId: function _getPreBuiltObjectByKeyId(keyId) {
	    assert.argumentTypes(keyId, int);
	    var staticKeys = StaticKeys.instance();
	    if (keyId === staticKeys.viewId) return this._preBuiltObjects.view;
	    if (keyId === staticKeys.ngElementId) return this._preBuiltObjects.element;
	    if (keyId === staticKeys.viewContainerId) return this._preBuiltObjects.viewContainer;
	    if (keyId === staticKeys.bindingPropagationConfigId) return this._preBuiltObjects.bindingPropagationConfig;
	    if (keyId === staticKeys.privateComponentLocationId) {
	      return new pclModule.PrivateComponentLocation(this, this._preBuiltObjects.element, this._preBuiltObjects.view);
	    }
	    return _undefined;
	  },
	  _getDirectiveByKeyId: function _getDirectiveByKeyId(keyId) {
	    assert.argumentTypes(keyId, int);
	    var p = this._proto;
	    if (p._keyId0 === keyId) {
	      if (isBlank(this._obj0)) {
	        this._obj0 = this._new(p._binding0);
	      }
	      return this._obj0;
	    }
	    if (p._keyId1 === keyId) {
	      if (isBlank(this._obj1)) {
	        this._obj1 = this._new(p._binding1);
	      }
	      return this._obj1;
	    }
	    if (p._keyId2 === keyId) {
	      if (isBlank(this._obj2)) {
	        this._obj2 = this._new(p._binding2);
	      }
	      return this._obj2;
	    }
	    if (p._keyId3 === keyId) {
	      if (isBlank(this._obj3)) {
	        this._obj3 = this._new(p._binding3);
	      }
	      return this._obj3;
	    }
	    if (p._keyId4 === keyId) {
	      if (isBlank(this._obj4)) {
	        this._obj4 = this._new(p._binding4);
	      }
	      return this._obj4;
	    }
	    if (p._keyId5 === keyId) {
	      if (isBlank(this._obj5)) {
	        this._obj5 = this._new(p._binding5);
	      }
	      return this._obj5;
	    }
	    if (p._keyId6 === keyId) {
	      if (isBlank(this._obj6)) {
	        this._obj6 = this._new(p._binding6);
	      }
	      return this._obj6;
	    }
	    if (p._keyId7 === keyId) {
	      if (isBlank(this._obj7)) {
	        this._obj7 = this._new(p._binding7);
	      }
	      return this._obj7;
	    }
	    if (p._keyId8 === keyId) {
	      if (isBlank(this._obj8)) {
	        this._obj8 = this._new(p._binding8);
	      }
	      return this._obj8;
	    }
	    if (p._keyId9 === keyId) {
	      if (isBlank(this._obj9)) {
	        this._obj9 = this._new(p._binding9);
	      }
	      return this._obj9;
	    }
	    return _undefined;
	  },
	  getDirectiveAtIndex: function getDirectiveAtIndex(index) {
	    assert.argumentTypes(index, int);
	    if (index == 0) return this._obj0;
	    if (index == 1) return this._obj1;
	    if (index == 2) return this._obj2;
	    if (index == 3) return this._obj3;
	    if (index == 4) return this._obj4;
	    if (index == 5) return this._obj5;
	    if (index == 6) return this._obj6;
	    if (index == 7) return this._obj7;
	    if (index == 8) return this._obj8;
	    if (index == 9) return this._obj9;
	    throw new OutOfBoundsAccess(index);
	  },
	  getDirectiveBindingAtIndex: function getDirectiveBindingAtIndex(index) {
	    assert.argumentTypes(index, int);
	    return this._proto.getDirectiveBindingAtIndex(index);
	  },
	  hasInstances: function hasInstances() {
	    return this._constructionCounter > 0;
	  },
	  hasEventEmitter: function hasEventEmitter(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    return this._proto.hasEventEmitter(eventName);
	  },
	  isExportingComponent: function isExportingComponent() {
	    return this._proto.exportComponent;
	  },
	  isExportingElement: function isExportingElement() {
	    return this._proto.exportElement;
	  },
	  getExportImplicitName: function getExportImplicitName() {
	    return this._proto.exportImplicitName;
	  }
	}, {}, TreeNode);
	Object.defineProperty(ElementInjector, "parameters", { get: function get() {
	    return [[ProtoElementInjector], [ElementInjector], [ElementInjector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.instantiateDirectives, "parameters", { get: function get() {
	    return [[Injector], [Injector], [PreBuiltObjects]];
	  } });
	Object.defineProperty(ElementInjector.prototype.createPrivateComponent, "parameters", { get: function get() {
	    return [[Type], [Directive]];
	  } });
	Object.defineProperty(ElementInjector.prototype._checkShadowDomAppInjector, "parameters", { get: function get() {
	    return [[Injector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.hasDirective, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(ElementInjector.prototype.hasPreBuiltObject, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(ElementInjector.prototype._isComponentKey, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._isPrivateComponentKey, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._new, "parameters", { get: function get() {
	    return [[Binding]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getByDependency, "parameters", { get: function get() {
	    return [[DirectiveDependency], [Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getByKey, "parameters", { get: function get() {
	    return [[Key], [assert.type.number], [assert.type.boolean], [Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._appInjector, "parameters", { get: function get() {
	    return [[Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._shouldIncludeSelf, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getPreBuiltObjectByKeyId, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getDirectiveByKeyId, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ElementInjector.prototype.getDirectiveAtIndex, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ElementInjector.prototype.getDirectiveBindingAtIndex, "parameters", { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(ElementInjector.prototype.hasEventEmitter, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var OutOfBoundsAccess = function OutOfBoundsAccess(index) {
	  $traceurRuntime.superConstructor($OutOfBoundsAccess).call(this);
	  this.message = "Index " + index + " is out-of-bounds.";
	};
	var $OutOfBoundsAccess = OutOfBoundsAccess;
	$traceurRuntime.createClass(OutOfBoundsAccess, { toString: function toString() {
	    return this.message;
	  } }, {}, Error);
	//# sourceMappingURL=element_injector.js.map

	//# sourceMappingURL=./element_injector.map

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Math: { get: function get() {
	      return Math;
	    } },
	  NaN: { get: function get() {
	      return NaN;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__;
	var global = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).global;
	var Math = global.Math;
	var NaN = global.NaN;
	//# sourceMappingURL=math.es6.map

	//# sourceMappingURL=./math.map

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  EventEmitter: { get: function get() {
	      return EventEmitter;
	    } },
	  PropertySetter: { get: function get() {
	      return PropertySetter;
	    } },
	  Attribute: { get: function get() {
	      return Attribute;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_lang__, $__angular2_47_di__;
	var CONST = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).CONST;
	var DependencyAnnotation = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).DependencyAnnotation;
	var EventEmitter = function EventEmitter(eventName) {
	  $traceurRuntime.superConstructor($EventEmitter).call(this);
	  this.eventName = eventName;
	};
	var $EventEmitter = EventEmitter;
	$traceurRuntime.createClass(EventEmitter, {}, {}, DependencyAnnotation);
	Object.defineProperty(EventEmitter, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var PropertySetter = function PropertySetter(propName) {
	  $traceurRuntime.superConstructor($PropertySetter).call(this);
	  this.propName = propName;
	};
	var $PropertySetter = PropertySetter;
	$traceurRuntime.createClass(PropertySetter, {}, {}, DependencyAnnotation);
	Object.defineProperty(PropertySetter, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	var Attribute = function Attribute(attributeName) {
	  $traceurRuntime.superConstructor($Attribute).call(this);
	  this.attributeName = attributeName;
	};
	var $Attribute = Attribute;
	$traceurRuntime.createClass(Attribute, {}, {}, DependencyAnnotation);
	Object.defineProperty(Attribute, "annotations", { get: function get() {
	    return [new CONST()];
	  } });
	//# sourceMappingURL=di.js.map

	//# sourceMappingURL=./di.map

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ViewContainer: { get: function get() {
	      return ViewContainer;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__view__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_di__, $__angular2_47_src_47_core_47_compiler_47_element_95_injector__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_core_47_events_47_event_95_manager__, $__shadow_95_dom_95_emulation_47_light_95_dom__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var viewModule = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ });
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper,
	    List = $__2.List;
	var BaseException = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).BaseException;
	var Injector = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injector;
	var eiModule = ($__angular2_47_src_47_core_47_compiler_47_element_95_injector__ = __webpack_require__(54), $__angular2_47_src_47_core_47_compiler_47_element_95_injector__ && $__angular2_47_src_47_core_47_compiler_47_element_95_injector__.__esModule && $__angular2_47_src_47_core_47_compiler_47_element_95_injector__ || { "default": $__angular2_47_src_47_core_47_compiler_47_element_95_injector__ });
	var $__5 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__5.isPresent,
	    isBlank = $__5.isBlank;
	var EventManager = ($__angular2_47_src_47_core_47_events_47_event_95_manager__ = __webpack_require__(58), $__angular2_47_src_47_core_47_events_47_event_95_manager__ && $__angular2_47_src_47_core_47_events_47_event_95_manager__.__esModule && $__angular2_47_src_47_core_47_events_47_event_95_manager__ || { "default": $__angular2_47_src_47_core_47_events_47_event_95_manager__ }).EventManager;
	var LightDom = ($__shadow_95_dom_95_emulation_47_light_95_dom__ = __webpack_require__(60), $__shadow_95_dom_95_emulation_47_light_95_dom__ && $__shadow_95_dom_95_emulation_47_light_95_dom__.__esModule && $__shadow_95_dom_95_emulation_47_light_95_dom__ || { "default": $__shadow_95_dom_95_emulation_47_light_95_dom__ }).LightDom;
	var ViewContainer = function ViewContainer(parentView, templateElement, defaultProtoView, elementInjector, eventManager) {
	  var lightDom = arguments[5] !== void 0 ? arguments[5] : null;
	  assert.argumentTypes(parentView, viewModule.View, templateElement, assert.type.any, defaultProtoView, viewModule.ProtoView, elementInjector, eiModule.ElementInjector, eventManager, EventManager, lightDom, assert.type.any);
	  this.parentView = parentView;
	  this.templateElement = templateElement;
	  this.defaultProtoView = defaultProtoView;
	  this.elementInjector = elementInjector;
	  this._lightDom = lightDom;
	  this._views = [];
	  this.appInjector = null;
	  this.hostElementInjector = null;
	  this.hostLightDom = null;
	  this._eventManager = eventManager;
	};
	var $ViewContainer = ViewContainer;
	$traceurRuntime.createClass(ViewContainer, Object.defineProperties({
	  hydrate: function hydrate(appInjector, hostElementInjector, hostLightDom) {
	    assert.argumentTypes(appInjector, Injector, hostElementInjector, eiModule.ElementInjector, hostLightDom, LightDom);
	    this.appInjector = appInjector;
	    this.hostElementInjector = hostElementInjector;
	    this.hostLightDom = hostLightDom;
	  },
	  dehydrate: function dehydrate() {
	    this.appInjector = null;
	    this.hostElementInjector = null;
	    this.hostLightDom = null;
	    this.clear();
	  },
	  clear: function clear() {
	    for (var i = this._views.length - 1; i >= 0; i--) {
	      this.remove(i);
	    }
	  },
	  get: function get(index) {
	    assert.argumentTypes(index, assert.type.number);
	    return assert.returnType(this._views[index], viewModule.View);
	  },

	  _siblingToInsertAfter: function _siblingToInsertAfter(index) {
	    assert.argumentTypes(index, assert.type.number);
	    if (index == 0) return this.templateElement;
	    return ListWrapper.last(this._views[index - 1].nodes);
	  },
	  hydrated: function hydrated() {
	    return isPresent(this.appInjector);
	  },
	  create: function create() {
	    var atIndex = arguments[0] !== void 0 ? arguments[0] : -1;
	    if (!this.hydrated()) throw new BaseException('Cannot create views on a dehydrated ViewContainer');
	    var newView = this.defaultProtoView.instantiate(this.hostElementInjector, this._eventManager);
	    this.insert(newView, atIndex);
	    newView.hydrate(this.appInjector, this.hostElementInjector, this.hostLightDom, this.parentView.context, this.parentView.locals);
	    if (isPresent(this.hostLightDom)) {
	      this.hostLightDom.redistribute();
	    }
	    return assert.returnType(newView, viewModule.View);
	  },
	  insert: function insert(view) {
	    var atIndex = arguments[1] !== void 0 ? arguments[1] : -1;
	    if (atIndex == -1) atIndex = this._views.length;
	    ListWrapper.insert(this._views, atIndex, view);
	    if (isBlank(this._lightDom)) {
	      $ViewContainer.moveViewNodesAfterSibling(this._siblingToInsertAfter(atIndex), view);
	    } else {
	      this._lightDom.redistribute();
	    }
	    this.parentView.changeDetector.addChild(view.changeDetector);
	    this._linkElementInjectors(view);
	    return assert.returnType(view, viewModule.View);
	  },
	  remove: function remove() {
	    var atIndex = arguments[0] !== void 0 ? arguments[0] : -1;
	    if (atIndex == -1) atIndex = this._views.length - 1;
	    var view = this.detach(atIndex);
	    view.dehydrate();
	    this.defaultProtoView.returnToPool(view);
	  },
	  detach: function detach() {
	    var atIndex = arguments[0] !== void 0 ? arguments[0] : -1;
	    if (atIndex == -1) atIndex = this._views.length - 1;
	    var detachedView = this.get(atIndex);
	    ListWrapper.removeAt(this._views, atIndex);
	    if (isBlank(this._lightDom)) {
	      $ViewContainer.removeViewNodes(detachedView);
	    } else {
	      this._lightDom.redistribute();
	    }
	    if (isPresent(this.hostLightDom)) {
	      this.hostLightDom.redistribute();
	    }
	    detachedView.changeDetector.remove();
	    this._unlinkElementInjectors(detachedView);
	    return assert.returnType(detachedView, viewModule.View);
	  },
	  contentTagContainers: function contentTagContainers() {
	    return this._views;
	  },
	  nodes: function nodes() {
	    var r = [];
	    for (var i = 0; i < this._views.length; ++i) {
	      r = ListWrapper.concat(r, this._views[i].nodes);
	    }
	    return assert.returnType(r, List);
	  },
	  _linkElementInjectors: function _linkElementInjectors(view) {
	    for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	      view.rootElementInjectors[i].parent = this.elementInjector;
	    }
	  },
	  _unlinkElementInjectors: function _unlinkElementInjectors(view) {
	    for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	      view.rootElementInjectors[i].parent = null;
	    }
	  }
	}, {
	  length: {
	    get: function get() {
	      return this._views.length;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {
	  moveViewNodesAfterSibling: function moveViewNodesAfterSibling(sibling, view) {
	    for (var i = view.nodes.length - 1; i >= 0; --i) {
	      DOM.insertAfter(sibling, view.nodes[i]);
	    }
	  },
	  removeViewNodes: function removeViewNodes(view) {
	    var len = view.nodes.length;
	    if (len == 0) return;
	    var parent = view.nodes[0].parentNode;
	    for (var i = len - 1; i >= 0; --i) {
	      DOM.removeChild(parent, view.nodes[i]);
	    }
	  }
	});
	Object.defineProperty(ViewContainer, "parameters", { get: function get() {
	    return [[viewModule.View], [], [viewModule.ProtoView], [eiModule.ElementInjector], [EventManager], []];
	  } });
	Object.defineProperty(ViewContainer.prototype.hydrate, "parameters", { get: function get() {
	    return [[Injector], [eiModule.ElementInjector], [LightDom]];
	  } });
	Object.defineProperty(ViewContainer.prototype.get, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	Object.defineProperty(ViewContainer.prototype._siblingToInsertAfter, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	//# sourceMappingURL=view_container.js.map

	//# sourceMappingURL=./view_container.map

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  EventManager: { get: function get() {
	      return EventManager;
	    } },
	  EventManagerPlugin: { get: function get() {
	      return EventManagerPlugin;
	    } },
	  DomEventsPlugin: { get: function get() {
	      return DomEventsPlugin;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    isPresent = $__1.isPresent,
	    StringWrapper = $__1.StringWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__3.List,
	    ListWrapper = $__3.ListWrapper,
	    MapWrapper = $__3.MapWrapper;
	var VmTurnZone = ($__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ = __webpack_require__(59), $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__.__esModule && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ || { "default": $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ }).VmTurnZone;
	var BUBBLE_SYMBOL = '^';
	var EventManager = function EventManager(plugins, zone) {
	  assert.argumentTypes(plugins, assert.genericType(List, EventManagerPlugin), zone, VmTurnZone);
	  this._zone = zone;
	  this._plugins = plugins;
	  for (var i = 0; i < plugins.length; i++) {
	    plugins[i].manager = this;
	  }
	};
	$traceurRuntime.createClass(EventManager, {
	  addEventListener: function addEventListener(element, eventName, handler) {
	    assert.argumentTypes(element, assert.type.any, eventName, assert.type.string, handler, Function);
	    var shouldSupportBubble = eventName[0] == BUBBLE_SYMBOL;
	    if (shouldSupportBubble) {
	      eventName = StringWrapper.substring(eventName, 1);
	    }
	    var plugin = this._findPluginFor(eventName);
	    plugin.addEventListener(element, eventName, handler, shouldSupportBubble);
	  },
	  getZone: function getZone() {
	    return assert.returnType(this._zone, VmTurnZone);
	  },
	  _findPluginFor: function _findPluginFor(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    var plugins = this._plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      var plugin = plugins[i];
	      if (plugin.supports(eventName)) {
	        return assert.returnType(plugin, EventManagerPlugin);
	      }
	    }
	    throw new BaseException("No event manager plugin found for event " + eventName);
	  }
	}, {});
	Object.defineProperty(EventManager, "parameters", { get: function get() {
	    return [[assert.genericType(List, EventManagerPlugin)], [VmTurnZone]];
	  } });
	Object.defineProperty(EventManager.prototype.addEventListener, "parameters", { get: function get() {
	    return [[], [assert.type.string], [Function]];
	  } });
	Object.defineProperty(EventManager.prototype._findPluginFor, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var EventManagerPlugin = function EventManagerPlugin() {
	  ;
	};
	$traceurRuntime.createClass(EventManagerPlugin, {
	  supports: function supports(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    return assert.returnType(false, assert.type.boolean);
	  },
	  addEventListener: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	    assert.argumentTypes(element, assert.type.any, eventName, assert.type.string, handler, Function, shouldSupportBubble, assert.type.boolean);
	    throw "not implemented";
	  }
	}, {});
	Object.defineProperty(EventManagerPlugin.prototype.supports, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(EventManagerPlugin.prototype.addEventListener, "parameters", { get: function get() {
	    return [[], [assert.type.string], [Function], [assert.type.boolean]];
	  } });
	var DomEventsPlugin = function DomEventsPlugin() {
	  $traceurRuntime.superConstructor($DomEventsPlugin).apply(this, arguments);
	  ;
	};
	var $DomEventsPlugin = DomEventsPlugin;
	$traceurRuntime.createClass(DomEventsPlugin, {
	  supports: function supports(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    return assert.returnType(true, assert.type.boolean);
	  },
	  addEventListener: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	    assert.argumentTypes(element, assert.type.any, eventName, assert.type.string, handler, Function, shouldSupportBubble, assert.type.boolean);
	    var outsideHandler = shouldSupportBubble ? $DomEventsPlugin.bubbleCallback(element, handler, this.manager._zone) : $DomEventsPlugin.sameElementCallback(element, handler, this.manager._zone);
	    this.manager._zone.runOutsideAngular(function () {
	      DOM.on(element, eventName, outsideHandler);
	    });
	  }
	}, {
	  sameElementCallback: function sameElementCallback(element, handler, zone) {
	    return function (event) {
	      if (event.target === element) {
	        zone.run(function () {
	          return handler(event);
	        });
	      }
	    };
	  },
	  bubbleCallback: function bubbleCallback(element, handler, zone) {
	    return function (event) {
	      return zone.run(function () {
	        return handler(event);
	      });
	    };
	  }
	}, EventManagerPlugin);
	Object.defineProperty(DomEventsPlugin.prototype.supports, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(DomEventsPlugin.prototype.addEventListener, "parameters", { get: function get() {
	    return [[], [assert.type.string], [Function], [assert.type.boolean]];
	  } });
	//# sourceMappingURL=event_manager.js.map

	//# sourceMappingURL=./event_manager.map

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  VmTurnZone: { get: function get() {
	      return VmTurnZone;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var $__0 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__0.List,
	    ListWrapper = $__0.ListWrapper,
	    StringMapWrapper = $__0.StringMapWrapper;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    normalizeBlank = $__1.normalizeBlank,
	    isPresent = $__1.isPresent,
	    global = $__1.global;
	var VmTurnZone = function VmTurnZone($__4) {
	  var enableLongStackTrace = $__4.enableLongStackTrace;
	  this._nestedRunCounter = 0;
	  this._onTurnStart = null;
	  this._onTurnDone = null;
	  this._onErrorHandler = null;
	  this._outerZone = global.zone;
	  this._innerZone = this._createInnerZone(this._outerZone, enableLongStackTrace);
	};
	$traceurRuntime.createClass(VmTurnZone, {
	  initCallbacks: function initCallbacks() {
	    var $__4 = arguments[0] !== void 0 ? arguments[0] : {},
	        onTurnStart = $__4.onTurnStart,
	        onTurnDone = $__4.onTurnDone,
	        onScheduleMicrotask = $__4.onScheduleMicrotask,
	        onErrorHandler = $__4.onErrorHandler;
	    this._onTurnStart = normalizeBlank(onTurnStart);
	    this._onTurnDone = normalizeBlank(onTurnDone);
	    this._onErrorHandler = normalizeBlank(onErrorHandler);
	  },
	  run: function run(fn) {
	    return this._innerZone.run(fn);
	  },
	  runOutsideAngular: function runOutsideAngular(fn) {
	    return this._outerZone.run(fn);
	  },
	  _createInnerZone: function _createInnerZone(zone, enableLongStackTrace) {
	    var $__2 = this;
	    var vmTurnZone = this;
	    var errorHandling;
	    if (enableLongStackTrace) {
	      errorHandling = StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function onError(e) {
	          vmTurnZone._onError(this, e);
	        } });
	    } else {
	      errorHandling = { onError: function onError(e) {
	          vmTurnZone._onError(this, e);
	        } };
	    }
	    return zone.fork(errorHandling).fork({
	      beforeTask: function beforeTask() {
	        $__2._beforeTask();
	      },
	      afterTask: function afterTask() {
	        $__2._afterTask();
	      }
	    });
	  },
	  _beforeTask: function _beforeTask() {
	    this._nestedRunCounter++;
	    if (this._nestedRunCounter === 1 && this._onTurnStart) {
	      this._onTurnStart();
	    }
	  },
	  _afterTask: function _afterTask() {
	    this._nestedRunCounter--;
	    if (this._nestedRunCounter === 0 && this._onTurnDone) {
	      this._onTurnDone();
	    }
	  },
	  _onError: function _onError(zone, e) {
	    if (isPresent(this._onErrorHandler)) {
	      var trace = [normalizeBlank(e.stack)];
	      while (zone && zone.constructedAtException) {
	        trace.push(zone.constructedAtException.get());
	        zone = zone.parent;
	      }
	      this._onErrorHandler(e, trace);
	    } else {
	      throw e;
	    }
	  }
	}, {});
	//# sourceMappingURL=vm_turn_zone.es6.map

	//# sourceMappingURL=./vm_turn_zone.map

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DestinationLightDom: { get: function get() {
	      return DestinationLightDom;
	    } },
	  LightDom: { get: function get() {
	      return LightDom;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $___46__46__47_view__, $__content_95_tag__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__3.isBlank,
	    isPresent = $__3.isPresent;
	var viewModule = ($___46__46__47_view__ = __webpack_require__(53), $___46__46__47_view__ && $___46__46__47_view__.__esModule && $___46__46__47_view__ || { "default": $___46__46__47_view__ });
	var Content = ($__content_95_tag__ = __webpack_require__(61), $__content_95_tag__ && $__content_95_tag__.__esModule && $__content_95_tag__ || { "default": $__content_95_tag__ }).Content;
	var DestinationLightDom = function DestinationLightDom() {
	  ;
	};
	$traceurRuntime.createClass(DestinationLightDom, {}, {});
	var _Root = function _Root(node, viewContainer, content) {
	  this.node = node;
	  this.viewContainer = viewContainer;
	  this.content = content;
	};
	$traceurRuntime.createClass(_Root, {}, {});
	var LightDom = function LightDom(lightDomView, shadowDomView, element) {
	  assert.argumentTypes(lightDomView, viewModule.View, shadowDomView, viewModule.View, element, assert.type.any);
	  this.lightDomView = lightDomView;
	  this.shadowDomView = shadowDomView;
	  this.nodes = DOM.childNodesAsList(element);
	  this.roots = null;
	};
	$traceurRuntime.createClass(LightDom, {
	  redistribute: function redistribute() {
	    var tags = this.contentTags();
	    if (tags.length > 0) {
	      redistributeNodes(tags, this.expandedDomNodes());
	    }
	  },
	  contentTags: function contentTags() {
	    return assert.returnType(this._collectAllContentTags(this.shadowDomView, []), assert.genericType(List, Content));
	  },
	  _collectAllContentTags: function _collectAllContentTags(view, acc) {
	    var $__5 = this;
	    assert.argumentTypes(view, viewModule.View, acc, assert.genericType(List, Content));
	    var contentTags = view.contentTags;
	    var vcs = view.viewContainers;
	    for (var i = 0; i < vcs.length; i++) {
	      var vc = vcs[i];
	      var contentTag = contentTags[i];
	      if (isPresent(contentTag)) {
	        ListWrapper.push(acc, contentTag);
	      }
	      if (isPresent(vc)) {
	        ListWrapper.forEach(vc.contentTagContainers(), function (view) {
	          $__5._collectAllContentTags(view, acc);
	        });
	      }
	    }
	    return assert.returnType(acc, assert.genericType(List, Content));
	  },
	  expandedDomNodes: function expandedDomNodes() {
	    var res = [];
	    var roots = this._roots();
	    for (var i = 0; i < roots.length; ++i) {
	      var root = roots[i];
	      if (isPresent(root.viewContainer)) {
	        res = ListWrapper.concat(res, root.viewContainer.nodes());
	      } else if (isPresent(root.content)) {
	        res = ListWrapper.concat(res, root.content.nodes());
	      } else {
	        ListWrapper.push(res, root.node);
	      }
	    }
	    return assert.returnType(res, List);
	  },
	  _roots: function _roots() {
	    if (isPresent(this.roots)) return this.roots;
	    var viewContainers = this.lightDomView.viewContainers;
	    var contentTags = this.lightDomView.contentTags;
	    this.roots = ListWrapper.map(this.nodes, function (n) {
	      var foundVc = null;
	      var foundContentTag = null;
	      for (var i = 0; i < viewContainers.length; i++) {
	        var vc = viewContainers[i];
	        var contentTag = contentTags[i];
	        if (isPresent(vc) && vc.templateElement === n) {
	          foundVc = vc;
	        }
	        if (isPresent(contentTag) && contentTag.contentStartElement === n) {
	          foundContentTag = contentTag;
	        }
	      }
	      return new _Root(n, foundVc, foundContentTag);
	    });
	    return this.roots;
	  }
	}, {});
	Object.defineProperty(LightDom, "parameters", { get: function get() {
	    return [[viewModule.View], [viewModule.View], []];
	  } });
	Object.defineProperty(LightDom.prototype._collectAllContentTags, "parameters", { get: function get() {
	    return [[viewModule.View], [assert.genericType(List, Content)]];
	  } });
	function redistributeNodes(contents, nodes) {
	  for (var i = 0; i < contents.length; ++i) {
	    var content = contents[i];
	    var select = content.select;
	    var matchSelector = function matchSelector(n) {
	      return DOM.elementMatches(n, select);
	    };
	    if (select.length === 0) {
	      content.insert(nodes);
	      ListWrapper.clear(nodes);
	    } else {
	      var matchingNodes = ListWrapper.filter(nodes, matchSelector);
	      content.insert(matchingNodes);
	      ListWrapper.removeAll(nodes, matchingNodes);
	    }
	  }
	}
	Object.defineProperty(redistributeNodes, "parameters", { get: function get() {
	    return [[assert.genericType(List, Content)], [List]];
	  } });
	//# sourceMappingURL=light_dom.js.map

	//# sourceMappingURL=./light_dom.map

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Content: { get: function get() {
	      return Content;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__light_95_dom__, $__angular2_47_di__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var ldModule = ($__light_95_dom__ = __webpack_require__(60), $__light_95_dom__ && $__light_95_dom__.__esModule && $__light_95_dom__ || { "default": $__light_95_dom__ });
	var $__1 = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }),
	    Inject = $__1.Inject,
	    Injectable = $__1.Injectable;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var $__4 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__4.List,
	    ListWrapper = $__4.ListWrapper;
	var ContentStrategy = function ContentStrategy() {
	  ;
	};
	$traceurRuntime.createClass(ContentStrategy, { insert: function insert(nodes) {
	    assert.argumentTypes(nodes, List);
	  } }, {});
	Object.defineProperty(ContentStrategy.prototype.insert, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var RenderedContent = function RenderedContent(contentEl) {
	  $traceurRuntime.superConstructor($RenderedContent).call(this);
	  this.beginScript = contentEl;
	  this.endScript = DOM.nextSibling(this.beginScript);
	  this.nodes = [];
	};
	var $RenderedContent = RenderedContent;
	$traceurRuntime.createClass(RenderedContent, {
	  insert: function insert(nodes) {
	    assert.argumentTypes(nodes, List);
	    this.nodes = nodes;
	    DOM.insertAllBefore(this.endScript, nodes);
	    this._removeNodesUntil(ListWrapper.isEmpty(nodes) ? this.endScript : nodes[0]);
	  },
	  _removeNodesUntil: function _removeNodesUntil(node) {
	    var p = DOM.parentElement(this.beginScript);
	    for (var next = DOM.nextSibling(this.beginScript); next !== node; next = DOM.nextSibling(this.beginScript)) {
	      DOM.removeChild(p, next);
	    }
	  }
	}, {}, ContentStrategy);
	Object.defineProperty(RenderedContent, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(RenderedContent.prototype.insert, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var IntermediateContent = function IntermediateContent(destinationLightDom) {
	  assert.argumentTypes(destinationLightDom, ldModule.LightDom);
	  $traceurRuntime.superConstructor($IntermediateContent).call(this);
	  this.destinationLightDom = destinationLightDom;
	  this.nodes = [];
	};
	var $IntermediateContent = IntermediateContent;
	$traceurRuntime.createClass(IntermediateContent, { insert: function insert(nodes) {
	    assert.argumentTypes(nodes, List);
	    this.nodes = nodes;
	    this.destinationLightDom.redistribute();
	  } }, {}, ContentStrategy);
	Object.defineProperty(IntermediateContent, "parameters", { get: function get() {
	    return [[ldModule.LightDom]];
	  } });
	Object.defineProperty(IntermediateContent.prototype.insert, "parameters", { get: function get() {
	    return [[List]];
	  } });
	var Content = function Content(destinationLightDom, contentStartEl, selector) {
	  assert.argumentTypes(destinationLightDom, ldModule.LightDom, contentStartEl, assert.type.any, selector, assert.type.string);
	  this.select = selector;
	  this.contentStartElement = contentStartEl;
	  this._strategy = isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) : new RenderedContent(contentStartEl);
	};
	$traceurRuntime.createClass(Content, {
	  nodes: function nodes() {
	    return assert.returnType(this._strategy.nodes, List);
	  },
	  insert: function insert(nodes) {
	    assert.argumentTypes(nodes, List);
	    this._strategy.insert(nodes);
	  }
	}, {});
	Object.defineProperty(Content, "parameters", { get: function get() {
	    return [[ldModule.LightDom], [], [assert.type.string]];
	  } });
	Object.defineProperty(Content.prototype.insert, "parameters", { get: function get() {
	    return [[List]];
	  } });
	//# sourceMappingURL=content_tag.js.map

	//# sourceMappingURL=./content_tag.map

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  NgElement: { get: function get() {
	      return NgElement;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var normalizeBlank = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).normalizeBlank;
	var NgElement = function NgElement(domElement) {
	  this.domElement = domElement;
	};
	$traceurRuntime.createClass(NgElement, { getAttribute: function getAttribute(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return normalizeBlank(DOM.getAttribute(this.domElement, name));
	  } }, {});
	Object.defineProperty(NgElement.prototype.getAttribute, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=element.js.map

	//# sourceMappingURL=./element.map

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  PrivateComponentLocation: { get: function get() {
	      return PrivateComponentLocation;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_src_47_core_47_dom_47_element__, $__view__, $__element_95_injector__, $__shadow_95_dom_95_strategy__, $__angular2_47_src_47_core_47_events_47_event_95_manager__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Directive = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Directive;
	var NgElement = ($__angular2_47_src_47_core_47_dom_47_element__ = __webpack_require__(62), $__angular2_47_src_47_core_47_dom_47_element__ && $__angular2_47_src_47_core_47_dom_47_element__.__esModule && $__angular2_47_src_47_core_47_dom_47_element__ || { "default": $__angular2_47_src_47_core_47_dom_47_element__ }).NgElement;
	var viewModule = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ });
	var eiModule = ($__element_95_injector__ = __webpack_require__(54), $__element_95_injector__ && $__element_95_injector__.__esModule && $__element_95_injector__ || { "default": $__element_95_injector__ });
	var ShadowDomStrategy = ($__shadow_95_dom_95_strategy__ = __webpack_require__(64), $__shadow_95_dom_95_strategy__ && $__shadow_95_dom_95_strategy__.__esModule && $__shadow_95_dom_95_strategy__ || { "default": $__shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var EventManager = ($__angular2_47_src_47_core_47_events_47_event_95_manager__ = __webpack_require__(58), $__angular2_47_src_47_core_47_events_47_event_95_manager__ && $__angular2_47_src_47_core_47_events_47_event_95_manager__.__esModule && $__angular2_47_src_47_core_47_events_47_event_95_manager__ || { "default": $__angular2_47_src_47_core_47_events_47_event_95_manager__ }).EventManager;
	var ListWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).ListWrapper;
	var Type = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).Type;
	var PrivateComponentLocation = function PrivateComponentLocation(elementInjector, elt, view) {
	  assert.argumentTypes(elementInjector, eiModule.ElementInjector, elt, NgElement, view, viewModule.View);
	  this._elementInjector = elementInjector;
	  this._elt = elt;
	  this._view = view;
	};
	$traceurRuntime.createClass(PrivateComponentLocation, { createComponent: function createComponent(type, annotation, componentProtoView, eventManager, shadowDomStrategy) {
	    assert.argumentTypes(type, Type, annotation, Directive, componentProtoView, viewModule.ProtoView, eventManager, EventManager, shadowDomStrategy, ShadowDomStrategy);
	    var context = this._elementInjector.createPrivateComponent(type, annotation);
	    var view = componentProtoView.instantiate(this._elementInjector, eventManager);
	    view.hydrate(this._elementInjector.getShadowDomAppInjector(), this._elementInjector, null, context, null);
	    shadowDomStrategy.attachTemplate(this._elt.domElement, view);
	    ListWrapper.push(this._view.componentChildViews, view);
	    this._view.changeDetector.addChild(view.changeDetector);
	  } }, {});
	Object.defineProperty(PrivateComponentLocation, "parameters", { get: function get() {
	    return [[eiModule.ElementInjector], [NgElement], [viewModule.View]];
	  } });
	Object.defineProperty(PrivateComponentLocation.prototype.createComponent, "parameters", { get: function get() {
	    return [[Type], [Directive], [viewModule.ProtoView], [EventManager], [ShadowDomStrategy]];
	  } });
	//# sourceMappingURL=private_component_location.js.map

	//# sourceMappingURL=./private_component_location.map

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ShadowDomStrategy: { get: function get() {
	      return ShadowDomStrategy;
	    } },
	  EmulatedUnscopedShadowDomStrategy: { get: function get() {
	      return EmulatedUnscopedShadowDomStrategy;
	    } },
	  EmulatedScopedShadowDomStrategy: { get: function get() {
	      return EmulatedScopedShadowDomStrategy;
	    } },
	  NativeShadowDomStrategy: { get: function get() {
	      return NativeShadowDomStrategy;
	    } },
	  resetShadowDomCache: { get: function get() {
	      return resetShadowDomCache;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_async__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__view__, $__shadow_95_dom_95_emulation_47_light_95_dom__, $__shadow_95_dom_95_emulation_47_shadow_95_css__, $__style_95_inliner__, $__style_95_url_95_resolver__, $__directive_95_metadata__, $__pipeline_47_compile_95_step__, $__pipeline_47_compile_95_element__, $__pipeline_47_compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__2.Type,
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    int = $__2.int,
	    StringWrapper = $__2.StringWrapper,
	    assertionsEnabled = $__2.assertionsEnabled;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__3.List,
	    ListWrapper = $__3.ListWrapper,
	    MapWrapper = $__3.MapWrapper,
	    Map = $__3.Map;
	var PromiseWrapper = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }).PromiseWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var viewModule = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ });
	var LightDom = ($__shadow_95_dom_95_emulation_47_light_95_dom__ = __webpack_require__(60), $__shadow_95_dom_95_emulation_47_light_95_dom__ && $__shadow_95_dom_95_emulation_47_light_95_dom__.__esModule && $__shadow_95_dom_95_emulation_47_light_95_dom__ || { "default": $__shadow_95_dom_95_emulation_47_light_95_dom__ }).LightDom;
	var ShadowCss = ($__shadow_95_dom_95_emulation_47_shadow_95_css__ = __webpack_require__(65), $__shadow_95_dom_95_emulation_47_shadow_95_css__ && $__shadow_95_dom_95_emulation_47_shadow_95_css__.__esModule && $__shadow_95_dom_95_emulation_47_shadow_95_css__ || { "default": $__shadow_95_dom_95_emulation_47_shadow_95_css__ }).ShadowCss;
	var StyleInliner = ($__style_95_inliner__ = __webpack_require__(66), $__style_95_inliner__ && $__style_95_inliner__.__esModule && $__style_95_inliner__ || { "default": $__style_95_inliner__ }).StyleInliner;
	var StyleUrlResolver = ($__style_95_url_95_resolver__ = __webpack_require__(68), $__style_95_url_95_resolver__ && $__style_95_url_95_resolver__.__esModule && $__style_95_url_95_resolver__ || { "default": $__style_95_url_95_resolver__ }).StyleUrlResolver;
	var DirectiveMetadata = ($__directive_95_metadata__ = __webpack_require__(52), $__directive_95_metadata__ && $__directive_95_metadata__.__esModule && $__directive_95_metadata__ || { "default": $__directive_95_metadata__ }).DirectiveMetadata;
	var NS = ($__pipeline_47_compile_95_step__ = __webpack_require__(70), $__pipeline_47_compile_95_step__ && $__pipeline_47_compile_95_step__.__esModule && $__pipeline_47_compile_95_step__ || { "default": $__pipeline_47_compile_95_step__ });
	var CompileElement = ($__pipeline_47_compile_95_element__ = __webpack_require__(71), $__pipeline_47_compile_95_element__ && $__pipeline_47_compile_95_element__.__esModule && $__pipeline_47_compile_95_element__ || { "default": $__pipeline_47_compile_95_element__ }).CompileElement;
	var CompileControl = ($__pipeline_47_compile_95_control__ = __webpack_require__(74), $__pipeline_47_compile_95_control__ && $__pipeline_47_compile_95_control__.__esModule && $__pipeline_47_compile_95_control__ || { "default": $__pipeline_47_compile_95_control__ }).CompileControl;
	var _EMPTY_STEP;
	function _emptyStep() {
	  if (isBlank(_EMPTY_STEP)) {
	    _EMPTY_STEP = new _EmptyCompileStep();
	  }
	  return _EMPTY_STEP;
	}
	var ShadowDomStrategy = function ShadowDomStrategy() {
	  ;
	};
	$traceurRuntime.createClass(ShadowDomStrategy, {
	  attachTemplate: function attachTemplate(el, view) {
	    assert.argumentTypes(el, assert.type.any, view, viewModule.View);
	  },
	  constructLightDom: function constructLightDom(lightDomView, shadowDomView, el) {
	    assert.argumentTypes(lightDomView, viewModule.View, shadowDomView, viewModule.View, el, assert.type.any);
	    return assert.returnType(null, LightDom);
	  },
	  getStyleCompileStep: function getStyleCompileStep(cmpMetadata, templateUrl) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string);
	    return assert.returnType(_emptyStep(), NS.CompileStep);
	  },
	  getTemplateCompileStep: function getTemplateCompileStep(cmpMetadata) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata);
	    return assert.returnType(_emptyStep(), NS.CompileStep);
	  },
	  shimAppElement: function shimAppElement(cmpMetadata, element) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, element, assert.type.any);
	  }
	}, {});
	Object.defineProperty(ShadowDomStrategy.prototype.attachTemplate, "parameters", { get: function get() {
	    return [[], [viewModule.View]];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.constructLightDom, "parameters", { get: function get() {
	    return [[viewModule.View], [viewModule.View], []];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.getStyleCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.getTemplateCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.shimAppElement, "parameters", { get: function get() {
	    return [[DirectiveMetadata], []];
	  } });
	var EmulatedUnscopedShadowDomStrategy = function EmulatedUnscopedShadowDomStrategy(styleUrlResolver, styleHost) {
	  assert.argumentTypes(styleUrlResolver, StyleUrlResolver, styleHost, assert.type.any);
	  $traceurRuntime.superConstructor($EmulatedUnscopedShadowDomStrategy).call(this);
	  this._styleUrlResolver = styleUrlResolver;
	  this._styleHost = styleHost;
	};
	var $EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
	$traceurRuntime.createClass(EmulatedUnscopedShadowDomStrategy, {
	  attachTemplate: function attachTemplate(el, view) {
	    assert.argumentTypes(el, assert.type.any, view, viewModule.View);
	    DOM.clearNodes(el);
	    _moveViewNodesIntoParent(el, view);
	  },
	  constructLightDom: function constructLightDom(lightDomView, shadowDomView, el) {
	    assert.argumentTypes(lightDomView, viewModule.View, shadowDomView, viewModule.View, el, assert.type.any);
	    return assert.returnType(new LightDom(lightDomView, shadowDomView, el), LightDom);
	  },
	  getStyleCompileStep: function getStyleCompileStep(cmpMetadata, templateUrl) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string);
	    return assert.returnType(new _EmulatedUnscopedCssStep(cmpMetadata, templateUrl, this._styleUrlResolver, this._styleHost), NS.CompileStep);
	  },
	  getTemplateCompileStep: function getTemplateCompileStep(cmpMetadata) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata);
	    return assert.returnType(new _BaseEmulatedShadowDomStep(), NS.CompileStep);
	  }
	}, {}, ShadowDomStrategy);
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy, "parameters", { get: function get() {
	    return [[StyleUrlResolver], []];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.attachTemplate, "parameters", { get: function get() {
	    return [[], [viewModule.View]];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.constructLightDom, "parameters", { get: function get() {
	    return [[viewModule.View], [viewModule.View], []];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.getStyleCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string]];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.getTemplateCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	var EmulatedScopedShadowDomStrategy = function EmulatedScopedShadowDomStrategy(styleInliner, styleUrlResolver, styleHost) {
	  assert.argumentTypes(styleInliner, StyleInliner, styleUrlResolver, StyleUrlResolver, styleHost, assert.type.any);
	  $traceurRuntime.superConstructor($EmulatedScopedShadowDomStrategy).call(this, styleUrlResolver, styleHost);
	  this._styleInliner = styleInliner;
	};
	var $EmulatedScopedShadowDomStrategy = EmulatedScopedShadowDomStrategy;
	$traceurRuntime.createClass(EmulatedScopedShadowDomStrategy, {
	  getStyleCompileStep: function getStyleCompileStep(cmpMetadata, templateUrl) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string);
	    return assert.returnType(new _EmulatedScopedCssStep(cmpMetadata, templateUrl, this._styleInliner, this._styleUrlResolver, this._styleHost), NS.CompileStep);
	  },
	  getTemplateCompileStep: function getTemplateCompileStep(cmpMetadata) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata);
	    return assert.returnType(new _ShimShadowDomStep(cmpMetadata), NS.CompileStep);
	  },
	  shimAppElement: function shimAppElement(cmpMetadata, element) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, element, assert.type.any);
	    var cmpType = cmpMetadata.type;
	    var hostAttribute = _getHostAttribute(_getComponentId(cmpType));
	    DOM.setAttribute(element, hostAttribute, '');
	  }
	}, {}, EmulatedUnscopedShadowDomStrategy);
	Object.defineProperty(EmulatedScopedShadowDomStrategy, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy, "parameters", { get: function get() {
	    return [[StyleInliner], [StyleUrlResolver], []];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy.prototype.getStyleCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string]];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy.prototype.getTemplateCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy.prototype.shimAppElement, "parameters", { get: function get() {
	    return [[DirectiveMetadata], []];
	  } });
	var NativeShadowDomStrategy = function NativeShadowDomStrategy(styleUrlResolver) {
	  assert.argumentTypes(styleUrlResolver, StyleUrlResolver);
	  $traceurRuntime.superConstructor($NativeShadowDomStrategy).call(this);
	  this._styleUrlResolver = styleUrlResolver;
	};
	var $NativeShadowDomStrategy = NativeShadowDomStrategy;
	$traceurRuntime.createClass(NativeShadowDomStrategy, {
	  attachTemplate: function attachTemplate(el, view) {
	    assert.argumentTypes(el, assert.type.any, view, viewModule.View);
	    _moveViewNodesIntoParent(DOM.createShadowRoot(el), view);
	  },
	  getStyleCompileStep: function getStyleCompileStep(cmpMetadata, templateUrl) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string);
	    return assert.returnType(new _NativeCssStep(templateUrl, this._styleUrlResolver), NS.CompileStep);
	  }
	}, {}, ShadowDomStrategy);
	Object.defineProperty(NativeShadowDomStrategy, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(NativeShadowDomStrategy, "parameters", { get: function get() {
	    return [[StyleUrlResolver]];
	  } });
	Object.defineProperty(NativeShadowDomStrategy.prototype.attachTemplate, "parameters", { get: function get() {
	    return [[], [viewModule.View]];
	  } });
	Object.defineProperty(NativeShadowDomStrategy.prototype.getStyleCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string]];
	  } });
	var _BaseEmulatedShadowDomStep = function _BaseEmulatedShadowDomStep() {
	  $traceurRuntime.superConstructor($_BaseEmulatedShadowDomStep).apply(this, arguments);
	  ;
	};
	var $_BaseEmulatedShadowDomStep = _BaseEmulatedShadowDomStep;
	$traceurRuntime.createClass(_BaseEmulatedShadowDomStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    if (current.ignoreBindings) {
	      return;
	    }
	    var nodeName = DOM.nodeName(current.element);
	    if (StringWrapper.equals(nodeName.toUpperCase(), 'CONTENT')) {
	      var attrs = current.attrs();
	      var selector = MapWrapper.get(attrs, 'select');
	      current.contentTagSelector = isPresent(selector) ? selector : '';
	      var contentStart = DOM.createScriptTag('type', 'ng/contentStart');
	      if (assertionsEnabled()) {
	        DOM.setAttribute(contentStart, 'select', current.contentTagSelector);
	      }
	      var contentEnd = DOM.createScriptTag('type', 'ng/contentEnd');
	      DOM.insertBefore(current.element, contentStart);
	      DOM.insertBefore(current.element, contentEnd);
	      DOM.remove(current.element);
	      current.element = contentStart;
	    }
	  } }, {}, NS.CompileStep);
	Object.defineProperty(_BaseEmulatedShadowDomStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	var _EmptyCompileStep = function _EmptyCompileStep() {
	  $traceurRuntime.superConstructor($_EmptyCompileStep).apply(this, arguments);
	  ;
	};
	var $_EmptyCompileStep = _EmptyCompileStep;
	$traceurRuntime.createClass(_EmptyCompileStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	  } }, {}, NS.CompileStep);
	Object.defineProperty(_EmptyCompileStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	var _ShimShadowDomStep = function _ShimShadowDomStep(cmpMetadata) {
	  assert.argumentTypes(cmpMetadata, DirectiveMetadata);
	  $traceurRuntime.superConstructor($_ShimShadowDomStep).call(this);
	  var id = _getComponentId(cmpMetadata.type);
	  this._contentAttribute = _getContentAttribute(id);
	};
	var $_ShimShadowDomStep = _ShimShadowDomStep;
	$traceurRuntime.createClass(_ShimShadowDomStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    $traceurRuntime.superGet(this, $_ShimShadowDomStep.prototype, "process").call(this, parent, current, control);
	    if (current.ignoreBindings) {
	      return;
	    }
	    DOM.setAttribute(current.element, this._contentAttribute, '');
	    var host = current.componentDirective;
	    if (isPresent(host)) {
	      var hostId = _getComponentId(host.type);
	      var hostAttribute = _getHostAttribute(hostId);
	      DOM.setAttribute(current.element, hostAttribute, '');
	    }
	  } }, {}, _BaseEmulatedShadowDomStep);
	Object.defineProperty(_ShimShadowDomStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	Object.defineProperty(_ShimShadowDomStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	var _EmulatedUnscopedCssStep = function _EmulatedUnscopedCssStep(cmpMetadata, templateUrl, styleUrlResolver, styleHost) {
	  assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string, styleUrlResolver, StyleUrlResolver, styleHost, assert.type.any);
	  $traceurRuntime.superConstructor($_EmulatedUnscopedCssStep).call(this);
	  this._templateUrl = templateUrl;
	  this._styleUrlResolver = styleUrlResolver;
	  this._styleHost = styleHost;
	};
	var $_EmulatedUnscopedCssStep = _EmulatedUnscopedCssStep;
	$traceurRuntime.createClass(_EmulatedUnscopedCssStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var styleEl = current.element;
	    var cssText = DOM.getText(styleEl);
	    cssText = this._styleUrlResolver.resolveUrls(cssText, this._templateUrl);
	    DOM.setText(styleEl, cssText);
	    DOM.remove(styleEl);
	    if (!MapWrapper.contains(_sharedStyleTexts, cssText)) {
	      MapWrapper.set(_sharedStyleTexts, cssText, true);
	      _insertStyleElement(this._styleHost, styleEl);
	    }
	  } }, {}, NS.CompileStep);
	Object.defineProperty(_EmulatedUnscopedCssStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string], [StyleUrlResolver], []];
	  } });
	Object.defineProperty(_EmulatedUnscopedCssStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	var _EmulatedScopedCssStep = function _EmulatedScopedCssStep(cmpMetadata, templateUrl, styleInliner, styleUrlResolver, styleHost) {
	  assert.argumentTypes(cmpMetadata, DirectiveMetadata, templateUrl, assert.type.string, styleInliner, StyleInliner, styleUrlResolver, StyleUrlResolver, styleHost, assert.type.any);
	  $traceurRuntime.superConstructor($_EmulatedScopedCssStep).call(this);
	  this._templateUrl = templateUrl;
	  this._component = cmpMetadata.type;
	  this._styleInliner = styleInliner;
	  this._styleUrlResolver = styleUrlResolver;
	  this._styleHost = styleHost;
	};
	var $_EmulatedScopedCssStep = _EmulatedScopedCssStep;
	$traceurRuntime.createClass(_EmulatedScopedCssStep, { process: function process(parent, current, control) {
	    var $__13 = this;
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var styleEl = current.element;
	    var cssText = DOM.getText(styleEl);
	    cssText = this._styleUrlResolver.resolveUrls(cssText, this._templateUrl);
	    var css = this._styleInliner.inlineImports(cssText, this._templateUrl);
	    if (PromiseWrapper.isPromise(css)) {
	      DOM.setText(styleEl, '');
	      ListWrapper.push(parent.inheritedProtoView.stylePromises, css);
	      return css.then(function (css) {
	        css = _shimCssForComponent(css, $__13._component);
	        DOM.setText(styleEl, css);
	      });
	    } else {
	      css = _shimCssForComponent(css, this._component);
	      DOM.setText(styleEl, css);
	    }
	    DOM.remove(styleEl);
	    _insertStyleElement(this._styleHost, styleEl);
	  } }, {}, NS.CompileStep);
	Object.defineProperty(_EmulatedScopedCssStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [assert.type.string], [StyleInliner], [StyleUrlResolver], []];
	  } });
	Object.defineProperty(_EmulatedScopedCssStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	var _NativeCssStep = function _NativeCssStep(templateUrl, styleUrlResover) {
	  assert.argumentTypes(templateUrl, assert.type.string, styleUrlResover, StyleUrlResolver);
	  $traceurRuntime.superConstructor($_NativeCssStep).call(this);
	  this._styleUrlResolver = styleUrlResover;
	  this._templateUrl = templateUrl;
	};
	var $_NativeCssStep = _NativeCssStep;
	$traceurRuntime.createClass(_NativeCssStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var styleEl = current.element;
	    var cssText = DOM.getText(styleEl);
	    cssText = this._styleUrlResolver.resolveUrls(cssText, this._templateUrl);
	    DOM.setText(styleEl, cssText);
	  } }, {}, NS.CompileStep);
	Object.defineProperty(_NativeCssStep, "parameters", { get: function get() {
	    return [[assert.type.string], [StyleUrlResolver]];
	  } });
	Object.defineProperty(_NativeCssStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	function _moveViewNodesIntoParent(parent, view) {
	  for (var i = 0; i < view.nodes.length; ++i) {
	    DOM.appendChild(parent, view.nodes[i]);
	  }
	}
	var _componentUIDs = assert.type(MapWrapper.create(), assert.genericType(Map, Type, int));
	var _nextComponentUID = assert.type(0, int);
	var _sharedStyleTexts = assert.type(MapWrapper.create(), assert.genericType(Map, assert.type.string, assert.type.boolean));
	var _lastInsertedStyleEl;
	function _getComponentId(component) {
	  assert.argumentTypes(component, Type);
	  var id = MapWrapper.get(_componentUIDs, component);
	  if (isBlank(id)) {
	    id = _nextComponentUID++;
	    MapWrapper.set(_componentUIDs, component, id);
	  }
	  return id;
	}
	Object.defineProperty(_getComponentId, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	function _insertStyleElement(host, styleEl) {
	  if (isBlank(_lastInsertedStyleEl)) {
	    var firstChild = DOM.firstChild(host);
	    if (isPresent(firstChild)) {
	      DOM.insertBefore(firstChild, styleEl);
	    } else {
	      DOM.appendChild(host, styleEl);
	    }
	  } else {
	    DOM.insertAfter(_lastInsertedStyleEl, styleEl);
	  }
	  _lastInsertedStyleEl = styleEl;
	}
	function _getHostAttribute(id) {
	  assert.argumentTypes(id, int);
	  return "_nghost-" + id;
	}
	Object.defineProperty(_getHostAttribute, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function _getContentAttribute(id) {
	  assert.argumentTypes(id, int);
	  return "_ngcontent-" + id;
	}
	Object.defineProperty(_getContentAttribute, "parameters", { get: function get() {
	    return [[int]];
	  } });
	function _shimCssForComponent(cssText, component) {
	  assert.argumentTypes(cssText, assert.type.string, component, Type);
	  var id = _getComponentId(component);
	  var shadowCss = new ShadowCss();
	  return assert.returnType(shadowCss.shimCssText(cssText, _getContentAttribute(id), _getHostAttribute(id)), assert.type.string);
	}
	Object.defineProperty(_shimCssForComponent, "parameters", { get: function get() {
	    return [[assert.type.string], [Type]];
	  } });
	function resetShadowDomCache() {
	  MapWrapper.clear(_componentUIDs);
	  _nextComponentUID = 0;
	  MapWrapper.clear(_sharedStyleTexts);
	  _lastInsertedStyleEl = null;
	}
	//# sourceMappingURL=shadow_dom_strategy.js.map

	//# sourceMappingURL=./shadow_dom_strategy.map

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ShadowCss: { get: function get() {
	      return ShadowCss;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    StringWrapper = $__3.StringWrapper,
	    RegExp = $__3.RegExp,
	    RegExpWrapper = $__3.RegExpWrapper,
	    RegExpMatcherWrapper = $__3.RegExpMatcherWrapper,
	    isPresent = $__3.isPresent,
	    isBlank = $__3.isBlank,
	    BaseException = $__3.BaseException,
	    int = $__3.int;
	var ShadowCss = function ShadowCss() {
	  this.strictStyling = true;
	};
	$traceurRuntime.createClass(ShadowCss, {
	  shimStyle: function shimStyle(style, selector) {
	    var hostSelector = arguments[2] !== void 0 ? arguments[2] : '';
	    assert.argumentTypes(style, assert.type.any, selector, assert.type.string, hostSelector, assert.type.string);
	    var cssText = DOM.getText(style);
	    return assert.returnType(this.shimCssText(cssText, selector, hostSelector), assert.type.string);
	  },
	  shimCssText: function shimCssText(cssText, selector) {
	    var hostSelector = arguments[2] !== void 0 ? arguments[2] : '';
	    assert.argumentTypes(cssText, assert.type.string, selector, assert.type.string, hostSelector, assert.type.string);
	    cssText = this._insertDirectives(cssText);
	    return assert.returnType(this._scopeCssText(cssText, selector, hostSelector), assert.type.string);
	  },
	  _insertDirectives: function _insertDirectives(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    cssText = this._insertPolyfillDirectivesInCssText(cssText);
	    return assert.returnType(this._insertPolyfillRulesInCssText(cssText), assert.type.string);
	  },
	  _insertPolyfillDirectivesInCssText: function _insertPolyfillDirectivesInCssText(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    return assert.returnType(StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) {
	      return m[1] + '{';
	    }), assert.type.string);
	  },
	  _insertPolyfillRulesInCssText: function _insertPolyfillRulesInCssText(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    return assert.returnType(StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	      var rule = m[0];
	      rule = StringWrapper.replace(rule, m[1], '');
	      rule = StringWrapper.replace(rule, m[2], '');
	      return m[3] + rule;
	    }), assert.type.string);
	  },
	  _scopeCssText: function _scopeCssText(cssText, scopeSelector, hostSelector) {
	    var $__4 = this;
	    assert.argumentTypes(cssText, assert.type.string, scopeSelector, assert.type.string, hostSelector, assert.type.string);
	    var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	    cssText = this._insertPolyfillHostInCssText(cssText);
	    cssText = this._convertColonHost(cssText);
	    cssText = this._convertColonHostContext(cssText);
	    cssText = this._convertShadowDOMSelectors(cssText);
	    if (isPresent(scopeSelector)) {
	      _withCssRules(cssText, function (rules) {
	        cssText = $__4._scopeRules(rules, scopeSelector, hostSelector);
	      });
	    }
	    cssText = cssText + '\n' + unscoped;
	    return assert.returnType(cssText.trim(), assert.type.string);
	  },
	  _extractUnscopedRulesFromCssText: function _extractUnscopedRulesFromCssText(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    var r = '',
	        m;
	    var matcher = RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	    while (isPresent(m = RegExpMatcherWrapper.next(matcher))) {
	      var rule = m[0];
	      rule = StringWrapper.replace(rule, m[2], '');
	      rule = StringWrapper.replace(rule, m[1], m[3]);
	      r = rule + '\n\n';
	    }
	    return assert.returnType(r, assert.type.string);
	  },
	  _convertColonHost: function _convertColonHost(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    return assert.returnType(this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer), assert.type.string);
	  },
	  _convertColonHostContext: function _convertColonHostContext(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    return assert.returnType(this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer), assert.type.string);
	  },
	  _convertColonRule: function _convertColonRule(cssText, regExp, partReplacer) {
	    assert.argumentTypes(cssText, assert.type.string, regExp, RegExp, partReplacer, Function);
	    return assert.returnType(StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	      if (isPresent(m[2])) {
	        var parts = m[2].split(','),
	            r = [];
	        for (var i = 0; i < parts.length; i++) {
	          var p = parts[i];
	          if (isBlank(p)) break;
	          p = p.trim();
	          ListWrapper.push(r, partReplacer(_polyfillHostNoCombinator, p, m[3]));
	        }
	        return r.join(',');
	      } else {
	        return _polyfillHostNoCombinator + m[3];
	      }
	    }), assert.type.string);
	  },
	  _colonHostContextPartReplacer: function _colonHostContextPartReplacer(host, part, suffix) {
	    assert.argumentTypes(host, assert.type.string, part, assert.type.string, suffix, assert.type.string);
	    if (StringWrapper.contains(part, _polyfillHost)) {
	      return assert.returnType(this._colonHostPartReplacer(host, part, suffix), assert.type.string);
	    } else {
	      return assert.returnType(host + part + suffix + ', ' + part + ' ' + host + suffix, assert.type.string);
	    }
	  },
	  _colonHostPartReplacer: function _colonHostPartReplacer(host, part, suffix) {
	    assert.argumentTypes(host, assert.type.string, part, assert.type.string, suffix, assert.type.string);
	    return assert.returnType(host + StringWrapper.replace(part, _polyfillHost, '') + suffix, assert.type.string);
	  },
	  _convertShadowDOMSelectors: function _convertShadowDOMSelectors(cssText) {
	    assert.argumentTypes(cssText, assert.type.string);
	    for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	      cssText = StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	    }
	    return assert.returnType(cssText, assert.type.string);
	  },
	  _scopeRules: function _scopeRules(cssRules, scopeSelector, hostSelector) {
	    assert.argumentTypes(cssRules, assert.type.any, scopeSelector, assert.type.string, hostSelector, assert.type.string);
	    var cssText = '';
	    if (isPresent(cssRules)) {
	      for (var i = 0; i < cssRules.length; i++) {
	        var rule = cssRules[i];
	        if (DOM.isStyleRule(rule) || DOM.isPageRule(rule)) {
	          cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) + ' {\n';
	          cssText += this._propertiesFromRule(rule) + '\n}\n\n';
	        } else if (DOM.isMediaRule(rule)) {
	          cssText += '@media ' + rule.media.mediaText + ' {\n';
	          cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
	          cssText += '\n}\n\n';
	        } else {
	          try {
	            if (isPresent(rule.cssText)) {
	              cssText += rule.cssText + '\n\n';
	            }
	          } catch (x) {
	            if (DOM.isKeyframesRule(rule) && isPresent(rule.cssRules)) {
	              cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
	            }
	          }
	        }
	      }
	    }
	    return assert.returnType(cssText, assert.type.string);
	  },
	  _ieSafeCssTextFromKeyFrameRule: function _ieSafeCssTextFromKeyFrameRule(rule) {
	    var cssText = '@keyframes ' + rule.name + ' {';
	    for (var i = 0; i < rule.cssRules.length; i++) {
	      var r = rule.cssRules[i];
	      cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
	    }
	    cssText += ' }';
	    return assert.returnType(cssText, assert.type.string);
	  },
	  _scopeSelector: function _scopeSelector(selector, scopeSelector, hostSelector, strict) {
	    assert.argumentTypes(selector, assert.type.string, scopeSelector, assert.type.string, hostSelector, assert.type.string, strict, assert.type.boolean);
	    var r = [],
	        parts = selector.split(',');
	    for (var i = 0; i < parts.length; i++) {
	      var p = parts[i];
	      p = p.trim();
	      if (this._selectorNeedsScoping(p, scopeSelector)) {
	        p = strict && !StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
	      }
	      ListWrapper.push(r, p);
	    }
	    return assert.returnType(r.join(', '), assert.type.string);
	  },
	  _selectorNeedsScoping: function _selectorNeedsScoping(selector, scopeSelector) {
	    assert.argumentTypes(selector, assert.type.string, scopeSelector, assert.type.string);
	    var re = this._makeScopeMatcher(scopeSelector);
	    return assert.returnType(!isPresent(RegExpWrapper.firstMatch(re, selector)), assert.type.boolean);
	  },
	  _makeScopeMatcher: function _makeScopeMatcher(scopeSelector) {
	    assert.argumentTypes(scopeSelector, assert.type.string);
	    var lre = RegExpWrapper.create('\\[');
	    var rre = RegExpWrapper.create('\\]');
	    scopeSelector = StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	    scopeSelector = StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	    return assert.returnType(RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm'), RegExp);
	  },
	  _applySelectorScope: function _applySelectorScope(selector, scopeSelector, hostSelector) {
	    assert.argumentTypes(selector, assert.type.string, scopeSelector, assert.type.string, hostSelector, assert.type.string);
	    return assert.returnType(this._applySimpleSelectorScope(selector, scopeSelector, hostSelector), assert.type.string);
	  },
	  _applySimpleSelectorScope: function _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
	    assert.argumentTypes(selector, assert.type.string, scopeSelector, assert.type.string, hostSelector, assert.type.string);
	    if (isPresent(RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	      var replaceBy = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	      selector = StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	      return assert.returnType(StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' '), assert.type.string);
	    } else {
	      return assert.returnType(scopeSelector + ' ' + selector, assert.type.string);
	    }
	  },
	  _applyStrictSelectorScope: function _applyStrictSelectorScope(selector, scopeSelector) {
	    var isRe = RegExpWrapper.create('\\[is=([^\\]]*)\\]');
	    scopeSelector = StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) {
	      return m[1];
	    });
	    var splits = [' ', '>', '+', '~'],
	        scoped = selector,
	        attrName = '[' + scopeSelector + ']';
	    for (var i = 0; i < splits.length; i++) {
	      var sep = splits[i];
	      var parts = scoped.split(sep);
	      scoped = ListWrapper.map(parts, function (p) {
	        var t = StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	        if (t.length > 0 && !ListWrapper.contains(splits, t) && !StringWrapper.contains(t, attrName)) {
	          var re = RegExpWrapper.create('([^:]*)(:*)(.*)');
	          var m = RegExpWrapper.firstMatch(re, t);
	          if (isPresent(m)) {
	            p = m[1] + attrName + m[2] + m[3];
	          }
	        }
	        return p;
	      }).join(sep);
	    }
	    return assert.returnType(scoped, assert.type.string);
	  },
	  _insertPolyfillHostInCssText: function _insertPolyfillHostInCssText(selector) {
	    assert.argumentTypes(selector, assert.type.string);
	    selector = StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	    selector = StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	    return assert.returnType(selector, assert.type.string);
	  },
	  _propertiesFromRule: function _propertiesFromRule(rule) {
	    var cssText = rule.style.cssText;
	    var attrRe = RegExpWrapper.create('[\'"]+|attr');
	    if (rule.style.content.length > 0 && !isPresent(RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
	      var contentRe = RegExpWrapper.create('content:[^;]*;');
	      cssText = StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
	    }
	    return assert.returnType(cssText, assert.type.string);
	  }
	}, {});
	Object.defineProperty(ShadowCss.prototype.shimStyle, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype.shimCssText, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertDirectives, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillDirectivesInCssText, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillRulesInCssText, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeCssText, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._extractUnscopedRulesFromCssText, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonHost, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonHostContext, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonRule, "parameters", { get: function get() {
	    return [[assert.type.string], [RegExp], [Function]];
	  } });
	Object.defineProperty(ShadowCss.prototype._colonHostContextPartReplacer, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._colonHostPartReplacer, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertShadowDOMSelectors, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeRules, "parameters", { get: function get() {
	    return [[], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeSelector, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.boolean]];
	  } });
	Object.defineProperty(ShadowCss.prototype._selectorNeedsScoping, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._makeScopeMatcher, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applySelectorScope, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applySimpleSelectorScope, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applyStrictSelectorScope, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillHostInCssText, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var _cssContentNextSelectorRe = RegExpWrapper.create('polyfill-next-selector[^}]*content:[\\s]*?[\'"](.*?)[\'"][;\\s]*}([^{]*?){', 'im');
	var _cssContentRuleRe = RegExpWrapper.create('(polyfill-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _cssContentUnscopedRuleRe = RegExpWrapper.create('(polyfill-unscoped-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _polyfillHost = '-shadowcsshost';
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
	var _cssColonHostRe = RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [RegExpWrapper.create('>>>'), RegExpWrapper.create('::shadow'), RegExpWrapper.create('::content'), RegExpWrapper.create('/deep/'), RegExpWrapper.create('/shadow-deep/'), RegExpWrapper.create('/shadow/')];
	var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = RegExpWrapper.create(':host', 'im');
	var _colonHostContextRe = RegExpWrapper.create(':host-context', 'im');
	function _cssToRules(cssText) {
	  assert.argumentTypes(cssText, assert.type.string);
	  return DOM.cssToRules(cssText);
	}
	Object.defineProperty(_cssToRules, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function _withCssRules(cssText, callback) {
	  assert.argumentTypes(cssText, assert.type.string, callback, Function);
	  if (isBlank(callback)) return;
	  var rules = _cssToRules(cssText);
	  callback(rules);
	}
	Object.defineProperty(_withCssRules, "parameters", { get: function get() {
	    return [[assert.type.string], [Function]];
	  } });
	//# sourceMappingURL=shadow_css.js.map

	//# sourceMappingURL=./shadow_css.map

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  StyleInliner: { get: function get() {
	      return StyleInliner;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__, $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__, $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_async__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var XHR = ($__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ = __webpack_require__(67), $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__.__esModule && $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ || { "default": $__angular2_47_src_47_core_47_compiler_47_xhr_47_xhr__ }).XHR;
	var StyleUrlResolver = ($__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ = __webpack_require__(68), $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ && $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__.__esModule && $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ || { "default": $__angular2_47_src_47_core_47_compiler_47_style_95_url_95_resolver__ }).StyleUrlResolver;
	var UrlResolver = ($__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ = __webpack_require__(69), $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ && $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__.__esModule && $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ || { "default": $__angular2_47_src_47_core_47_compiler_47_url_95_resolver__ }).UrlResolver;
	var ListWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).ListWrapper;
	var $__6 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__6.isBlank,
	    isPresent = $__6.isPresent,
	    RegExp = $__6.RegExp,
	    RegExpWrapper = $__6.RegExpWrapper,
	    StringWrapper = $__6.StringWrapper,
	    normalizeBlank = $__6.normalizeBlank;
	var $__7 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Promise = $__7.Promise,
	    PromiseWrapper = $__7.PromiseWrapper;
	var StyleInliner = function StyleInliner(xhr, styleUrlResolver, urlResolver) {
	  assert.argumentTypes(xhr, XHR, styleUrlResolver, StyleUrlResolver, urlResolver, UrlResolver);
	  this._xhr = xhr;
	  this._urlResolver = urlResolver;
	  this._styleUrlResolver = styleUrlResolver;
	};
	$traceurRuntime.createClass(StyleInliner, {
	  inlineImports: function inlineImports(cssText, baseUrl) {
	    assert.argumentTypes(cssText, assert.type.string, baseUrl, assert.type.string);
	    return this._inlineImports(cssText, baseUrl, []);
	  },
	  _inlineImports: function _inlineImports(cssText, baseUrl, inlinedUrls) {
	    var $__8 = this;
	    var partIndex = 0;
	    var parts = StringWrapper.split(cssText, _importRe);
	    if (parts.length === 1) {
	      return cssText;
	    }
	    var promises = [];
	    while (partIndex < parts.length - 1) {
	      var prefix = parts[partIndex];
	      var rule = parts[partIndex + 1];
	      var url = _extractUrl(rule);
	      if (isPresent(url)) {
	        url = this._urlResolver.resolve(baseUrl, url);
	      }
	      var mediaQuery = _extractMediaQuery(rule);
	      var promise = void 0;
	      if (isBlank(url)) {
	        promise = PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
	      } else if (ListWrapper.contains(inlinedUrls, url)) {
	        promise = PromiseWrapper.resolve(prefix);
	      } else {
	        ListWrapper.push(inlinedUrls, url);
	        promise = PromiseWrapper.then(this._xhr.get(url), function (css) {
	          css = $__8._inlineImports(css, url, inlinedUrls);
	          if (PromiseWrapper.isPromise(css)) {
	            return css.then(function (css) {
	              return prefix + $__8._transformImportedCss(css, mediaQuery, url) + '\n';
	            });
	          } else {
	            return prefix + $__8._transformImportedCss(css, mediaQuery, url) + '\n';
	          }
	        }, function (error) {
	          return "/* failed to import " + url + " */\n";
	        });
	      }
	      ListWrapper.push(promises, promise);
	      partIndex += 2;
	    }
	    return PromiseWrapper.all(promises).then(function (cssParts) {
	      var cssText = cssParts.join('');
	      if (partIndex < parts.length) {
	        cssText += parts[partIndex];
	      }
	      return cssText;
	    });
	  },
	  _transformImportedCss: function _transformImportedCss(css, mediaQuery, url) {
	    assert.argumentTypes(css, assert.type.string, mediaQuery, assert.type.string, url, assert.type.string);
	    css = this._styleUrlResolver.resolveUrls(css, url);
	    return assert.returnType(_wrapInMediaRule(css, mediaQuery), assert.type.string);
	  }
	}, {});
	Object.defineProperty(StyleInliner, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(StyleInliner, "parameters", { get: function get() {
	    return [[XHR], [StyleUrlResolver], [UrlResolver]];
	  } });
	Object.defineProperty(StyleInliner.prototype.inlineImports, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(StyleInliner.prototype._inlineImports, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.genericType(List, assert.type.string)]];
	  } });
	Object.defineProperty(StyleInliner.prototype._transformImportedCss, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string], [assert.type.string]];
	  } });
	function _extractUrl(importRule) {
	  assert.argumentTypes(importRule, assert.type.string);
	  var match = RegExpWrapper.firstMatch(_urlRe, importRule);
	  if (isBlank(match)) return assert.returnType(null, assert.type.string);
	  return assert.returnType(isPresent(match[1]) ? match[1] : match[2], assert.type.string);
	}
	Object.defineProperty(_extractUrl, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function _extractMediaQuery(importRule) {
	  assert.argumentTypes(importRule, assert.type.string);
	  var match = RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
	  if (isBlank(match)) return assert.returnType(null, assert.type.string);
	  var mediaQuery = match[1].trim();
	  return assert.returnType(mediaQuery.length > 0 ? mediaQuery : null, assert.type.string);
	}
	Object.defineProperty(_extractMediaQuery, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function _wrapInMediaRule(css, query) {
	  assert.argumentTypes(css, assert.type.string, query, assert.type.string);
	  return assert.returnType(isBlank(query) ? css : "@media " + query + " {\n" + css + "\n}", assert.type.string);
	}
	Object.defineProperty(_wrapInMediaRule, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	var _importRe = RegExpWrapper.create('@import\\s+([^;]+);');
	var _urlRe = RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' + '[\'"]([^\'")]+)[\'"]');
	var _mediaQueryRe = RegExpWrapper.create('[\'"][^\'"]+[\'"]\\s*\\)?\\s*(.*)');
	//# sourceMappingURL=style_inliner.js.map

	//# sourceMappingURL=./style_inliner.map

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  XHR: { get: function get() {
	      return XHR;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_async__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Promise = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }).Promise;
	var XHR = function XHR() {
	  ;
	};
	$traceurRuntime.createClass(XHR, { get: function get(url) {
	    assert.argumentTypes(url, assert.type.string);
	    return assert.returnType(null, assert.genericType(Promise, assert.type.string));
	  } }, {});
	Object.defineProperty(XHR.prototype.get, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=xhr.js.map

	//# sourceMappingURL=./xhr.map

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  StyleUrlResolver: { get: function get() {
	      return StyleUrlResolver;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__url_95_resolver__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    RegExp = $__2.RegExp,
	    RegExpWrapper = $__2.RegExpWrapper,
	    StringWrapper = $__2.StringWrapper;
	var UrlResolver = ($__url_95_resolver__ = __webpack_require__(69), $__url_95_resolver__ && $__url_95_resolver__.__esModule && $__url_95_resolver__ || { "default": $__url_95_resolver__ }).UrlResolver;
	var StyleUrlResolver = function StyleUrlResolver(resolver) {
	  assert.argumentTypes(resolver, UrlResolver);
	  this._resolver = resolver;
	};
	$traceurRuntime.createClass(StyleUrlResolver, {
	  resolveUrls: function resolveUrls(cssText, baseUrl) {
	    assert.argumentTypes(cssText, assert.type.string, baseUrl, assert.type.string);
	    cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
	    cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
	    return cssText;
	  },
	  _replaceUrls: function _replaceUrls(cssText, re, baseUrl) {
	    var $__4 = this;
	    assert.argumentTypes(cssText, assert.type.string, re, RegExp, baseUrl, assert.type.string);
	    return StringWrapper.replaceAllMapped(cssText, re, function (m) {
	      var pre = m[1];
	      var url = StringWrapper.replaceAll(m[2], _quoteRe, '');
	      var post = m[3];
	      var resolvedUrl = $__4._resolver.resolve(baseUrl, url);
	      return pre + "'" + resolvedUrl + "'" + post;
	    });
	  }
	}, {});
	Object.defineProperty(StyleUrlResolver, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(StyleUrlResolver, "parameters", { get: function get() {
	    return [[UrlResolver]];
	  } });
	Object.defineProperty(StyleUrlResolver.prototype.resolveUrls, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(StyleUrlResolver.prototype._replaceUrls, "parameters", { get: function get() {
	    return [[assert.type.string], [RegExp], [assert.type.string]];
	  } });
	var _cssUrlRe = RegExpWrapper.create('(url\\()([^)]*)(\\))');
	var _cssImportRe = RegExpWrapper.create('(@import[\\s]+(?!url\\())[\'"]([^\'"]*)[\'"](.*;)');
	var _quoteRe = RegExpWrapper.create('[\'"]');
	//# sourceMappingURL=style_url_resolver.js.map

	//# sourceMappingURL=./style_url_resolver.map

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  UrlResolver: { get: function get() {
	      return UrlResolver;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_dom_47_dom_95_adapter__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__2.isPresent,
	    isBlank = $__2.isBlank,
	    RegExpWrapper = $__2.RegExpWrapper,
	    BaseException = $__2.BaseException;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var UrlResolver = function UrlResolver() {
	  if (isBlank($UrlResolver.a)) {
	    $UrlResolver.a = DOM.createElement('a');
	  }
	};
	var $UrlResolver = UrlResolver;
	$traceurRuntime.createClass(UrlResolver, { resolve: function resolve(baseUrl, url) {
	    assert.argumentTypes(baseUrl, assert.type.string, url, assert.type.string);
	    if (isBlank(baseUrl)) {
	      DOM.resolveAndSetHref($UrlResolver.a, url, null);
	      return assert.returnType(DOM.getHref($UrlResolver.a), assert.type.string);
	    }
	    if (isBlank(url) || url == '') return assert.returnType(baseUrl, assert.type.string);
	    if (url[0] == '/') {
	      throw new BaseException("Could not resolve the url " + url + " from " + baseUrl);
	    }
	    var m = RegExpWrapper.firstMatch(_schemeRe, url);
	    if (isPresent(m[1])) {
	      return assert.returnType(url, assert.type.string);
	    }
	    DOM.resolveAndSetHref($UrlResolver.a, baseUrl, url);
	    return assert.returnType(DOM.getHref($UrlResolver.a), assert.type.string);
	  } }, {});
	Object.defineProperty(UrlResolver, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(UrlResolver.prototype.resolve, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	var _schemeRe = RegExpWrapper.create('^([^:/?#]+:)?');
	//# sourceMappingURL=url_resolver.js.map

	//# sourceMappingURL=./url_resolver.map

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CompileStep: { get: function get() {
	      return CompileStep;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__compile_95_element__, $__compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var ccModule = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ });
	var CompileStep = function CompileStep() {
	  ;
	};
	$traceurRuntime.createClass(CompileStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, ccModule.CompileControl);
	  } }, {});
	Object.defineProperty(CompileStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [ccModule.CompileControl]];
	  } });
	//# sourceMappingURL=compile_step.js.map

	//# sourceMappingURL=./compile_step.map

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CompileElement: { get: function get() {
	      return CompileElement;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_lang__, $___46__46__47_directive_95_metadata__, $___46__46__47__46__46__47_annotations_47_annotations__, $___46__46__47_element_95_binder__, $___46__46__47_element_95_injector__, $___46__46__47_view__, $___46__46__47_string_95_utils__, $__angular2_47_change_95_detection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__1.List,
	    Map = $__1.Map,
	    ListWrapper = $__1.ListWrapper,
	    MapWrapper = $__1.MapWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__3.int,
	    isBlank = $__3.isBlank,
	    isPresent = $__3.isPresent,
	    Type = $__3.Type,
	    StringJoiner = $__3.StringJoiner,
	    assertionsEnabled = $__3.assertionsEnabled;
	var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = __webpack_require__(52), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || { "default": $___46__46__47_directive_95_metadata__ }).DirectiveMetadata;
	var $__5 = ($___46__46__47__46__46__47_annotations_47_annotations__ = __webpack_require__(51), $___46__46__47__46__46__47_annotations_47_annotations__ && $___46__46__47__46__46__47_annotations_47_annotations__.__esModule && $___46__46__47__46__46__47_annotations_47_annotations__ || { "default": $___46__46__47__46__46__47_annotations_47_annotations__ }),
	    Decorator = $__5.Decorator,
	    Component = $__5.Component,
	    Viewport = $__5.Viewport,
	    DynamicComponent = $__5.DynamicComponent;
	var ElementBinder = ($___46__46__47_element_95_binder__ = __webpack_require__(72), $___46__46__47_element_95_binder__ && $___46__46__47_element_95_binder__.__esModule && $___46__46__47_element_95_binder__ || { "default": $___46__46__47_element_95_binder__ }).ElementBinder;
	var ProtoElementInjector = ($___46__46__47_element_95_injector__ = __webpack_require__(54), $___46__46__47_element_95_injector__ && $___46__46__47_element_95_injector__.__esModule && $___46__46__47_element_95_injector__ || { "default": $___46__46__47_element_95_injector__ }).ProtoElementInjector;
	var viewModule = ($___46__46__47_view__ = __webpack_require__(53), $___46__46__47_view__ && $___46__46__47_view__.__esModule && $___46__46__47_view__ || { "default": $___46__46__47_view__ });
	var dashCaseToCamelCase = ($___46__46__47_string_95_utils__ = __webpack_require__(73), $___46__46__47_string_95_utils__ && $___46__46__47_string_95_utils__.__esModule && $___46__46__47_string_95_utils__ || { "default": $___46__46__47_string_95_utils__ }).dashCaseToCamelCase;
	var AST = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).AST;
	var CompileElement = function CompileElement(element) {
	  var compilationUnit = arguments[1] !== void 0 ? arguments[1] : '';
	  this.element = element;
	  this._attrs = null;
	  this._classList = null;
	  this.textNodeBindings = null;
	  this.propertyBindings = null;
	  this.eventBindings = null;
	  this.variableBindings = null;
	  this.decoratorDirectives = null;
	  this.viewportDirective = null;
	  this.componentDirective = null;
	  this.hasNestedView = false;
	  this._allDirectives = null;
	  this.isViewRoot = false;
	  this.hasBindings = false;
	  this.inheritedProtoView = null;
	  this.inheritedProtoElementInjector = null;
	  this.inheritedElementBinder = null;
	  this.distanceToParentInjector = 0;
	  this.distanceToParentBinder = 0;
	  this.compileChildren = true;
	  this.ignoreBindings = false;
	  this.contentTagSelector = null;
	  var tplDesc = assertionsEnabled() ? getElementDescription(element) : null;
	  if (compilationUnit !== '') {
	    this.elementDescription = compilationUnit;
	    if (isPresent(tplDesc)) this.elementDescription += ": " + tplDesc;
	  } else {
	    this.elementDescription = tplDesc;
	  }
	};
	$traceurRuntime.createClass(CompileElement, {
	  refreshAttrs: function refreshAttrs() {
	    this._attrs = null;
	  },
	  attrs: function attrs() {
	    if (isBlank(this._attrs)) {
	      this._attrs = DOM.attributeMap(this.element);
	    }
	    return assert.returnType(this._attrs, assert.genericType(Map, assert.type.string, assert.type.string));
	  },
	  refreshClassList: function refreshClassList() {
	    this._classList = null;
	  },
	  classList: function classList() {
	    if (isBlank(this._classList)) {
	      this._classList = ListWrapper.create();
	      var elClassList = DOM.classList(this.element);
	      for (var i = 0; i < elClassList.length; i++) {
	        ListWrapper.push(this._classList, elClassList[i]);
	      }
	    }
	    return assert.returnType(this._classList, assert.genericType(List, assert.type.string));
	  },
	  addTextNodeBinding: function addTextNodeBinding(indexInParent, expression) {
	    assert.argumentTypes(indexInParent, int, expression, AST);
	    if (isBlank(this.textNodeBindings)) {
	      this.textNodeBindings = MapWrapper.create();
	    }
	    MapWrapper.set(this.textNodeBindings, indexInParent, expression);
	  },
	  addPropertyBinding: function addPropertyBinding(property, expression) {
	    assert.argumentTypes(property, assert.type.string, expression, AST);
	    if (isBlank(this.propertyBindings)) {
	      this.propertyBindings = MapWrapper.create();
	    }
	    MapWrapper.set(this.propertyBindings, dashCaseToCamelCase(property), expression);
	  },
	  addVariableBinding: function addVariableBinding(variableName, variableValue) {
	    assert.argumentTypes(variableName, assert.type.string, variableValue, assert.type.string);
	    if (isBlank(this.variableBindings)) {
	      this.variableBindings = MapWrapper.create();
	    }
	    MapWrapper.set(this.variableBindings, variableValue, dashCaseToCamelCase(variableName));
	  },
	  addEventBinding: function addEventBinding(eventName, expression) {
	    assert.argumentTypes(eventName, assert.type.string, expression, AST);
	    if (isBlank(this.eventBindings)) {
	      this.eventBindings = MapWrapper.create();
	    }
	    MapWrapper.set(this.eventBindings, eventName, expression);
	  },
	  addAttribute: function addAttribute(attributeName, attributeValue) {
	    assert.argumentTypes(attributeName, assert.type.string, attributeValue, assert.type.string);
	    if (isBlank(this.attributes)) {
	      this.attributes = MapWrapper.create();
	    }
	    MapWrapper.set(this.attributes, attributeName, attributeValue);
	  },
	  addDirective: function addDirective(directive) {
	    assert.argumentTypes(directive, DirectiveMetadata);
	    var annotation = directive.annotation;
	    this._allDirectives = null;
	    if (annotation instanceof Decorator) {
	      if (isBlank(this.decoratorDirectives)) {
	        this.decoratorDirectives = ListWrapper.create();
	      }
	      ListWrapper.push(this.decoratorDirectives, directive);
	      if (!annotation.compileChildren) {
	        this.compileChildren = false;
	      }
	    } else if (annotation instanceof Viewport) {
	      this.viewportDirective = directive;
	    } else if (annotation instanceof Component) {
	      this.componentDirective = directive;
	      this.hasNestedView = true;
	    } else if (annotation instanceof DynamicComponent) {
	      this.componentDirective = directive;
	    }
	  },
	  getAllDirectives: function getAllDirectives() {
	    if (this._allDirectives === null) {
	      var directives = ListWrapper.create();
	      if (isPresent(this.componentDirective)) {
	        ListWrapper.push(directives, this.componentDirective);
	      }
	      if (isPresent(this.viewportDirective)) {
	        ListWrapper.push(directives, this.viewportDirective);
	      }
	      if (isPresent(this.decoratorDirectives)) {
	        directives = ListWrapper.concat(directives, this.decoratorDirectives);
	      }
	      this._allDirectives = directives;
	    }
	    return assert.returnType(this._allDirectives, assert.genericType(List, DirectiveMetadata));
	  }
	}, {});
	Object.defineProperty(CompileElement.prototype.addTextNodeBinding, "parameters", { get: function get() {
	    return [[int], [AST]];
	  } });
	Object.defineProperty(CompileElement.prototype.addPropertyBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [AST]];
	  } });
	Object.defineProperty(CompileElement.prototype.addVariableBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(CompileElement.prototype.addEventBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [AST]];
	  } });
	Object.defineProperty(CompileElement.prototype.addAttribute, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(CompileElement.prototype.addDirective, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	function getElementDescription(domElement) {
	  var buf = new StringJoiner();
	  var atts = DOM.attributeMap(domElement);
	  buf.add("<");
	  buf.add(DOM.tagName(domElement).toLowerCase());
	  addDescriptionAttribute(buf, "id", MapWrapper.get(atts, "id"));
	  addDescriptionAttribute(buf, "class", MapWrapper.get(atts, "class"));
	  MapWrapper.forEach(atts, function (attValue, attName) {
	    if (attName !== "id" && attName !== "class") {
	      addDescriptionAttribute(buf, attName, attValue);
	    }
	  });
	  buf.add(">");
	  return assert.returnType(buf.toString(), assert.type.string);
	}
	function addDescriptionAttribute(buffer, attName, attValue) {
	  assert.argumentTypes(buffer, StringJoiner, attName, assert.type.string, attValue, assert.type.any);
	  if (isPresent(attValue)) {
	    if (attValue.length === 0) {
	      buffer.add(' ' + attName);
	    } else {
	      buffer.add(' ' + attName + '="' + attValue + '"');
	    }
	  }
	}
	Object.defineProperty(addDescriptionAttribute, "parameters", { get: function get() {
	    return [[StringJoiner], [assert.type.string], []];
	  } });
	//# sourceMappingURL=compile_element.js.map

	//# sourceMappingURL=./compile_element.map

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ElementBinder: { get: function get() {
	      return ElementBinder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__element_95_injector__, $__directive_95_metadata__, $__angular2_47_src_47_facade_47_collection__, $__view__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__1.int,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException;
	var eiModule = ($__element_95_injector__ = __webpack_require__(54), $__element_95_injector__ && $__element_95_injector__.__esModule && $__element_95_injector__ || { "default": $__element_95_injector__ });
	var DirectiveMetadata = ($__directive_95_metadata__ = __webpack_require__(52), $__directive_95_metadata__ && $__directive_95_metadata__.__esModule && $__directive_95_metadata__ || { "default": $__directive_95_metadata__ }).DirectiveMetadata;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__3.List,
	    StringMap = $__3.StringMap;
	var viewModule = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ });
	var ElementBinder = function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective, viewportDirective) {
	  assert.argumentTypes(index, int, parent, $ElementBinder, distanceToParent, int, protoElementInjector, eiModule.ProtoElementInjector, componentDirective, DirectiveMetadata, viewportDirective, DirectiveMetadata);
	  if (isBlank(index)) {
	    throw new BaseException('null index not allowed.');
	  }
	  this.protoElementInjector = protoElementInjector;
	  this.componentDirective = componentDirective;
	  this.viewportDirective = viewportDirective;
	  this.parent = parent;
	  this.index = index;
	  this.distanceToParent = distanceToParent;
	  this.events = null;
	  this.textNodeIndices = null;
	  this.hasElementPropertyBindings = false;
	  this.nestedProtoView = null;
	  this.contentTagSelector = null;
	};
	var $ElementBinder = ElementBinder;
	$traceurRuntime.createClass(ElementBinder, {}, {});
	Object.defineProperty(ElementBinder, "parameters", { get: function get() {
	    return [[int], [ElementBinder], [int], [eiModule.ProtoElementInjector], [DirectiveMetadata], [DirectiveMetadata]];
	  } });
	//# sourceMappingURL=element_binder.js.map

	//# sourceMappingURL=./element_binder.map

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  dashCaseToCamelCase: { get: function get() {
	      return dashCaseToCamelCase;
	    } },
	  camelCaseToDashCase: { get: function get() {
	      return camelCaseToDashCase;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    StringWrapper = $__1.StringWrapper,
	    RegExpWrapper = $__1.RegExpWrapper;
	var DASH_CASE_REGEXP = RegExpWrapper.create('-([a-z])');
	var CAMEL_CASE_REGEXP = RegExpWrapper.create('([A-Z])');
	function dashCaseToCamelCase(input) {
	  assert.argumentTypes(input, assert.type.string);
	  return assert.returnType(StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) {
	    return m[1].toUpperCase();
	  }), assert.type.string);
	}
	Object.defineProperty(dashCaseToCamelCase, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	function camelCaseToDashCase(input) {
	  assert.argumentTypes(input, assert.type.string);
	  return assert.returnType(StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) {
	    return '-' + m[1].toLowerCase();
	  }), assert.type.string);
	}
	Object.defineProperty(camelCaseToDashCase, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=string_utils.js.map

	//# sourceMappingURL=./string_utils.map

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CompileControl: { get: function get() {
	      return CompileControl;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__compile_95_element__, $__compile_95_step__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isBlank = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isBlank;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileControl = function CompileControl(steps) {
	  this._steps = steps;
	  this._currentStepIndex = 0;
	  this._parent = null;
	  this._results = null;
	  this._additionalChildren = null;
	};
	$traceurRuntime.createClass(CompileControl, {
	  internalProcess: function internalProcess(results, startStepIndex, parent, current) {
	    assert.argumentTypes(results, assert.type.any, startStepIndex, assert.type.any, parent, CompileElement, current, CompileElement);
	    this._results = results;
	    var previousStepIndex = this._currentStepIndex;
	    var previousParent = this._parent;
	    for (var i = startStepIndex; i < this._steps.length; i++) {
	      var step = this._steps[i];
	      this._parent = parent;
	      this._currentStepIndex = i;
	      step.process(parent, current, this);
	      parent = this._parent;
	    }
	    ListWrapper.push(results, current);
	    this._currentStepIndex = previousStepIndex;
	    this._parent = previousParent;
	    var localAdditionalChildren = this._additionalChildren;
	    this._additionalChildren = null;
	    return localAdditionalChildren;
	  },
	  addParent: function addParent(newElement) {
	    assert.argumentTypes(newElement, CompileElement);
	    this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
	    this._parent = newElement;
	  },
	  addChild: function addChild(element) {
	    assert.argumentTypes(element, CompileElement);
	    if (isBlank(this._additionalChildren)) {
	      this._additionalChildren = ListWrapper.create();
	    }
	    ListWrapper.push(this._additionalChildren, element);
	  }
	}, {});
	Object.defineProperty(CompileControl.prototype.internalProcess, "parameters", { get: function get() {
	    return [[], [], [CompileElement], [CompileElement]];
	  } });
	Object.defineProperty(CompileControl.prototype.addParent, "parameters", { get: function get() {
	    return [[CompileElement]];
	  } });
	Object.defineProperty(CompileControl.prototype.addChild, "parameters", { get: function get() {
	    return [[CompileElement]];
	  } });
	//# sourceMappingURL=compile_control.js.map

	//# sourceMappingURL=./compile_control.map

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  setterFactory: { get: function get() {
	      return setterFactory;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__string_95_utils__, $__angular2_47_src_47_reflection_47_reflection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    StringWrapper = $__1.StringWrapper,
	    RegExpWrapper = $__1.RegExpWrapper,
	    BaseException = $__1.BaseException,
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    isString = $__1.isString,
	    stringify = $__1.stringify;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__4 = ($__string_95_utils__ = __webpack_require__(73), $__string_95_utils__ && $__string_95_utils__.__esModule && $__string_95_utils__ || { "default": $__string_95_utils__ }),
	    camelCaseToDashCase = $__4.camelCaseToDashCase,
	    dashCaseToCamelCase = $__4.dashCaseToCamelCase;
	var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }).reflector;
	var STYLE_SEPARATOR = '.';
	var propertySettersCache = StringMapWrapper.create();
	var innerHTMLSetterCache;
	function setterFactory(property) {
	  var setterFn, styleParts, styleSuffix;
	  if (StringWrapper.startsWith(property, ATTRIBUTE_PREFIX)) {
	    setterFn = attributeSetterFactory(StringWrapper.substring(property, ATTRIBUTE_PREFIX.length));
	  } else if (StringWrapper.startsWith(property, CLASS_PREFIX)) {
	    setterFn = classSetterFactory(StringWrapper.substring(property, CLASS_PREFIX.length));
	  } else if (StringWrapper.startsWith(property, STYLE_PREFIX)) {
	    styleParts = property.split(STYLE_SEPARATOR);
	    styleSuffix = styleParts.length > 2 ? ListWrapper.get(styleParts, 2) : '';
	    setterFn = styleSetterFactory(ListWrapper.get(styleParts, 1), styleSuffix);
	  } else if (StringWrapper.equals(property, 'innerHtml')) {
	    if (isBlank(innerHTMLSetterCache)) {
	      innerHTMLSetterCache = function (el, value) {
	        return DOM.setInnerHTML(el, value);
	      };
	    }
	    setterFn = innerHTMLSetterCache;
	  } else {
	    property = resolvePropertyName(property);
	    setterFn = StringMapWrapper.get(propertySettersCache, property);
	    if (isBlank(setterFn)) {
	      var propertySetterFn = reflector.setter(property);
	      setterFn = function (receiver, value) {
	        if (DOM.hasProperty(receiver, property)) {
	          return propertySetterFn(receiver, value);
	        }
	      };
	      StringMapWrapper.set(propertySettersCache, property, setterFn);
	    }
	  }
	  return assert.returnType(setterFn, Function);
	}
	Object.defineProperty(setterFactory, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var ATTRIBUTE_PREFIX = 'attr.';
	var attributeSettersCache = StringMapWrapper.create();
	function _isValidAttributeValue(attrName, value) {
	  assert.argumentTypes(attrName, assert.type.string, value, assert.type.any);
	  if (attrName == "role") {
	    return assert.returnType(isString(value), assert.type.boolean);
	  } else {
	    return assert.returnType(isPresent(value), assert.type.boolean);
	  }
	}
	Object.defineProperty(_isValidAttributeValue, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.any]];
	  } });
	function attributeSetterFactory(attrName) {
	  assert.argumentTypes(attrName, assert.type.string);
	  var setterFn = StringMapWrapper.get(attributeSettersCache, attrName);
	  var dashCasedAttributeName;
	  if (isBlank(setterFn)) {
	    dashCasedAttributeName = camelCaseToDashCase(attrName);
	    setterFn = function (element, value) {
	      if (_isValidAttributeValue(dashCasedAttributeName, value)) {
	        DOM.setAttribute(element, dashCasedAttributeName, stringify(value));
	      } else {
	        if (isPresent(value)) {
	          throw new BaseException("Invalid " + dashCasedAttributeName + " attribute, only string values are allowed, got '" + stringify(value) + "'");
	        }
	        DOM.removeAttribute(element, dashCasedAttributeName);
	      }
	    };
	    StringMapWrapper.set(attributeSettersCache, attrName, setterFn);
	  }
	  return assert.returnType(setterFn, Function);
	}
	Object.defineProperty(attributeSetterFactory, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var CLASS_PREFIX = 'class.';
	var classSettersCache = StringMapWrapper.create();
	function classSetterFactory(className) {
	  assert.argumentTypes(className, assert.type.string);
	  var setterFn = StringMapWrapper.get(classSettersCache, className);
	  var dashCasedClassName;
	  if (isBlank(setterFn)) {
	    dashCasedClassName = camelCaseToDashCase(className);
	    setterFn = function (element, value) {
	      if (value) {
	        DOM.addClass(element, dashCasedClassName);
	      } else {
	        DOM.removeClass(element, dashCasedClassName);
	      }
	    };
	    StringMapWrapper.set(classSettersCache, className, setterFn);
	  }
	  return assert.returnType(setterFn, Function);
	}
	Object.defineProperty(classSetterFactory, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var STYLE_PREFIX = 'style.';
	var styleSettersCache = StringMapWrapper.create();
	function styleSetterFactory(styleName, styleSuffix) {
	  assert.argumentTypes(styleName, assert.type.string, styleSuffix, assert.type.string);
	  var cacheKey = styleName + styleSuffix;
	  var setterFn = StringMapWrapper.get(styleSettersCache, cacheKey);
	  var dashCasedStyleName;
	  if (isBlank(setterFn)) {
	    dashCasedStyleName = camelCaseToDashCase(styleName);
	    setterFn = function (element, value) {
	      var valAsStr;
	      if (isPresent(value)) {
	        valAsStr = stringify(value);
	        DOM.setStyle(element, dashCasedStyleName, valAsStr + styleSuffix);
	      } else {
	        DOM.removeStyle(element, dashCasedStyleName);
	      }
	    };
	    StringMapWrapper.set(styleSettersCache, cacheKey, setterFn);
	  }
	  return assert.returnType(setterFn, Function);
	}
	Object.defineProperty(styleSetterFactory, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	function resolvePropertyName(attrName) {
	  assert.argumentTypes(attrName, assert.type.string);
	  var mappedPropName = StringMapWrapper.get(DOM.attrToPropMap, attrName);
	  return assert.returnType(isPresent(mappedPropName) ? mappedPropName : attrName, assert.type.string);
	}
	Object.defineProperty(resolvePropertyName, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=property_setter_factory.js.map

	//# sourceMappingURL=./property_setter_factory.map

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ViewPool: { get: function get() {
	      return ViewPool;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__view__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__1.ListWrapper,
	    MapWrapper = $__1.MapWrapper,
	    StringMapWrapper = $__1.StringMapWrapper,
	    List = $__1.List;
	var viewModule = ($__view__ = __webpack_require__(53), $__view__ && $__view__.__esModule && $__view__ || { "default": $__view__ });
	var ViewPool = function ViewPool(capacity) {
	  assert.argumentTypes(capacity, assert.type.number);
	  this._views = [];
	  this._capacity = capacity;
	};
	$traceurRuntime.createClass(ViewPool, {
	  pop: function pop() {
	    return assert.returnType(ListWrapper.isEmpty(this._views) ? null : ListWrapper.removeLast(this._views), viewModule.View);
	  },
	  push: function push(view) {
	    assert.argumentTypes(view, viewModule.View);
	    if (this._views.length < this._capacity) {
	      ListWrapper.push(this._views, view);
	    }
	  },
	  length: function length() {
	    return this._views.length;
	  }
	}, {});
	Object.defineProperty(ViewPool, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	Object.defineProperty(ViewPool.prototype.push, "parameters", { get: function get() {
	    return [[viewModule.View]];
	  } });
	//# sourceMappingURL=view_pool.js.map

	//# sourceMappingURL=./view_pool.map

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CompilePipeline: { get: function get() {
	      return CompilePipeline;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__compile_95_element__, $__compile_95_control__, $__compile_95_step__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompilePipeline = function CompilePipeline(steps) {
	  assert.argumentTypes(steps, assert.genericType(List, CompileStep));
	  this._control = new CompileControl(steps);
	};
	$traceurRuntime.createClass(CompilePipeline, {
	  process: function process(rootElement) {
	    var compilationCtxtDescription = arguments[1] !== void 0 ? arguments[1] : '';
	    assert.argumentTypes(rootElement, assert.type.any, compilationCtxtDescription, assert.type.string);
	    var results = ListWrapper.create();
	    this._process(results, null, new CompileElement(rootElement, compilationCtxtDescription), compilationCtxtDescription);
	    return assert.returnType(results, List);
	  },
	  _process: function _process(results, parent, current) {
	    var compilationCtxtDescription = arguments[3] !== void 0 ? arguments[3] : '';
	    assert.argumentTypes(results, assert.type.any, parent, CompileElement, current, CompileElement, compilationCtxtDescription, assert.type.string);
	    var additionalChildren = this._control.internalProcess(results, 0, parent, current);
	    if (current.compileChildren) {
	      var node = DOM.firstChild(DOM.templateAwareRoot(current.element));
	      while (isPresent(node)) {
	        var nextNode = DOM.nextSibling(node);
	        if (DOM.isElementNode(node)) {
	          this._process(results, current, new CompileElement(node, compilationCtxtDescription));
	        }
	        node = nextNode;
	      }
	    }
	    if (isPresent(additionalChildren)) {
	      for (var i = 0; i < additionalChildren.length; i++) {
	        this._process(results, current, additionalChildren[i]);
	      }
	    }
	  }
	}, {});
	Object.defineProperty(CompilePipeline, "parameters", { get: function get() {
	    return [[assert.genericType(List, CompileStep)]];
	  } });
	Object.defineProperty(CompilePipeline.prototype.process, "parameters", { get: function get() {
	    return [[], [assert.type.string]];
	  } });
	Object.defineProperty(CompilePipeline.prototype._process, "parameters", { get: function get() {
	    return [[], [CompileElement], [CompileElement], [assert.type.string]];
	  } });
	//# sourceMappingURL=compile_pipeline.js.map

	//# sourceMappingURL=./compile_pipeline.map

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	    createDefaultSteps: { get: function get() {
	            return createDefaultSteps;
	        } },
	    __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_change_95_detection__, $__angular2_47_src_47_facade_47_collection__, $__property_95_binding_95_parser__, $__text_95_interpolation_95_parser__, $__directive_95_parser__, $__view_95_splitter__, $__element_95_binding_95_marker__, $__proto_95_view_95_builder__, $__proto_95_element_95_injector_95_builder__, $__element_95_binder_95_builder__, $__angular2_47_src_47_core_47_compiler_47_css_95_processor__, $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__, $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    ChangeDetection = $__1.ChangeDetection,
	    Parser = $__1.Parser;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper;
	var PropertyBindingParser = ($__property_95_binding_95_parser__ = __webpack_require__(79), $__property_95_binding_95_parser__ && $__property_95_binding_95_parser__.__esModule && $__property_95_binding_95_parser__ || { "default": $__property_95_binding_95_parser__ }).PropertyBindingParser;
	var TextInterpolationParser = ($__text_95_interpolation_95_parser__ = __webpack_require__(80), $__text_95_interpolation_95_parser__ && $__text_95_interpolation_95_parser__.__esModule && $__text_95_interpolation_95_parser__ || { "default": $__text_95_interpolation_95_parser__ }).TextInterpolationParser;
	var DirectiveParser = ($__directive_95_parser__ = __webpack_require__(81), $__directive_95_parser__ && $__directive_95_parser__.__esModule && $__directive_95_parser__ || { "default": $__directive_95_parser__ }).DirectiveParser;
	var ViewSplitter = ($__view_95_splitter__ = __webpack_require__(83), $__view_95_splitter__ && $__view_95_splitter__.__esModule && $__view_95_splitter__ || { "default": $__view_95_splitter__ }).ViewSplitter;
	var ElementBindingMarker = ($__element_95_binding_95_marker__ = __webpack_require__(84), $__element_95_binding_95_marker__ && $__element_95_binding_95_marker__.__esModule && $__element_95_binding_95_marker__ || { "default": $__element_95_binding_95_marker__ }).ElementBindingMarker;
	var ProtoViewBuilder = ($__proto_95_view_95_builder__ = __webpack_require__(85), $__proto_95_view_95_builder__ && $__proto_95_view_95_builder__.__esModule && $__proto_95_view_95_builder__ || { "default": $__proto_95_view_95_builder__ }).ProtoViewBuilder;
	var ProtoElementInjectorBuilder = ($__proto_95_element_95_injector_95_builder__ = __webpack_require__(86), $__proto_95_element_95_injector_95_builder__ && $__proto_95_element_95_injector_95_builder__.__esModule && $__proto_95_element_95_injector_95_builder__ || { "default": $__proto_95_element_95_injector_95_builder__ }).ProtoElementInjectorBuilder;
	var ElementBinderBuilder = ($__element_95_binder_95_builder__ = __webpack_require__(87), $__element_95_binder_95_builder__ && $__element_95_binder_95_builder__.__esModule && $__element_95_binder_95_builder__ || { "default": $__element_95_binder_95_builder__ }).ElementBinderBuilder;
	var CssProcessor = ($__angular2_47_src_47_core_47_compiler_47_css_95_processor__ = __webpack_require__(88), $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ && $__angular2_47_src_47_core_47_compiler_47_css_95_processor__.__esModule && $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ || { "default": $__angular2_47_src_47_core_47_compiler_47_css_95_processor__ }).CssProcessor;
	var DirectiveMetadata = ($__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__ = __webpack_require__(52), $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__ && $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__.__esModule && $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__ || { "default": $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata__ }).DirectiveMetadata;
	var $__13 = ($__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ = __webpack_require__(64), $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__.__esModule && $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ || { "default": $__angular2_47_src_47_core_47_compiler_47_shadow_95_dom_95_strategy__ }),
	    ShadowDomStrategy = $__13.ShadowDomStrategy,
	    EmulatedScopedShadowDomStrategy = $__13.EmulatedScopedShadowDomStrategy;
	function createDefaultSteps(changeDetection, parser, compiledComponent, directives, shadowDomStrategy, templateUrl, cssProcessor) {
	    assert.argumentTypes(changeDetection, ChangeDetection, parser, Parser, compiledComponent, DirectiveMetadata, directives, assert.genericType(List, DirectiveMetadata), shadowDomStrategy, ShadowDomStrategy, templateUrl, assert.type.string, cssProcessor, CssProcessor);
	    var steps = [new ViewSplitter(parser), cssProcessor.getCompileStep(compiledComponent, shadowDomStrategy, templateUrl), shadowDomStrategy.getTemplateCompileStep(compiledComponent), new PropertyBindingParser(parser), new DirectiveParser(directives), new TextInterpolationParser(parser), new ElementBindingMarker(), new ProtoViewBuilder(changeDetection, shadowDomStrategy), new ProtoElementInjectorBuilder(), new ElementBinderBuilder(parser)];
	    return steps;
	}
	Object.defineProperty(createDefaultSteps, "parameters", { get: function get() {
	        return [[ChangeDetection], [Parser], [DirectiveMetadata], [assert.genericType(List, DirectiveMetadata)], [ShadowDomStrategy], [assert.type.string], [CssProcessor]];
	    } });
	//# sourceMappingURL=default_steps.js.map

	//# sourceMappingURL=./default_steps.map

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  PropertyBindingParser: { get: function get() {
	      return PropertyBindingParser;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_change_95_detection__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    RegExpWrapper = $__1.RegExpWrapper,
	    BaseException = $__1.BaseException;
	var MapWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).MapWrapper;
	var $__3 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    Parser = $__3.Parser,
	    AST = $__3.AST,
	    ExpressionWithSource = $__3.ExpressionWithSource;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var BIND_NAME_REGEXP = RegExpWrapper.create('^(?:(?:(?:(bind)|(var)|(on))-(.+))|\\[([^\\]]+)\\]|\\(([^\\)]+)\\)|(#)(.+))$');
	var PropertyBindingParser = function PropertyBindingParser(parser) {
	  assert.argumentTypes(parser, Parser);
	  $traceurRuntime.superConstructor($PropertyBindingParser).call(this);
	  this._parser = parser;
	};
	var $PropertyBindingParser = PropertyBindingParser;
	$traceurRuntime.createClass(PropertyBindingParser, {
	  process: function process(parent, current, control) {
	    var $__7 = this;
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    if (current.ignoreBindings) {
	      return;
	    }
	    var attrs = current.attrs();
	    var newAttrs = MapWrapper.create();
	    var desc = current.elementDescription;
	    MapWrapper.forEach(attrs, function (attrValue, attrName) {
	      var bindParts = RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	      if (isPresent(bindParts)) {
	        if (isPresent(bindParts[1])) {
	          current.addPropertyBinding(bindParts[4], $__7._parseBinding(attrValue, desc));
	          MapWrapper.set(newAttrs, bindParts[4], attrValue);
	        } else if (isPresent(bindParts[2]) || isPresent(bindParts[7])) {
	          var identifier = isPresent(bindParts[4]) && bindParts[4] !== '' ? bindParts[4] : bindParts[8];
	          var value = attrValue == '' ? '\$implicit' : attrValue;
	          current.addVariableBinding(identifier, value);
	          MapWrapper.set(newAttrs, identifier, value);
	        } else if (isPresent(bindParts[3])) {
	          current.addEventBinding(bindParts[4], $__7._parseAction(attrValue, desc));
	        } else if (isPresent(bindParts[5])) {
	          current.addPropertyBinding(bindParts[5], $__7._parseBinding(attrValue, desc));
	          MapWrapper.set(newAttrs, bindParts[5], attrValue);
	        } else if (isPresent(bindParts[6])) {
	          current.addEventBinding(bindParts[6], $__7._parseAction(attrValue, desc));
	        }
	      } else {
	        var ast = $__7._parseInterpolation(attrValue, desc);
	        if (isPresent(ast)) {
	          current.addPropertyBinding(attrName, ast);
	        } else {
	          current.addAttribute(attrName, attrValue);
	        }
	      }
	    });
	    MapWrapper.forEach(newAttrs, function (attrValue, attrName) {
	      MapWrapper.set(attrs, attrName, attrValue);
	    });
	  },
	  _parseInterpolation: function _parseInterpolation(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.string);
	    return assert.returnType(this._parser.parseInterpolation(input, location), AST);
	  },
	  _parseBinding: function _parseBinding(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.string);
	    return assert.returnType(this._parser.parseBinding(input, location), AST);
	  },
	  _parseAction: function _parseAction(input, location) {
	    assert.argumentTypes(input, assert.type.string, location, assert.type.string);
	    return assert.returnType(this._parser.parseAction(input, location), AST);
	  }
	}, {}, CompileStep);
	Object.defineProperty(PropertyBindingParser, "parameters", { get: function get() {
	    return [[Parser]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._parseInterpolation, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._parseBinding, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._parseAction, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	//# sourceMappingURL=property_binding_parser.js.map

	//# sourceMappingURL=./property_binding_parser.map

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  TextInterpolationParser: { get: function get() {
	      return TextInterpolationParser;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_change_95_detection__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    RegExpWrapper = $__1.RegExpWrapper,
	    StringWrapper = $__1.StringWrapper,
	    isPresent = $__1.isPresent;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var Parser = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).Parser;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var TextInterpolationParser = function TextInterpolationParser(parser) {
	  assert.argumentTypes(parser, Parser);
	  $traceurRuntime.superConstructor($TextInterpolationParser).call(this);
	  this._parser = parser;
	};
	var $TextInterpolationParser = TextInterpolationParser;
	$traceurRuntime.createClass(TextInterpolationParser, {
	  process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    if (!current.compileChildren || current.ignoreBindings) {
	      return;
	    }
	    var element = current.element;
	    var childNodes = DOM.childNodes(DOM.templateAwareRoot(element));
	    for (var i = 0; i < childNodes.length; i++) {
	      var node = childNodes[i];
	      if (DOM.isTextNode(node)) {
	        this._parseTextNode(current, node, i);
	      }
	    }
	  },
	  _parseTextNode: function _parseTextNode(pipelineElement, node, nodeIndex) {
	    var ast = this._parser.parseInterpolation(DOM.nodeValue(node), pipelineElement.elementDescription);
	    if (isPresent(ast)) {
	      DOM.setText(node, ' ');
	      pipelineElement.addTextNodeBinding(nodeIndex, ast);
	    }
	  }
	}, {}, CompileStep);
	Object.defineProperty(TextInterpolationParser, "parameters", { get: function get() {
	    return [[Parser]];
	  } });
	Object.defineProperty(TextInterpolationParser.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	//# sourceMappingURL=text_interpolation_parser.js.map

	//# sourceMappingURL=./text_interpolation_parser.map

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DirectiveParser: { get: function get() {
	      return DirectiveParser;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $___46__46__47_selector__, $___46__46__47_selector__, $___46__46__47_directive_95_metadata__, $___46__46__47__46__46__47_annotations_47_annotations__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank,
	    BaseException = $__1.BaseException,
	    assertionsEnabled = $__1.assertionsEnabled,
	    RegExpWrapper = $__1.RegExpWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    MapWrapper = $__2.MapWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var SelectorMatcher = ($___46__46__47_selector__ = __webpack_require__(82), $___46__46__47_selector__ && $___46__46__47_selector__.__esModule && $___46__46__47_selector__ || { "default": $___46__46__47_selector__ }).SelectorMatcher;
	var CssSelector = ($___46__46__47_selector__ = __webpack_require__(82), $___46__46__47_selector__ && $___46__46__47_selector__.__esModule && $___46__46__47_selector__ || { "default": $___46__46__47_selector__ }).CssSelector;
	var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = __webpack_require__(52), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || { "default": $___46__46__47_directive_95_metadata__ }).DirectiveMetadata;
	var $__7 = ($___46__46__47__46__46__47_annotations_47_annotations__ = __webpack_require__(51), $___46__46__47__46__46__47_annotations_47_annotations__ && $___46__46__47__46__46__47_annotations_47_annotations__.__esModule && $___46__46__47__46__46__47_annotations_47_annotations__ || { "default": $___46__46__47__46__46__47_annotations_47_annotations__ }),
	    DynamicComponent = $__7.DynamicComponent,
	    Component = $__7.Component,
	    Viewport = $__7.Viewport;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var PROPERTY_BINDING_REGEXP = RegExpWrapper.create('^ *([^\\s\\|]+)');
	var DirectiveParser = function DirectiveParser(directives) {
	  assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata));
	  $traceurRuntime.superConstructor($DirectiveParser).call(this);
	  var selector;
	  this._selectorMatcher = new SelectorMatcher();
	  for (var i = 0; i < directives.length; i++) {
	    var directiveMetadata = directives[i];
	    selector = CssSelector.parse(directiveMetadata.annotation.selector);
	    this._selectorMatcher.addSelectables(selector, directiveMetadata);
	  }
	};
	var $DirectiveParser = DirectiveParser;
	$traceurRuntime.createClass(DirectiveParser, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var attrs = current.attrs();
	    var classList = current.classList();
	    var cssSelector = new CssSelector();
	    var nodeName = DOM.nodeName(current.element);
	    cssSelector.setElement(nodeName);
	    for (var i = 0; i < classList.length; i++) {
	      cssSelector.addClassName(classList[i]);
	    }
	    MapWrapper.forEach(attrs, function (attrValue, attrName) {
	      cssSelector.addAttribute(attrName, attrValue);
	    });
	    var isTemplateElement = DOM.isTemplateElement(current.element);
	    this._selectorMatcher.match(cssSelector, function (selector, directive) {
	      current.addDirective(checkDirectiveValidity(directive, current, isTemplateElement));
	    });
	  } }, {}, CompileStep);
	Object.defineProperty(DirectiveParser, "parameters", { get: function get() {
	    return [[assert.genericType(List, DirectiveMetadata)]];
	  } });
	Object.defineProperty(DirectiveParser.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	function checkDirectiveValidity(directive, current, isTemplateElement) {
	  var isComponent = directive.annotation instanceof Component || directive.annotation instanceof DynamicComponent;
	  var alreadyHasComponent = isPresent(current.componentDirective);
	  if (directive.annotation instanceof Viewport) {
	    if (!isTemplateElement) {
	      throw new BaseException("Viewport directives need to be placed on <template> elements or elements " + ("with template attribute - check " + current.elementDescription));
	    } else if (isPresent(current.viewportDirective)) {
	      throw new BaseException("Only one viewport directive can be used per element - check " + current.elementDescription);
	    }
	  } else if (isTemplateElement) {
	    throw new BaseException("Only template directives are allowed on template elements - check " + current.elementDescription);
	  } else if (isComponent && alreadyHasComponent) {
	    throw new BaseException("Multiple component directives not allowed on the same element - check " + current.elementDescription);
	  }
	  return directive;
	}
	//# sourceMappingURL=directive_parser.js.map

	//# sourceMappingURL=./directive_parser.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CssSelector: { get: function get() {
	      return CssSelector;
	    } },
	  SelectorMatcher: { get: function get() {
	      return SelectorMatcher;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__1.List,
	    Map = $__1.Map,
	    ListWrapper = $__1.ListWrapper,
	    MapWrapper = $__1.MapWrapper;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__2.isPresent,
	    isBlank = $__2.isBlank,
	    RegExpWrapper = $__2.RegExpWrapper,
	    RegExpMatcherWrapper = $__2.RegExpMatcherWrapper,
	    StringWrapper = $__2.StringWrapper,
	    BaseException = $__2.BaseException;
	var _EMPTY_ATTR_VALUE = '';
	var _SELECTOR_REGEXP = RegExpWrapper.create('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(?:\\))|' + '(\\s*,\\s*)');
	var CssSelector = function CssSelector() {
	  this.element = null;
	  this.classNames = ListWrapper.create();
	  this.attrs = ListWrapper.create();
	  this.notSelector = null;
	};
	var $CssSelector = CssSelector;
	$traceurRuntime.createClass(CssSelector, {
	  setElement: function setElement() {
	    var element = arguments[0] !== void 0 ? arguments[0] : null;
	    assert.argumentTypes(element, assert.type.string);
	    if (isPresent(element)) {
	      element = element.toLowerCase();
	    }
	    this.element = element;
	  },
	  addAttribute: function addAttribute(name) {
	    var value = arguments[1] !== void 0 ? arguments[1] : _EMPTY_ATTR_VALUE;
	    assert.argumentTypes(name, assert.type.string, value, assert.type.string);
	    ListWrapper.push(this.attrs, name.toLowerCase());
	    if (isPresent(value)) {
	      value = value.toLowerCase();
	    } else {
	      value = _EMPTY_ATTR_VALUE;
	    }
	    ListWrapper.push(this.attrs, value);
	  },
	  addClassName: function addClassName(name) {
	    assert.argumentTypes(name, assert.type.string);
	    ListWrapper.push(this.classNames, name.toLowerCase());
	  },
	  toString: function toString() {
	    var res = '';
	    if (isPresent(this.element)) {
	      res += this.element;
	    }
	    if (isPresent(this.classNames)) {
	      for (var i = 0; i < this.classNames.length; i++) {
	        res += '.' + this.classNames[i];
	      }
	    }
	    if (isPresent(this.attrs)) {
	      for (var i = 0; i < this.attrs.length;) {
	        var attrName = this.attrs[i++];
	        var attrValue = this.attrs[i++];
	        res += '[' + attrName;
	        if (attrValue.length > 0) {
	          res += '=' + attrValue;
	        }
	        res += ']';
	      }
	    }
	    if (isPresent(this.notSelector)) {
	      res += ":not(" + this.notSelector.toString() + ")";
	    }
	    return assert.returnType(res, assert.type.string);
	  }
	}, { parse: function parse(selector) {
	    assert.argumentTypes(selector, assert.type.string);
	    var results = ListWrapper.create();
	    var _addResult = function _addResult(res, cssSel) {
	      if (isPresent(cssSel.notSelector) && isBlank(cssSel.element) && ListWrapper.isEmpty(cssSel.classNames) && ListWrapper.isEmpty(cssSel.attrs)) {
	        cssSel.element = "*";
	      }
	      ListWrapper.push(res, cssSel);
	    };
	    var cssSelector = new $CssSelector();
	    var matcher = RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	    var match;
	    var current = cssSelector;
	    while (isPresent(match = RegExpMatcherWrapper.next(matcher))) {
	      if (isPresent(match[1])) {
	        if (isPresent(cssSelector.notSelector)) {
	          throw new BaseException('Nesting :not is not allowed in a selector');
	        }
	        current.notSelector = new $CssSelector();
	        current = current.notSelector;
	      }
	      if (isPresent(match[2])) {
	        current.setElement(match[2]);
	      }
	      if (isPresent(match[3])) {
	        current.addClassName(match[3]);
	      }
	      if (isPresent(match[4])) {
	        current.addAttribute(match[4], match[5]);
	      }
	      if (isPresent(match[6])) {
	        _addResult(results, cssSelector);
	        cssSelector = current = new $CssSelector();
	      }
	    }
	    _addResult(results, cssSelector);
	    return assert.returnType(results, assert.genericType(List, $CssSelector));
	  } });
	Object.defineProperty(CssSelector.parse, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.setElement, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.addAttribute, "parameters", { get: function get() {
	    return [[assert.type.string], [assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.addClassName, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var SelectorMatcher = function SelectorMatcher() {
	  this._elementMap = MapWrapper.create();
	  this._elementPartialMap = MapWrapper.create();
	  this._classMap = MapWrapper.create();
	  this._classPartialMap = MapWrapper.create();
	  this._attrValueMap = MapWrapper.create();
	  this._attrValuePartialMap = MapWrapper.create();
	  this._listContexts = ListWrapper.create();
	};
	var $SelectorMatcher = SelectorMatcher;
	$traceurRuntime.createClass(SelectorMatcher, {
	  addSelectables: function addSelectables(cssSelectors, callbackCtxt) {
	    assert.argumentTypes(cssSelectors, assert.genericType(List, CssSelector), callbackCtxt, assert.type.any);
	    var listContext = null;
	    if (cssSelectors.length > 1) {
	      listContext = new SelectorListContext(cssSelectors);
	      ListWrapper.push(this._listContexts, listContext);
	    }
	    for (var i = 0; i < cssSelectors.length; i++) {
	      this.addSelectable(cssSelectors[i], callbackCtxt, listContext);
	    }
	  },
	  addSelectable: function addSelectable(cssSelector, callbackCtxt, listContext) {
	    assert.argumentTypes(cssSelector, assert.type.any, callbackCtxt, assert.type.any, listContext, SelectorListContext);
	    var matcher = this;
	    var element = cssSelector.element;
	    var classNames = cssSelector.classNames;
	    var attrs = cssSelector.attrs;
	    var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	    if (isPresent(element)) {
	      var isTerminal = attrs.length === 0 && classNames.length === 0;
	      if (isTerminal) {
	        this._addTerminal(matcher._elementMap, element, selectable);
	      } else {
	        matcher = this._addPartial(matcher._elementPartialMap, element);
	      }
	    }
	    if (isPresent(classNames)) {
	      for (var index = 0; index < classNames.length; index++) {
	        var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	        var className = classNames[index];
	        if (isTerminal) {
	          this._addTerminal(matcher._classMap, className, selectable);
	        } else {
	          matcher = this._addPartial(matcher._classPartialMap, className);
	        }
	      }
	    }
	    if (isPresent(attrs)) {
	      for (var index = 0; index < attrs.length;) {
	        var isTerminal = index === attrs.length - 2;
	        var attrName = attrs[index++];
	        var attrValue = attrs[index++];
	        var map = isTerminal ? matcher._attrValueMap : matcher._attrValuePartialMap;
	        var valuesMap = MapWrapper.get(map, attrName);
	        if (isBlank(valuesMap)) {
	          valuesMap = MapWrapper.create();
	          MapWrapper.set(map, attrName, valuesMap);
	        }
	        if (isTerminal) {
	          this._addTerminal(valuesMap, attrValue, selectable);
	        } else {
	          matcher = this._addPartial(valuesMap, attrValue);
	        }
	      }
	    }
	  },
	  _addTerminal: function _addTerminal(map, name, selectable) {
	    assert.argumentTypes(map, assert.genericType(Map, assert.type.string, assert.type.string), name, assert.type.string, selectable, assert.type.any);
	    var terminalList = MapWrapper.get(map, name);
	    if (isBlank(terminalList)) {
	      terminalList = ListWrapper.create();
	      MapWrapper.set(map, name, terminalList);
	    }
	    ListWrapper.push(terminalList, selectable);
	  },
	  _addPartial: function _addPartial(map, name) {
	    assert.argumentTypes(map, assert.genericType(Map, assert.type.string, assert.type.string), name, assert.type.string);
	    var matcher = MapWrapper.get(map, name);
	    if (isBlank(matcher)) {
	      matcher = new $SelectorMatcher();
	      MapWrapper.set(map, name, matcher);
	    }
	    return matcher;
	  },
	  match: function match(cssSelector, matchedCallback) {
	    assert.argumentTypes(cssSelector, CssSelector, matchedCallback, Function);
	    var result = false;
	    var element = cssSelector.element;
	    var classNames = cssSelector.classNames;
	    var attrs = cssSelector.attrs;
	    for (var i = 0; i < this._listContexts.length; i++) {
	      this._listContexts[i].alreadyMatched = false;
	    }
	    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
	    if (isPresent(classNames)) {
	      for (var index = 0; index < classNames.length; index++) {
	        var className = classNames[index];
	        result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
	      }
	    }
	    if (isPresent(attrs)) {
	      for (var index = 0; index < attrs.length;) {
	        var attrName = attrs[index++];
	        var attrValue = attrs[index++];
	        var valuesMap = MapWrapper.get(this._attrValueMap, attrName);
	        if (!StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	          result = this._matchTerminal(valuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
	        }
	        result = this._matchTerminal(valuesMap, attrValue, cssSelector, matchedCallback) || result;
	        valuesMap = MapWrapper.get(this._attrValuePartialMap, attrName);
	        result = this._matchPartial(valuesMap, attrValue, cssSelector, matchedCallback) || result;
	      }
	    }
	    return assert.returnType(result, assert.type.boolean);
	  },
	  _matchTerminal: function _matchTerminal() {
	    var map = arguments[0] !== void 0 ? arguments[0] : null;
	    var name = arguments[1];
	    var cssSelector = arguments[2];
	    var matchedCallback = arguments[3];
	    assert.argumentTypes(map, assert.genericType(Map, assert.type.string, assert.type.string), name, assert.type.any, cssSelector, assert.type.any, matchedCallback, assert.type.any);
	    if (isBlank(map) || isBlank(name)) {
	      return assert.returnType(false, assert.type.boolean);
	    }
	    var selectables = MapWrapper.get(map, name);
	    var starSelectables = MapWrapper.get(map, "*");
	    if (isPresent(starSelectables)) {
	      selectables = ListWrapper.concat(selectables, starSelectables);
	    }
	    if (isBlank(selectables)) {
	      return assert.returnType(false, assert.type.boolean);
	    }
	    var selectable;
	    var result = false;
	    for (var index = 0; index < selectables.length; index++) {
	      selectable = selectables[index];
	      result = selectable.finalize(cssSelector, matchedCallback) || result;
	    }
	    return assert.returnType(result, assert.type.boolean);
	  },
	  _matchPartial: function _matchPartial() {
	    var map = arguments[0] !== void 0 ? arguments[0] : null;
	    var name = arguments[1];
	    var cssSelector = arguments[2];
	    var matchedCallback = arguments[3];
	    assert.argumentTypes(map, assert.genericType(Map, assert.type.string, assert.type.string), name, assert.type.any, cssSelector, assert.type.any, matchedCallback, assert.type.any);
	    if (isBlank(map) || isBlank(name)) {
	      return assert.returnType(false, assert.type.boolean);
	    }
	    var nestedSelector = MapWrapper.get(map, name);
	    if (isBlank(nestedSelector)) {
	      return assert.returnType(false, assert.type.boolean);
	    }
	    return assert.returnType(nestedSelector.match(cssSelector, matchedCallback), assert.type.boolean);
	  }
	}, {});
	Object.defineProperty(SelectorMatcher.prototype.addSelectables, "parameters", { get: function get() {
	    return [[assert.genericType(List, CssSelector)], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype.addSelectable, "parameters", { get: function get() {
	    return [[], [], [SelectorListContext]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._addTerminal, "parameters", { get: function get() {
	    return [[assert.genericType(Map, assert.type.string, assert.type.string)], [assert.type.string], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._addPartial, "parameters", { get: function get() {
	    return [[assert.genericType(Map, assert.type.string, assert.type.string)], [assert.type.string]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype.match, "parameters", { get: function get() {
	    return [[CssSelector], [Function]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._matchTerminal, "parameters", { get: function get() {
	    return [[assert.genericType(Map, assert.type.string, assert.type.string)], [], [], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._matchPartial, "parameters", { get: function get() {
	    return [[assert.genericType(Map, assert.type.string, assert.type.string)], [], [], []];
	  } });
	var SelectorListContext = function SelectorListContext(selectors) {
	  assert.argumentTypes(selectors, assert.genericType(List, CssSelector));
	  this.selectors = selectors;
	  this.alreadyMatched = false;
	};
	$traceurRuntime.createClass(SelectorListContext, {}, {});
	Object.defineProperty(SelectorListContext, "parameters", { get: function get() {
	    return [[assert.genericType(List, CssSelector)]];
	  } });
	var SelectorContext = function SelectorContext(selector, cbContext, listContext) {
	  assert.argumentTypes(selector, CssSelector, cbContext, assert.type.any, listContext, SelectorListContext);
	  this.selector = selector;
	  this.notSelector = selector.notSelector;
	  this.cbContext = cbContext;
	  this.listContext = listContext;
	};
	$traceurRuntime.createClass(SelectorContext, { finalize: function finalize(cssSelector, callback) {
	    assert.argumentTypes(cssSelector, CssSelector, callback, assert.type.any);
	    var result = true;
	    if (isPresent(this.notSelector) && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	      var notMatcher = new SelectorMatcher();
	      notMatcher.addSelectable(this.notSelector, null, null);
	      result = !notMatcher.match(cssSelector, null);
	    }
	    if (result && isPresent(callback) && (isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	      if (isPresent(this.listContext)) {
	        this.listContext.alreadyMatched = true;
	      }
	      callback(this.selector, this.cbContext);
	    }
	    return result;
	  } }, {});
	Object.defineProperty(SelectorContext, "parameters", { get: function get() {
	    return [[CssSelector], [], [SelectorListContext]];
	  } });
	Object.defineProperty(SelectorContext.prototype.finalize, "parameters", { get: function get() {
	    return [[CssSelector], []];
	  } });
	//# sourceMappingURL=selector.js.map

	//# sourceMappingURL=./selector.map

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ViewSplitter: { get: function get() {
	      return ViewSplitter;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_change_95_detection__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__1.isBlank,
	    isPresent = $__1.isPresent,
	    BaseException = $__1.BaseException;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    MapWrapper = $__3.MapWrapper,
	    ListWrapper = $__3.ListWrapper;
	var Parser = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).Parser;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var StringWrapper = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).StringWrapper;
	var ViewSplitter = function ViewSplitter(parser) {
	  assert.argumentTypes(parser, Parser);
	  $traceurRuntime.superConstructor($ViewSplitter).call(this);
	  this._parser = parser;
	};
	var $ViewSplitter = ViewSplitter;
	$traceurRuntime.createClass(ViewSplitter, {
	  process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var attrs = current.attrs();
	    var templateBindings = MapWrapper.get(attrs, 'template');
	    var hasTemplateBinding = isPresent(templateBindings);
	    MapWrapper.forEach(attrs, function (attrValue, attrName) {
	      if (StringWrapper.startsWith(attrName, '*')) {
	        var key = StringWrapper.substring(attrName, 1);
	        if (hasTemplateBinding) {
	          throw new BaseException("Only one template directive per element is allowed: " + (templateBindings + " and " + key + " cannot be used simultaneously ") + ("in " + current.elementDescription));
	        } else {
	          templateBindings = attrValue.length == 0 ? key : key + ' ' + attrValue;
	          hasTemplateBinding = true;
	        }
	      }
	    });
	    if (isBlank(parent)) {
	      current.isViewRoot = true;
	    } else {
	      if (DOM.isTemplateElement(current.element)) {
	        if (!current.isViewRoot) {
	          var viewRoot = new CompileElement(DOM.createTemplate(''));
	          var currentElement = current.element;
	          var viewRootElement = viewRoot.element;
	          this._moveChildNodes(DOM.content(currentElement), DOM.content(viewRootElement));
	          viewRoot.elementDescription = current.elementDescription;
	          viewRoot.isViewRoot = true;
	          control.addChild(viewRoot);
	        }
	      } else {
	        if (hasTemplateBinding) {
	          var newParent = new CompileElement(DOM.createTemplate(''));
	          newParent.elementDescription = current.elementDescription;
	          current.isViewRoot = true;
	          this._parseTemplateBindings(templateBindings, newParent);
	          this._addParentElement(current.element, newParent.element);
	          control.addParent(newParent);
	          DOM.remove(current.element);
	        }
	      }
	    }
	  },
	  _moveChildNodes: function _moveChildNodes(source, target) {
	    var next = DOM.firstChild(source);
	    while (isPresent(next)) {
	      DOM.appendChild(target, next);
	      next = DOM.firstChild(source);
	    }
	  },
	  _addParentElement: function _addParentElement(currentElement, newParentElement) {
	    DOM.insertBefore(currentElement, newParentElement);
	    DOM.appendChild(newParentElement, currentElement);
	  },
	  _parseTemplateBindings: function _parseTemplateBindings(templateBindings, compileElement) {
	    assert.argumentTypes(templateBindings, assert.type.string, compileElement, CompileElement);
	    var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
	    for (var i = 0; i < bindings.length; i++) {
	      var binding = bindings[i];
	      if (binding.keyIsVar) {
	        compileElement.addVariableBinding(binding.key, binding.name);
	        MapWrapper.set(compileElement.attrs(), binding.key, binding.name);
	      } else if (isPresent(binding.expression)) {
	        compileElement.addPropertyBinding(binding.key, binding.expression);
	        MapWrapper.set(compileElement.attrs(), binding.key, binding.expression.source);
	      } else {
	        DOM.setAttribute(compileElement.element, binding.key, '');
	      }
	    }
	  }
	}, {}, CompileStep);
	Object.defineProperty(ViewSplitter, "parameters", { get: function get() {
	    return [[Parser]];
	  } });
	Object.defineProperty(ViewSplitter.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	Object.defineProperty(ViewSplitter.prototype._parseTemplateBindings, "parameters", { get: function get() {
	    return [[assert.type.string], [CompileElement]];
	  } });
	//# sourceMappingURL=view_splitter.js.map

	//# sourceMappingURL=./view_splitter.map

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ElementBindingMarker: { get: function get() {
	      return ElementBindingMarker;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var MapWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).MapWrapper;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var NG_BINDING_CLASS = 'ng-binding';
	var ElementBindingMarker = function ElementBindingMarker() {
	  $traceurRuntime.superConstructor($ElementBindingMarker).apply(this, arguments);
	  ;
	};
	var $ElementBindingMarker = ElementBindingMarker;
	$traceurRuntime.createClass(ElementBindingMarker, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    if (current.ignoreBindings) {
	      return;
	    }
	    var hasBindings = isPresent(current.textNodeBindings) && MapWrapper.size(current.textNodeBindings) > 0 || isPresent(current.propertyBindings) && MapWrapper.size(current.propertyBindings) > 0 || isPresent(current.variableBindings) && MapWrapper.size(current.variableBindings) > 0 || isPresent(current.eventBindings) && MapWrapper.size(current.eventBindings) > 0 || isPresent(current.decoratorDirectives) && current.decoratorDirectives.length > 0 || isPresent(current.viewportDirective) || isPresent(current.componentDirective) || isPresent(current.contentTagSelector);
	    if (hasBindings) {
	      var element = current.element;
	      DOM.addClass(element, NG_BINDING_CLASS);
	      current.hasBindings = true;
	    }
	  } }, {}, CompileStep);
	Object.defineProperty(ElementBindingMarker.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	//# sourceMappingURL=element_binding_marker.js.map

	//# sourceMappingURL=./element_binding_marker.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ProtoViewBuilder: { get: function get() {
	      return ProtoViewBuilder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $___46__46__47_view__, $__angular2_47_change_95_detection__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__, $___46__46__47_shadow_95_dom_95_strategy__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    BaseException = $__1.BaseException;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper;
	var ProtoView = ($___46__46__47_view__ = __webpack_require__(53), $___46__46__47_view__ && $___46__46__47_view__.__esModule && $___46__46__47_view__ || { "default": $___46__46__47_view__ }).ProtoView;
	var ChangeDetection = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).ChangeDetection;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var ShadowDomStrategy = ($___46__46__47_shadow_95_dom_95_strategy__ = __webpack_require__(64), $___46__46__47_shadow_95_dom_95_strategy__ && $___46__46__47_shadow_95_dom_95_strategy__.__esModule && $___46__46__47_shadow_95_dom_95_strategy__ || { "default": $___46__46__47_shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var ProtoViewBuilder = function ProtoViewBuilder(changeDetection, shadowDomStrategy) {
	  assert.argumentTypes(changeDetection, ChangeDetection, shadowDomStrategy, ShadowDomStrategy);
	  $traceurRuntime.superConstructor($ProtoViewBuilder).call(this);
	  this._shadowDomStrategy = shadowDomStrategy;
	  this.changeDetection = changeDetection;
	};
	var $ProtoViewBuilder = ProtoViewBuilder;
	$traceurRuntime.createClass(ProtoViewBuilder, {
	  process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var inheritedProtoView = null;
	    if (current.isViewRoot) {
	      var protoChangeDetector = this.changeDetection.createProtoChangeDetector('dummy');
	      inheritedProtoView = new ProtoView(current.element, protoChangeDetector, this._shadowDomStrategy, this._getParentProtoView(parent));
	      if (isPresent(parent)) {
	        if (isPresent(parent.inheritedElementBinder.nestedProtoView)) {
	          throw new BaseException('Only one nested view per element is allowed');
	        }
	        parent.inheritedElementBinder.nestedProtoView = inheritedProtoView;
	        if (isPresent(parent.variableBindings)) {
	          MapWrapper.forEach(parent.variableBindings, function (mappedName, varName) {
	            inheritedProtoView.bindVariable(varName, mappedName);
	          });
	        }
	      }
	    } else if (isPresent(parent)) {
	      inheritedProtoView = parent.inheritedProtoView;
	    }
	    if (isPresent(current.variableBindings)) {
	      MapWrapper.forEach(current.variableBindings, function (mappedName, varName) {
	        MapWrapper.set(inheritedProtoView.protoLocals, mappedName, null);
	      });
	    }
	    current.inheritedProtoView = inheritedProtoView;
	  },
	  _getParentProtoView: function _getParentProtoView(parent) {
	    assert.argumentTypes(parent, CompileElement);
	    return isPresent(parent) ? parent.inheritedProtoView : null;
	  }
	}, {}, CompileStep);
	Object.defineProperty(ProtoViewBuilder, "parameters", { get: function get() {
	    return [[ChangeDetection], [ShadowDomStrategy]];
	  } });
	Object.defineProperty(ProtoViewBuilder.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	Object.defineProperty(ProtoViewBuilder.prototype._getParentProtoView, "parameters", { get: function get() {
	    return [[CompileElement]];
	  } });
	//# sourceMappingURL=proto_view_builder.js.map

	//# sourceMappingURL=./proto_view_builder.map

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ProtoElementInjectorBuilder: { get: function get() {
	      return ProtoElementInjectorBuilder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $___46__46__47_element_95_injector__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__, $___46__46__47_directive_95_metadata__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    MapWrapper = $__2.MapWrapper;
	var $__3 = ($___46__46__47_element_95_injector__ = __webpack_require__(54), $___46__46__47_element_95_injector__ && $___46__46__47_element_95_injector__.__esModule && $___46__46__47_element_95_injector__ || { "default": $___46__46__47_element_95_injector__ }),
	    ProtoElementInjector = $__3.ProtoElementInjector,
	    ComponentKeyMetaData = $__3.ComponentKeyMetaData,
	    DirectiveBinding = $__3.DirectiveBinding;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = __webpack_require__(52), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || { "default": $___46__46__47_directive_95_metadata__ }).DirectiveMetadata;
	var ProtoElementInjectorBuilder = function ProtoElementInjectorBuilder() {
	  $traceurRuntime.superConstructor($ProtoElementInjectorBuilder).apply(this, arguments);
	  ;
	};
	var $ProtoElementInjectorBuilder = ProtoElementInjectorBuilder;
	$traceurRuntime.createClass(ProtoElementInjectorBuilder, {
	  internalCreateProtoElementInjector: function internalCreateProtoElementInjector(parent, index, directives, firstBindingIsComponent, distance) {
	    return new ProtoElementInjector(parent, index, directives, firstBindingIsComponent, distance);
	  },
	  process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var distanceToParentInjector = this._getDistanceToParentInjector(parent, current);
	    var parentProtoElementInjector = this._getParentProtoElementInjector(parent, current);
	    var injectorBindings = ListWrapper.map(current.getAllDirectives(), this._createBinding);
	    if (injectorBindings.length > 0 || isPresent(current.variableBindings)) {
	      var protoView = current.inheritedProtoView;
	      var hasComponent = isPresent(current.componentDirective);
	      current.inheritedProtoElementInjector = this.internalCreateProtoElementInjector(parentProtoElementInjector, protoView.elementBinders.length, injectorBindings, hasComponent, distanceToParentInjector);
	      current.distanceToParentInjector = 0;
	      if (isPresent(current.variableBindings) && !isPresent(current.viewportDirective)) {
	        current.inheritedProtoElementInjector.exportComponent = hasComponent;
	        current.inheritedProtoElementInjector.exportElement = !hasComponent;
	        var exportImplicitName = MapWrapper.get(current.variableBindings, '\$implicit');
	        if (isPresent(exportImplicitName)) {
	          current.inheritedProtoElementInjector.exportImplicitName = exportImplicitName;
	        }
	      }
	      current.inheritedProtoElementInjector.attributes = current.attributes;
	    } else {
	      current.inheritedProtoElementInjector = parentProtoElementInjector;
	      current.distanceToParentInjector = distanceToParentInjector;
	    }
	  },
	  _getDistanceToParentInjector: function _getDistanceToParentInjector(parent, current) {
	    return isPresent(parent) ? parent.distanceToParentInjector + 1 : 0;
	  },
	  _getParentProtoElementInjector: function _getParentProtoElementInjector(parent, current) {
	    if (isPresent(parent) && !current.isViewRoot) {
	      return parent.inheritedProtoElementInjector;
	    }
	    return null;
	  },
	  _createBinding: function _createBinding(d) {
	    assert.argumentTypes(d, DirectiveMetadata);
	    return assert.returnType(DirectiveBinding.createFromType(d.type, d.annotation), DirectiveBinding);
	  }
	}, {}, CompileStep);
	Object.defineProperty(ProtoElementInjectorBuilder.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	Object.defineProperty(ProtoElementInjectorBuilder.prototype._createBinding, "parameters", { get: function get() {
	    return [[DirectiveMetadata]];
	  } });
	//# sourceMappingURL=proto_element_injector_builder.js.map

	//# sourceMappingURL=./proto_element_injector_builder.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ElementBinderBuilder: { get: function get() {
	      return ElementBinderBuilder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_reflection_47_reflection__, $__angular2_47_change_95_detection__, $___46__46__47_directive_95_metadata__, $__compile_95_step__, $__compile_95_element__, $__compile_95_control__, $___46__46__47_string_95_utils__, $___46__46__47_property_95_setter_95_factory__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    int = $__1.int,
	    isPresent = $__1.isPresent,
	    isBlank = $__1.isBlank;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    List = $__2.List,
	    MapWrapper = $__2.MapWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }).reflector;
	var $__4 = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }),
	    Parser = $__4.Parser,
	    ProtoChangeDetector = $__4.ProtoChangeDetector;
	var DirectiveMetadata = ($___46__46__47_directive_95_metadata__ = __webpack_require__(52), $___46__46__47_directive_95_metadata__ && $___46__46__47_directive_95_metadata__.__esModule && $___46__46__47_directive_95_metadata__ || { "default": $___46__46__47_directive_95_metadata__ }).DirectiveMetadata;
	var CompileStep = ($__compile_95_step__ = __webpack_require__(70), $__compile_95_step__ && $__compile_95_step__.__esModule && $__compile_95_step__ || { "default": $__compile_95_step__ }).CompileStep;
	var CompileElement = ($__compile_95_element__ = __webpack_require__(71), $__compile_95_element__ && $__compile_95_element__.__esModule && $__compile_95_element__ || { "default": $__compile_95_element__ }).CompileElement;
	var CompileControl = ($__compile_95_control__ = __webpack_require__(74), $__compile_95_control__ && $__compile_95_control__.__esModule && $__compile_95_control__ || { "default": $__compile_95_control__ }).CompileControl;
	var dashCaseToCamelCase = ($___46__46__47_string_95_utils__ = __webpack_require__(73), $___46__46__47_string_95_utils__ && $___46__46__47_string_95_utils__.__esModule && $___46__46__47_string_95_utils__ || { "default": $___46__46__47_string_95_utils__ }).dashCaseToCamelCase;
	var setterFactory = ($___46__46__47_property_95_setter_95_factory__ = __webpack_require__(75), $___46__46__47_property_95_setter_95_factory__ && $___46__46__47_property_95_setter_95_factory__.__esModule && $___46__46__47_property_95_setter_95_factory__ || { "default": $___46__46__47_property_95_setter_95_factory__ }).setterFactory;
	var ElementBinderBuilder = function ElementBinderBuilder(parser) {
	  assert.argumentTypes(parser, Parser);
	  $traceurRuntime.superConstructor($ElementBinderBuilder).call(this);
	  this._parser = parser;
	};
	var $ElementBinderBuilder = ElementBinderBuilder;
	$traceurRuntime.createClass(ElementBinderBuilder, {
	  process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    var elementBinder = null;
	    var parentElementBinder = null;
	    var distanceToParentBinder = this._getDistanceToParentBinder(parent, current);
	    if (isPresent(parent)) {
	      parentElementBinder = parent.inheritedElementBinder;
	    }
	    if (current.hasBindings) {
	      var protoView = current.inheritedProtoView;
	      var protoInjectorWasBuilt = isBlank(parent) ? true : current.inheritedProtoElementInjector !== parent.inheritedProtoElementInjector;
	      var currentProtoElementInjector = protoInjectorWasBuilt ? current.inheritedProtoElementInjector : null;
	      elementBinder = protoView.bindElement(parentElementBinder, distanceToParentBinder, currentProtoElementInjector, current.componentDirective, current.viewportDirective);
	      current.distanceToParentBinder = 0;
	      if (isPresent(current.textNodeBindings)) {
	        this._bindTextNodes(protoView, current);
	      }
	      if (isPresent(current.propertyBindings)) {
	        this._bindElementProperties(protoView, current);
	      }
	      if (isPresent(current.eventBindings)) {
	        this._bindEvents(protoView, current);
	      }
	      if (isPresent(current.contentTagSelector)) {
	        elementBinder.contentTagSelector = current.contentTagSelector;
	      }
	      var directives = current.getAllDirectives();
	      this._bindDirectiveProperties(directives, current);
	      this._bindDirectiveEvents(directives, current);
	    } else if (isPresent(parent)) {
	      elementBinder = parentElementBinder;
	      current.distanceToParentBinder = distanceToParentBinder;
	    }
	    current.inheritedElementBinder = elementBinder;
	  },
	  _getDistanceToParentBinder: function _getDistanceToParentBinder(parent, current) {
	    return isPresent(parent) ? parent.distanceToParentBinder + 1 : 0;
	  },
	  _bindTextNodes: function _bindTextNodes(protoView, compileElement) {
	    MapWrapper.forEach(compileElement.textNodeBindings, function (expression, indexInParent) {
	      protoView.bindTextNode(indexInParent, expression);
	    });
	  },
	  _bindElementProperties: function _bindElementProperties(protoView, compileElement) {
	    MapWrapper.forEach(compileElement.propertyBindings, function (expression, property) {
	      var setterFn = setterFactory(property);
	      protoView.bindElementProperty(expression.ast, property, setterFn);
	    });
	  },
	  _bindEvents: function _bindEvents(protoView, compileElement) {
	    MapWrapper.forEach(compileElement.eventBindings, function (expression, eventName) {
	      protoView.bindEvent(eventName, expression);
	    });
	  },
	  _bindDirectiveEvents: function _bindDirectiveEvents(directives, compileElement) {
	    var $__11 = this;
	    assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata), compileElement, CompileElement);
	    for (var directiveIndex = 0; directiveIndex < directives.length; directiveIndex++) {
	      var directive = directives[directiveIndex];
	      var annotation = directive.annotation;
	      if (isBlank(annotation.events)) continue;
	      var protoView = compileElement.inheritedProtoView;
	      StringMapWrapper.forEach(annotation.events, function (action, eventName) {
	        var expression = $__11._parser.parseAction(action, compileElement.elementDescription);
	        protoView.bindEvent(eventName, expression, directiveIndex);
	      });
	    }
	  },
	  _bindDirectiveProperties: function _bindDirectiveProperties(directives, compileElement) {
	    var $__11 = this;
	    assert.argumentTypes(directives, assert.genericType(List, DirectiveMetadata), compileElement, CompileElement);
	    var protoView = compileElement.inheritedProtoView;
	    for (var directiveIndex = 0; directiveIndex < directives.length; directiveIndex++) {
	      var directive = ListWrapper.get(directives, directiveIndex);
	      var annotation = directive.annotation;
	      if (isBlank(annotation.bind)) continue;
	      StringMapWrapper.forEach(annotation.bind, function (bindConfig, dirProp) {
	        var pipes = $__11._splitBindConfig(bindConfig);
	        var elProp = ListWrapper.removeAt(pipes, 0);
	        var bindingAst = isPresent(compileElement.propertyBindings) ? MapWrapper.get(compileElement.propertyBindings, dashCaseToCamelCase(elProp)) : null;
	        if (isBlank(bindingAst)) {
	          var attributeValue = MapWrapper.get(compileElement.attrs(), elProp);
	          if (isPresent(attributeValue)) {
	            bindingAst = $__11._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
	          }
	        }
	        if (isPresent(bindingAst)) {
	          var fullExpAstWithBindPipes = $__11._parser.addPipes(bindingAst, pipes);
	          protoView.bindDirectiveProperty(directiveIndex, fullExpAstWithBindPipes, dirProp, reflector.setter(dashCaseToCamelCase(dirProp)));
	        }
	      });
	    }
	  },
	  _splitBindConfig: function _splitBindConfig(bindConfig) {
	    return ListWrapper.map(bindConfig.split('|'), function (s) {
	      return s.trim();
	    });
	  }
	}, {}, CompileStep);
	Object.defineProperty(ElementBinderBuilder, "parameters", { get: function get() {
	    return [[Parser]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype._bindDirectiveEvents, "parameters", { get: function get() {
	    return [[assert.genericType(List, DirectiveMetadata)], [CompileElement]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype._bindDirectiveProperties, "parameters", { get: function get() {
	    return [[assert.genericType(List, DirectiveMetadata)], [CompileElement]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype._splitBindConfig, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=element_binder_builder.js.map

	//# sourceMappingURL=./element_binder_builder.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  CssProcessor: { get: function get() {
	      return CssProcessor;
	    } },
	  CssTransformer: { get: function get() {
	      return CssTransformer;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__pipeline_47_compile_95_step__, $__pipeline_47_compile_95_element__, $__pipeline_47_compile_95_control__, $__shadow_95_dom_95_strategy__, $__directive_95_metadata__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var List = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).List;
	var CompileStep = ($__pipeline_47_compile_95_step__ = __webpack_require__(70), $__pipeline_47_compile_95_step__ && $__pipeline_47_compile_95_step__.__esModule && $__pipeline_47_compile_95_step__ || { "default": $__pipeline_47_compile_95_step__ }).CompileStep;
	var CompileElement = ($__pipeline_47_compile_95_element__ = __webpack_require__(71), $__pipeline_47_compile_95_element__ && $__pipeline_47_compile_95_element__.__esModule && $__pipeline_47_compile_95_element__ || { "default": $__pipeline_47_compile_95_element__ }).CompileElement;
	var CompileControl = ($__pipeline_47_compile_95_control__ = __webpack_require__(74), $__pipeline_47_compile_95_control__ && $__pipeline_47_compile_95_control__.__esModule && $__pipeline_47_compile_95_control__ || { "default": $__pipeline_47_compile_95_control__ }).CompileControl;
	var ShadowDomStrategy = ($__shadow_95_dom_95_strategy__ = __webpack_require__(64), $__shadow_95_dom_95_strategy__ && $__shadow_95_dom_95_strategy__.__esModule && $__shadow_95_dom_95_strategy__ || { "default": $__shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var DirectiveMetadata = ($__directive_95_metadata__ = __webpack_require__(52), $__directive_95_metadata__ && $__directive_95_metadata__.__esModule && $__directive_95_metadata__ || { "default": $__directive_95_metadata__ }).DirectiveMetadata;
	var CssProcessor = function CssProcessor(transformers) {
	  assert.argumentTypes(transformers, assert.genericType(List, CssTransformer));
	  this._transformers = transformers;
	};
	$traceurRuntime.createClass(CssProcessor, { getCompileStep: function getCompileStep(cmpMetadata, shadowDomStrategy, templateUrl) {
	    assert.argumentTypes(cmpMetadata, DirectiveMetadata, shadowDomStrategy, ShadowDomStrategy, templateUrl, assert.type.string);
	    var strategyStep = shadowDomStrategy.getStyleCompileStep(cmpMetadata, templateUrl);
	    return new _CssProcessorStep(strategyStep, this._transformers);
	  } }, {});
	Object.defineProperty(CssProcessor, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(CssProcessor, "parameters", { get: function get() {
	    return [[assert.genericType(List, CssTransformer)]];
	  } });
	Object.defineProperty(CssProcessor.prototype.getCompileStep, "parameters", { get: function get() {
	    return [[DirectiveMetadata], [ShadowDomStrategy], [assert.type.string]];
	  } });
	var CssTransformer = function CssTransformer() {
	  ;
	};
	$traceurRuntime.createClass(CssTransformer, { transform: function transform(styleElement) {} }, {});
	var _CssProcessorStep = function _CssProcessorStep(strategyStep, transformers) {
	  assert.argumentTypes(strategyStep, CompileStep, transformers, assert.genericType(List, CssTransformer));
	  $traceurRuntime.superConstructor($_CssProcessorStep).call(this);
	  this._strategyStep = strategyStep;
	  this._transformers = transformers;
	};
	var $_CssProcessorStep = _CssProcessorStep;
	$traceurRuntime.createClass(_CssProcessorStep, { process: function process(parent, current, control) {
	    assert.argumentTypes(parent, CompileElement, current, CompileElement, control, CompileControl);
	    if (DOM.tagName(current.element) == 'STYLE') {
	      current.ignoreBindings = true;
	      if (isPresent(this._transformers)) {
	        var styleEl = current.element;
	        for (var i = 0; i < this._transformers.length; i++) {
	          this._transformers[i].transform(styleEl);
	        }
	      }
	      if (isPresent(this._strategyStep)) {
	        this._strategyStep.process(parent, current, control);
	      }
	    }
	  } }, {}, CompileStep);
	Object.defineProperty(_CssProcessorStep, "parameters", { get: function get() {
	    return [[CompileStep], [assert.genericType(List, CssTransformer)]];
	  } });
	Object.defineProperty(_CssProcessorStep.prototype.process, "parameters", { get: function get() {
	    return [[CompileElement], [CompileElement], [CompileControl]];
	  } });
	//# sourceMappingURL=css_processor.js.map

	//# sourceMappingURL=./css_processor.map

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  TemplateLoader: { get: function get() {
	      return TemplateLoader;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_dom_47_dom_95_adapter__, $__xhr_47_xhr__, $__angular2_47_src_47_core_47_annotations_47_template__, $__url_95_resolver__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__2.isBlank,
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException,
	    stringify = $__2.stringify;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    Map = $__3.Map,
	    MapWrapper = $__3.MapWrapper,
	    StringMapWrapper = $__3.StringMapWrapper,
	    StringMap = $__3.StringMap;
	var DOM = ($__angular2_47_src_47_dom_47_dom_95_adapter__ = __webpack_require__(47), $__angular2_47_src_47_dom_47_dom_95_adapter__ && $__angular2_47_src_47_dom_47_dom_95_adapter__.__esModule && $__angular2_47_src_47_dom_47_dom_95_adapter__ || { "default": $__angular2_47_src_47_dom_47_dom_95_adapter__ }).DOM;
	var XHR = ($__xhr_47_xhr__ = __webpack_require__(67), $__xhr_47_xhr__ && $__xhr_47_xhr__.__esModule && $__xhr_47_xhr__ || { "default": $__xhr_47_xhr__ }).XHR;
	var Template = ($__angular2_47_src_47_core_47_annotations_47_template__ = __webpack_require__(44), $__angular2_47_src_47_core_47_annotations_47_template__ && $__angular2_47_src_47_core_47_annotations_47_template__.__esModule && $__angular2_47_src_47_core_47_annotations_47_template__ || { "default": $__angular2_47_src_47_core_47_annotations_47_template__ }).Template;
	var UrlResolver = ($__url_95_resolver__ = __webpack_require__(69), $__url_95_resolver__ && $__url_95_resolver__.__esModule && $__url_95_resolver__ || { "default": $__url_95_resolver__ }).UrlResolver;
	var TemplateLoader = function TemplateLoader(xhr, urlResolver) {
	  assert.argumentTypes(xhr, XHR, urlResolver, UrlResolver);
	  this._xhr = xhr;
	  this._urlResolver = urlResolver;
	  this._htmlCache = StringMapWrapper.create();
	  this._baseUrls = MapWrapper.create();
	  this._urlCache = MapWrapper.create();
	};
	$traceurRuntime.createClass(TemplateLoader, {
	  load: function load(template) {
	    assert.argumentTypes(template, Template);
	    if (isPresent(template.inline)) {
	      return DOM.createTemplate(template.inline);
	    }
	    if (isPresent(template.url)) {
	      var url = this.getTemplateUrl(template);
	      var promise = StringMapWrapper.get(this._htmlCache, url);
	      if (isBlank(promise)) {
	        promise = this._xhr.get(url).then(function (html) {
	          var template = DOM.createTemplate(html);
	          return template;
	        });
	        StringMapWrapper.set(this._htmlCache, url, promise);
	      }
	      return promise;
	    }
	    throw new BaseException('Templates should have either their url or inline property set');
	  },
	  setBaseUrl: function setBaseUrl(template, baseUrl) {
	    assert.argumentTypes(template, Template, baseUrl, assert.type.string);
	    MapWrapper.set(this._baseUrls, template, baseUrl);
	    MapWrapper["delete"](this._urlCache, template);
	  },
	  getTemplateUrl: function getTemplateUrl(template) {
	    assert.argumentTypes(template, Template);
	    if (!MapWrapper.contains(this._urlCache, template)) {
	      var baseUrl = MapWrapper.get(this._baseUrls, template);
	      if (isBlank(baseUrl)) {
	        throw new BaseException('The template base URL is not set');
	      }
	      var templateUrl;
	      if (isPresent(template.url)) {
	        templateUrl = this._urlResolver.resolve(baseUrl, template.url);
	      } else {
	        templateUrl = baseUrl;
	      }
	      MapWrapper.set(this._urlCache, template, templateUrl);
	    }
	    return MapWrapper.get(this._urlCache, template);
	  }
	}, {});
	Object.defineProperty(TemplateLoader, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(TemplateLoader, "parameters", { get: function get() {
	    return [[XHR], [UrlResolver]];
	  } });
	Object.defineProperty(TemplateLoader.prototype.load, "parameters", { get: function get() {
	    return [[Template]];
	  } });
	Object.defineProperty(TemplateLoader.prototype.setBaseUrl, "parameters", { get: function get() {
	    return [[Template], [assert.type.string]];
	  } });
	Object.defineProperty(TemplateLoader.prototype.getTemplateUrl, "parameters", { get: function get() {
	    return [[Template]];
	  } });
	//# sourceMappingURL=template_loader.js.map

	//# sourceMappingURL=./template_loader.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  TemplateResolver: { get: function get() {
	      return TemplateResolver;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_core_47_annotations_47_template__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_reflection_47_reflection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var Template = ($__angular2_47_src_47_core_47_annotations_47_template__ = __webpack_require__(44), $__angular2_47_src_47_core_47_annotations_47_template__ && $__angular2_47_src_47_core_47_annotations_47_template__.__esModule && $__angular2_47_src_47_core_47_annotations_47_template__ || { "default": $__angular2_47_src_47_core_47_annotations_47_template__ }).Template;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__3.Type,
	    stringify = $__3.stringify,
	    isBlank = $__3.isBlank,
	    BaseException = $__3.BaseException;
	var $__4 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    Map = $__4.Map,
	    MapWrapper = $__4.MapWrapper,
	    List = $__4.List,
	    ListWrapper = $__4.ListWrapper;
	var reflector = ($__angular2_47_src_47_reflection_47_reflection__ = __webpack_require__(13), $__angular2_47_src_47_reflection_47_reflection__ && $__angular2_47_src_47_reflection_47_reflection__.__esModule && $__angular2_47_src_47_reflection_47_reflection__ || { "default": $__angular2_47_src_47_reflection_47_reflection__ }).reflector;
	var TemplateResolver = function TemplateResolver() {
	  this._cache = MapWrapper.create();
	};
	$traceurRuntime.createClass(TemplateResolver, {
	  resolve: function resolve(component) {
	    assert.argumentTypes(component, Type);
	    var template = MapWrapper.get(this._cache, component);
	    if (isBlank(template)) {
	      template = this._resolve(component);
	      MapWrapper.set(this._cache, component, template);
	    }
	    return assert.returnType(template, Template);
	  },
	  _resolve: function _resolve(component) {
	    assert.argumentTypes(component, Type);
	    var annotations = reflector.annotations(component);
	    for (var i = 0; i < annotations.length; i++) {
	      var annotation = annotations[i];
	      if (annotation instanceof Template) {
	        return annotation;
	      }
	    }
	    throw new BaseException("No template found for " + stringify(component));
	  }
	}, {});
	Object.defineProperty(TemplateResolver, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(TemplateResolver.prototype.resolve, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	Object.defineProperty(TemplateResolver.prototype._resolve, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	//# sourceMappingURL=template_resolver.js.map

	//# sourceMappingURL=./template_resolver.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ComponentUrlMapper: { get: function get() {
	      return ComponentUrlMapper;
	    } },
	  RuntimeComponentUrlMapper: { get: function get() {
	      return RuntimeComponentUrlMapper;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__2.Type,
	    isPresent = $__2.isPresent;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    Map = $__3.Map,
	    MapWrapper = $__3.MapWrapper;
	var ComponentUrlMapper = function ComponentUrlMapper() {
	  ;
	};
	$traceurRuntime.createClass(ComponentUrlMapper, { getUrl: function getUrl(component) {
	    assert.argumentTypes(component, Type);
	    return assert.returnType('./', assert.type.string);
	  } }, {});
	Object.defineProperty(ComponentUrlMapper, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(ComponentUrlMapper.prototype.getUrl, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	var RuntimeComponentUrlMapper = function RuntimeComponentUrlMapper() {
	  $traceurRuntime.superConstructor($RuntimeComponentUrlMapper).call(this);
	  this._componentUrls = MapWrapper.create();
	};
	var $RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
	$traceurRuntime.createClass(RuntimeComponentUrlMapper, {
	  setComponentUrl: function setComponentUrl(component, url) {
	    assert.argumentTypes(component, Type, url, assert.type.string);
	    MapWrapper.set(this._componentUrls, component, url);
	  },
	  getUrl: function getUrl(component) {
	    assert.argumentTypes(component, Type);
	    var url = MapWrapper.get(this._componentUrls, component);
	    if (isPresent(url)) return assert.returnType(url, assert.type.string);
	    return assert.returnType($traceurRuntime.superGet(this, $RuntimeComponentUrlMapper.prototype, "getUrl").call(this, component), assert.type.string);
	  }
	}, {}, ComponentUrlMapper);
	Object.defineProperty(RuntimeComponentUrlMapper.prototype.setComponentUrl, "parameters", { get: function get() {
	    return [[Type], [assert.type.string]];
	  } });
	Object.defineProperty(RuntimeComponentUrlMapper.prototype.getUrl, "parameters", { get: function get() {
	    return [[Type]];
	  } });
	//# sourceMappingURL=component_url_mapper.js.map

	//# sourceMappingURL=./component_url_mapper.map

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  ExceptionHandler: { get: function get() {
	      return ExceptionHandler;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__1.isPresent,
	    print = $__1.print;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__2.ListWrapper,
	    isListLikeIterable = $__2.isListLikeIterable;
	var ExceptionHandler = function ExceptionHandler() {
	  ;
	};
	$traceurRuntime.createClass(ExceptionHandler, { call: function call(error) {
	    var stackTrace = arguments[1] !== void 0 ? arguments[1] : null;
	    var reason = arguments[2] !== void 0 ? arguments[2] : null;
	    var longStackTrace = isListLikeIterable(stackTrace) ? ListWrapper.join(stackTrace, "\n\n") : stackTrace;
	    var reasonStr = isPresent(reason) ? "\n" + reason : '';
	    print("" + error + reasonStr + "\nSTACKTRACE:\n" + longStackTrace);
	  } }, {});
	Object.defineProperty(ExceptionHandler, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	//# sourceMappingURL=exception_handler.js.map

	//# sourceMappingURL=./exception_handler.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  LifeCycle: { get: function get() {
	      return LifeCycle;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_change_95_detection__, $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__, $__angular2_47_src_47_core_47_exception_95_handler__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var ChangeDetector = ($__angular2_47_change_95_detection__ = __webpack_require__(2), $__angular2_47_change_95_detection__ && $__angular2_47_change_95_detection__.__esModule && $__angular2_47_change_95_detection__ || { "default": $__angular2_47_change_95_detection__ }).ChangeDetector;
	var VmTurnZone = ($__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ = __webpack_require__(59), $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__.__esModule && $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ || { "default": $__angular2_47_src_47_core_47_zone_47_vm_95_turn_95_zone__ }).VmTurnZone;
	var ExceptionHandler = ($__angular2_47_src_47_core_47_exception_95_handler__ = __webpack_require__(92), $__angular2_47_src_47_core_47_exception_95_handler__ && $__angular2_47_src_47_core_47_exception_95_handler__.__esModule && $__angular2_47_src_47_core_47_exception_95_handler__ || { "default": $__angular2_47_src_47_core_47_exception_95_handler__ }).ExceptionHandler;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var LifeCycle = function LifeCycle(exceptionHandler) {
	  var changeDetector = arguments[1] !== void 0 ? arguments[1] : null;
	  var enforceNoNewChanges = arguments[2] !== void 0 ? arguments[2] : false;
	  assert.argumentTypes(exceptionHandler, ExceptionHandler, changeDetector, ChangeDetector, enforceNoNewChanges, assert.type.boolean);
	  this._errorHandler = function (exception, stackTrace) {
	    exceptionHandler.call(exception, stackTrace);
	    throw exception;
	  };
	  this._changeDetector = changeDetector;
	  this._enforceNoNewChanges = enforceNoNewChanges;
	};
	$traceurRuntime.createClass(LifeCycle, {
	  registerWith: function registerWith(zone) {
	    var changeDetector = arguments[1] !== void 0 ? arguments[1] : null;
	    var $__6 = this;
	    if (isPresent(changeDetector)) {
	      this._changeDetector = changeDetector;
	    }
	    zone.initCallbacks({
	      onErrorHandler: this._errorHandler,
	      onTurnDone: function onTurnDone() {
	        return $__6.tick();
	      }
	    });
	  },
	  tick: function tick() {
	    this._changeDetector.detectChanges();
	    if (this._enforceNoNewChanges) {
	      this._changeDetector.checkNoChanges();
	    }
	  }
	}, {});
	Object.defineProperty(LifeCycle, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(LifeCycle, "parameters", { get: function get() {
	    return [[ExceptionHandler], [ChangeDetector], [assert.type.boolean]];
	  } });
	Object.defineProperty(LifeCycle.prototype.registerWith, "parameters", { get: function get() {
	    return [[VmTurnZone], [ChangeDetector]];
	  } });
	//# sourceMappingURL=life_cycle.js.map

	//# sourceMappingURL=./life_cycle.map

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  XHRImpl: { get: function get() {
	      return XHRImpl;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_async__, $__xhr__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Injectable = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Injectable;
	var $__2 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Promise = $__2.Promise,
	    PromiseWrapper = $__2.PromiseWrapper;
	var XHR = ($__xhr__ = __webpack_require__(67), $__xhr__ && $__xhr__.__esModule && $__xhr__ || { "default": $__xhr__ }).XHR;
	var XHRImpl = function XHRImpl() {
	  $traceurRuntime.superConstructor($XHRImpl).apply(this, arguments);
	  ;
	};
	var $XHRImpl = XHRImpl;
	$traceurRuntime.createClass(XHRImpl, { get: function get(url) {
	    assert.argumentTypes(url, assert.type.string);
	    var completer = PromiseWrapper.completer();
	    var xhr = new XMLHttpRequest();
	    xhr.open('GET', url, true);
	    xhr.responseType = 'text';
	    xhr.onload = function () {
	      var status = xhr.status;
	      if (200 <= status && status <= 300) {
	        completer.resolve(xhr.responseText);
	      } else {
	        completer.reject("Failed to load " + url);
	      }
	    };
	    xhr.onerror = function () {
	      completer.reject("Failed to load " + url);
	    };
	    xhr.send();
	    return assert.returnType(completer.promise, assert.genericType(Promise, assert.type.string));
	  } }, {}, XHR);
	Object.defineProperty(XHRImpl, "annotations", { get: function get() {
	    return [new Injectable()];
	  } });
	Object.defineProperty(XHRImpl.prototype.get, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=xhr_impl.es6.map

	//# sourceMappingURL=./xhr_impl.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  HammerGesturesPlugin: { get: function get() {
	      return HammerGesturesPlugin;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__hammer_95_common__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var HammerGesturesPluginCommon = ($__hammer_95_common__ = __webpack_require__(96), $__hammer_95_common__ && $__hammer_95_common__.__esModule && $__hammer_95_common__ || { "default": $__hammer_95_common__ }).HammerGesturesPluginCommon;
	var $__2 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__2.isPresent,
	    BaseException = $__2.BaseException;
	var HammerGesturesPlugin = function HammerGesturesPlugin() {
	  $traceurRuntime.superConstructor($HammerGesturesPlugin).call(this);
	};
	var $HammerGesturesPlugin = HammerGesturesPlugin;
	$traceurRuntime.createClass(HammerGesturesPlugin, {
	  supports: function supports(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    if (!$traceurRuntime.superGet(this, $HammerGesturesPlugin.prototype, "supports").call(this, eventName)) return assert.returnType(false, assert.type.boolean);
	    if (!isPresent(window.Hammer)) {
	      throw new BaseException("Hammer.js is not loaded, can not bind " + eventName + " event");
	    }
	    return assert.returnType(true, assert.type.boolean);
	  },
	  addEventListener: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	    assert.argumentTypes(element, assert.type.any, eventName, assert.type.string, handler, Function, shouldSupportBubble, assert.type.boolean);
	    if (shouldSupportBubble) throw new BaseException('Hammer.js plugin does not support bubbling gestures.');
	    var zone = this.manager.getZone();
	    eventName = eventName.toLowerCase();
	    zone.runOutsideAngular(function () {
	      var mc = new Hammer(element);
	      mc.get('pinch').set({ enable: true });
	      mc.get('rotate').set({ enable: true });
	      mc.on(eventName, function (eventObj) {
	        zone.run(function () {
	          handler(eventObj);
	        });
	      });
	    });
	  }
	}, {}, HammerGesturesPluginCommon);
	Object.defineProperty(HammerGesturesPlugin.prototype.supports, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(HammerGesturesPlugin.prototype.addEventListener, "parameters", { get: function get() {
	    return [[], [assert.type.string], [Function], [assert.type.boolean]];
	  } });
	//# sourceMappingURL=hammer_gestures.es6.map

	//# sourceMappingURL=./hammer_gestures.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  HammerGesturesPluginCommon: { get: function get() {
	      return HammerGesturesPluginCommon;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__event_95_manager__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var EventManagerPlugin = ($__event_95_manager__ = __webpack_require__(58), $__event_95_manager__ && $__event_95_manager__.__esModule && $__event_95_manager__ || { "default": $__event_95_manager__ }).EventManagerPlugin;
	var StringMapWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).StringMapWrapper;
	var _eventNames = {
	  'pan': true,
	  'panstart': true,
	  'panmove': true,
	  'panend': true,
	  'pancancel': true,
	  'panleft': true,
	  'panright': true,
	  'panup': true,
	  'pandown': true,
	  'pinch': true,
	  'pinchstart': true,
	  'pinchmove': true,
	  'pinchend': true,
	  'pinchcancel': true,
	  'pinchin': true,
	  'pinchout': true,
	  'press': true,
	  'pressup': true,
	  'rotate': true,
	  'rotatestart': true,
	  'rotatemove': true,
	  'rotateend': true,
	  'rotatecancel': true,
	  'swipe': true,
	  'swipeleft': true,
	  'swiperight': true,
	  'swipeup': true,
	  'swipedown': true,
	  'tap': true
	};
	var HammerGesturesPluginCommon = function HammerGesturesPluginCommon() {
	  $traceurRuntime.superConstructor($HammerGesturesPluginCommon).call(this);
	};
	var $HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	$traceurRuntime.createClass(HammerGesturesPluginCommon, { supports: function supports(eventName) {
	    assert.argumentTypes(eventName, assert.type.string);
	    eventName = eventName.toLowerCase();
	    return assert.returnType(StringMapWrapper.contains(_eventNames, eventName), assert.type.boolean);
	  } }, {}, EventManagerPlugin);
	Object.defineProperty(HammerGesturesPluginCommon.prototype.supports, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	//# sourceMappingURL=hammer_common.js.map

	//# sourceMappingURL=./hammer_common.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  PrivateComponentLoader: { get: function get() {
	      return PrivateComponentLoader;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__compiler__, $__shadow_95_dom_95_strategy__, $__angular2_47_src_47_core_47_events_47_event_95_manager__, $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__private_95_component_95_location__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Compiler = ($__compiler__ = __webpack_require__(49), $__compiler__ && $__compiler__.__esModule && $__compiler__ || { "default": $__compiler__ }).Compiler;
	var ShadowDomStrategy = ($__shadow_95_dom_95_strategy__ = __webpack_require__(64), $__shadow_95_dom_95_strategy__ && $__shadow_95_dom_95_strategy__.__esModule && $__shadow_95_dom_95_strategy__ || { "default": $__shadow_95_dom_95_strategy__ }).ShadowDomStrategy;
	var EventManager = ($__angular2_47_src_47_core_47_events_47_event_95_manager__ = __webpack_require__(58), $__angular2_47_src_47_core_47_events_47_event_95_manager__ && $__angular2_47_src_47_core_47_events_47_event_95_manager__.__esModule && $__angular2_47_src_47_core_47_events_47_event_95_manager__ || { "default": $__angular2_47_src_47_core_47_events_47_event_95_manager__ }).EventManager;
	var DirectiveMetadataReader = ($__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__ = __webpack_require__(50), $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__ && $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__.__esModule && $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__ || { "default": $__angular2_47_src_47_core_47_compiler_47_directive_95_metadata_95_reader__ }).DirectiveMetadataReader;
	var Component = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Component;
	var PrivateComponentLocation = ($__private_95_component_95_location__ = __webpack_require__(63), $__private_95_component_95_location__ && $__private_95_component_95_location__.__esModule && $__private_95_component_95_location__ || { "default": $__private_95_component_95_location__ }).PrivateComponentLocation;
	var $__7 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    Type = $__7.Type,
	    stringify = $__7.stringify,
	    BaseException = $__7.BaseException;
	var PrivateComponentLoader = function PrivateComponentLoader(compiler, shadowDomStrategy, eventManager, directiveMetadataReader) {
	  assert.argumentTypes(compiler, Compiler, shadowDomStrategy, ShadowDomStrategy, eventManager, EventManager, directiveMetadataReader, DirectiveMetadataReader);
	  this.compiler = compiler;
	  this.shadowDomStrategy = shadowDomStrategy;
	  this.eventManager = eventManager;
	  this.directiveMetadataReader = directiveMetadataReader;
	};
	$traceurRuntime.createClass(PrivateComponentLoader, { load: function load(type, location) {
	    var $__8 = this;
	    assert.argumentTypes(type, Type, location, PrivateComponentLocation);
	    var annotation = this.directiveMetadataReader.read(type).annotation;
	    if (!(annotation instanceof Component)) {
	      throw new BaseException("Could not load '" + stringify(type) + "' because it is not a component.");
	    }
	    return this.compiler.compile(type).then(function (componentProtoView) {
	      location.createComponent(type, annotation, componentProtoView, $__8.eventManager, $__8.shadowDomStrategy);
	    });
	  } }, {});
	Object.defineProperty(PrivateComponentLoader, "parameters", { get: function get() {
	    return [[Compiler], [ShadowDomStrategy], [EventManager], [DirectiveMetadataReader]];
	  } });
	Object.defineProperty(PrivateComponentLoader.prototype.load, "parameters", { get: function get() {
	    return [[Type], [PrivateComponentLocation]];
	  } });
	//# sourceMappingURL=private_component_loader.js.map

	//# sourceMappingURL=./private_component_loader.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__src_47_core_47_annotations_47_annotations__;
	var $__src_47_core_47_annotations_47_annotations__ = ($__src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__src_47_core_47_annotations_47_annotations__ && $__src_47_core_47_annotations_47_annotations__.__esModule && $__src_47_core_47_annotations_47_annotations__ || { "default": $__src_47_core_47_annotations_47_annotations__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__src_47_core_47_annotations_47_annotations__);
	//# sourceMappingURL=annotations.js.map

	//# sourceMappingURL=./annotations.map

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__src_47_directives_47_for__, $__src_47_directives_47_if__, $__src_47_directives_47_non_95_bindable__, $__src_47_directives_47_switch__;
	var $__src_47_directives_47_for__ = ($__src_47_directives_47_for__ = __webpack_require__(100), $__src_47_directives_47_for__ && $__src_47_directives_47_for__.__esModule && $__src_47_directives_47_for__ || { "default": $__src_47_directives_47_for__ });
	var $__src_47_directives_47_if__ = ($__src_47_directives_47_if__ = __webpack_require__(101), $__src_47_directives_47_if__ && $__src_47_directives_47_if__.__esModule && $__src_47_directives_47_if__ || { "default": $__src_47_directives_47_if__ });
	var $__src_47_directives_47_non_95_bindable__ = ($__src_47_directives_47_non_95_bindable__ = __webpack_require__(102), $__src_47_directives_47_non_95_bindable__ && $__src_47_directives_47_non_95_bindable__.__esModule && $__src_47_directives_47_non_95_bindable__ || { "default": $__src_47_directives_47_non_95_bindable__ });
	var $__src_47_directives_47_switch__ = ($__src_47_directives_47_switch__ = __webpack_require__(103), $__src_47_directives_47_switch__ && $__src_47_directives_47_switch__.__esModule && $__src_47_directives_47_switch__ || { "default": $__src_47_directives_47_switch__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__src_47_directives_47_for__, $__src_47_directives_47_if__, $__src_47_directives_47_non_95_bindable__, $__src_47_directives_47_switch__);
	//# sourceMappingURL=directives.js.map

	//# sourceMappingURL=./directives.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  For: { get: function get() {
	      return For;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_src_47_core_47_compiler_47_view_95_container__, $__angular2_47_src_47_core_47_compiler_47_view__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Viewport = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Viewport;
	var ViewContainer = ($__angular2_47_src_47_core_47_compiler_47_view_95_container__ = __webpack_require__(57), $__angular2_47_src_47_core_47_compiler_47_view_95_container__ && $__angular2_47_src_47_core_47_compiler_47_view_95_container__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view_95_container__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view_95_container__ }).ViewContainer;
	var View = ($__angular2_47_src_47_core_47_compiler_47_view__ = __webpack_require__(53), $__angular2_47_src_47_core_47_compiler_47_view__ && $__angular2_47_src_47_core_47_compiler_47_view__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view__ }).View;
	var $__4 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__4.isPresent,
	    isBlank = $__4.isBlank;
	var ListWrapper = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }).ListWrapper;
	var For = function For(viewContainer) {
	  assert.argumentTypes(viewContainer, ViewContainer);
	  this.viewContainer = viewContainer;
	};
	var $For = For;
	$traceurRuntime.createClass(For, Object.defineProperties({
	  perViewChange: function perViewChange(view, record) {
	    view.setLocal('\$implicit', record.item);
	    view.setLocal('index', record.currentIndex);
	  }
	}, {
	  iterableChanges: {
	    set: function set(changes) {
	      if (isBlank(changes)) {
	        this.viewContainer.clear();
	        return;
	      }
	      var recordViewTuples = [];
	      changes.forEachRemovedItem(function (removedRecord) {
	        return ListWrapper.push(recordViewTuples, new RecordViewTuple(removedRecord, null));
	      });
	      changes.forEachMovedItem(function (movedRecord) {
	        return ListWrapper.push(recordViewTuples, new RecordViewTuple(movedRecord, null));
	      });
	      var insertTuples = $For.bulkRemove(recordViewTuples, this.viewContainer);
	      changes.forEachAddedItem(function (addedRecord) {
	        return ListWrapper.push(insertTuples, new RecordViewTuple(addedRecord, null));
	      });
	      $For.bulkInsert(insertTuples, this.viewContainer);
	      for (var i = 0; i < insertTuples.length; i++) {
	        this.perViewChange(insertTuples[i].view, insertTuples[i].record);
	      }
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {
	  bulkRemove: function bulkRemove(tuples, viewContainer) {
	    tuples.sort(function (a, b) {
	      return a.record.previousIndex - b.record.previousIndex;
	    });
	    var movedTuples = [];
	    for (var i = tuples.length - 1; i >= 0; i--) {
	      var tuple = tuples[i];
	      if (isPresent(tuple.record.currentIndex)) {
	        tuple.view = viewContainer.detach(tuple.record.previousIndex);
	        ListWrapper.push(movedTuples, tuple);
	      } else {
	        viewContainer.remove(tuple.record.previousIndex);
	      }
	    }
	    return movedTuples;
	  },
	  bulkInsert: function bulkInsert(tuples, viewContainer) {
	    tuples.sort(function (a, b) {
	      return a.record.currentIndex - b.record.currentIndex;
	    });
	    for (var i = 0; i < tuples.length; i++) {
	      var tuple = tuples[i];
	      if (isPresent(tuple.view)) {
	        viewContainer.insert(tuple.view, tuple.record.currentIndex);
	      } else {
	        tuple.view = viewContainer.create(tuple.record.currentIndex);
	      }
	    }
	    return tuples;
	  }
	});
	Object.defineProperty(For, "annotations", { get: function get() {
	    return [new Viewport({
	      selector: '[for][of]',
	      bind: { 'iterableChanges': 'of | iterableDiff' }
	    })];
	  } });
	Object.defineProperty(For, "parameters", { get: function get() {
	    return [[ViewContainer]];
	  } });
	var RecordViewTuple = function RecordViewTuple(record, view) {
	  this.record = record;
	  this.view = view;
	};
	$traceurRuntime.createClass(RecordViewTuple, {}, {});
	//# sourceMappingURL=for.js.map

	//# sourceMappingURL=./for.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  If: { get: function get() {
	      return If;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_src_47_core_47_compiler_47_view_95_container__, $__angular2_47_src_47_facade_47_lang__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Viewport = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Viewport;
	var ViewContainer = ($__angular2_47_src_47_core_47_compiler_47_view_95_container__ = __webpack_require__(57), $__angular2_47_src_47_core_47_compiler_47_view_95_container__ && $__angular2_47_src_47_core_47_compiler_47_view_95_container__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view_95_container__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view_95_container__ }).ViewContainer;
	var isBlank = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isBlank;
	var If = function If(viewContainer) {
	  assert.argumentTypes(viewContainer, ViewContainer);
	  this.viewContainer = viewContainer;
	  this.prevCondition = null;
	};
	$traceurRuntime.createClass(If, Object.defineProperties({}, {
	  condition: {
	    set: function set(newCondition) {
	      if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	        this.prevCondition = true;
	        this.viewContainer.create();
	      } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	        this.prevCondition = false;
	        this.viewContainer.clear();
	      }
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(If, "annotations", { get: function get() {
	    return [new Viewport({
	      selector: '[if]',
	      bind: { 'condition': 'if' }
	    })];
	  } });
	Object.defineProperty(If, "parameters", { get: function get() {
	    return [[ViewContainer]];
	  } });
	//# sourceMappingURL=if.js.map

	//# sourceMappingURL=./if.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  NonBindable: { get: function get() {
	      return NonBindable;
	    } },
	  __esModule: { value: true }
	});
	var $__angular2_47_src_47_core_47_annotations_47_annotations__;
	var Decorator = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }).Decorator;
	var NonBindable = function NonBindable() {
	  ;
	};
	$traceurRuntime.createClass(NonBindable, {}, {});
	Object.defineProperty(NonBindable, "annotations", { get: function get() {
	    return [new Decorator({
	      selector: '[non-bindable]',
	      compileChildren: false
	    })];
	  } });
	//# sourceMappingURL=non_bindable.js.map

	//# sourceMappingURL=./non_bindable.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Switch: { get: function get() {
	      return Switch;
	    } },
	  SwitchWhen: { get: function get() {
	      return SwitchWhen;
	    } },
	  SwitchDefault: { get: function get() {
	      return SwitchDefault;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_core_47_annotations_47_annotations__, $__angular2_47_src_47_core_47_compiler_47_view_95_container__, $__angular2_47_src_47_core_47_dom_47_element__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_core_47_annotations_47_visibility__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_core_47_annotations_47_annotations__ = __webpack_require__(51), $__angular2_47_src_47_core_47_annotations_47_annotations__ && $__angular2_47_src_47_core_47_annotations_47_annotations__.__esModule && $__angular2_47_src_47_core_47_annotations_47_annotations__ || { "default": $__angular2_47_src_47_core_47_annotations_47_annotations__ }),
	    Decorator = $__1.Decorator,
	    Viewport = $__1.Viewport;
	var ViewContainer = ($__angular2_47_src_47_core_47_compiler_47_view_95_container__ = __webpack_require__(57), $__angular2_47_src_47_core_47_compiler_47_view_95_container__ && $__angular2_47_src_47_core_47_compiler_47_view_95_container__.__esModule && $__angular2_47_src_47_core_47_compiler_47_view_95_container__ || { "default": $__angular2_47_src_47_core_47_compiler_47_view_95_container__ }).ViewContainer;
	var NgElement = ($__angular2_47_src_47_core_47_dom_47_element__ = __webpack_require__(62), $__angular2_47_src_47_core_47_dom_47_element__ && $__angular2_47_src_47_core_47_dom_47_element__.__esModule && $__angular2_47_src_47_core_47_dom_47_element__ || { "default": $__angular2_47_src_47_core_47_dom_47_element__ }).NgElement;
	var $__4 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isPresent = $__4.isPresent,
	    isBlank = $__4.isBlank,
	    normalizeBlank = $__4.normalizeBlank;
	var $__5 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    ListWrapper = $__5.ListWrapper,
	    List = $__5.List,
	    MapWrapper = $__5.MapWrapper,
	    Map = $__5.Map;
	var Parent = ($__angular2_47_src_47_core_47_annotations_47_visibility__ = __webpack_require__(42), $__angular2_47_src_47_core_47_annotations_47_visibility__ && $__angular2_47_src_47_core_47_annotations_47_visibility__.__esModule && $__angular2_47_src_47_core_47_annotations_47_visibility__ || { "default": $__angular2_47_src_47_core_47_annotations_47_visibility__ }).Parent;
	var Switch = function Switch() {
	  this._valueViewContainers = MapWrapper.create();
	  this._activeViewContainers = ListWrapper.create();
	  this._useDefault = false;
	};
	$traceurRuntime.createClass(Switch, Object.defineProperties({
	  _onWhenValueChanged: function _onWhenValueChanged(oldWhen, newWhen, viewContainer) {
	    assert.argumentTypes(oldWhen, assert.type.any, newWhen, assert.type.any, viewContainer, ViewContainer);
	    this._deregisterViewContainer(oldWhen, viewContainer);
	    this._registerViewContainer(newWhen, viewContainer);
	    if (oldWhen === this._switchValue) {
	      viewContainer.remove();
	      ListWrapper.remove(this._activeViewContainers, viewContainer);
	    } else if (newWhen === this._switchValue) {
	      if (this._useDefault) {
	        this._useDefault = false;
	        this._emptyAllActiveViewContainers();
	      }
	      viewContainer.create();
	      ListWrapper.push(this._activeViewContainers, viewContainer);
	    }
	    if (this._activeViewContainers.length === 0 && !this._useDefault) {
	      this._useDefault = true;
	      this._activateViewContainers(MapWrapper.get(this._valueViewContainers, _whenDefault));
	    }
	  },
	  _emptyAllActiveViewContainers: function _emptyAllActiveViewContainers() {
	    var activeContainers = this._activeViewContainers;
	    for (var i = 0; i < activeContainers.length; i++) {
	      activeContainers[i].remove();
	    }
	    this._activeViewContainers = ListWrapper.create();
	  },
	  _activateViewContainers: function _activateViewContainers(containers) {
	    assert.argumentTypes(containers, assert.genericType(List, ViewContainer));
	    if (isPresent(containers)) {
	      for (var i = 0; i < containers.length; i++) {
	        containers[i].create();
	      }
	      this._activeViewContainers = containers;
	    }
	  },
	  _registerViewContainer: function _registerViewContainer(value, container) {
	    assert.argumentTypes(value, assert.type.any, container, ViewContainer);
	    var containers = MapWrapper.get(this._valueViewContainers, value);
	    if (isBlank(containers)) {
	      containers = ListWrapper.create();
	      MapWrapper.set(this._valueViewContainers, value, containers);
	    }
	    ListWrapper.push(containers, container);
	  },
	  _deregisterViewContainer: function _deregisterViewContainer(value, container) {
	    assert.argumentTypes(value, assert.type.any, container, ViewContainer);
	    if (value == _whenDefault) return;
	    var containers = MapWrapper.get(this._valueViewContainers, value);
	    if (containers.length == 1) {
	      MapWrapper["delete"](this._valueViewContainers, value);
	    } else {
	      ListWrapper.remove(containers, container);
	    }
	  }
	}, {
	  value: {
	    set: function set(value) {
	      this._emptyAllActiveViewContainers();
	      this._useDefault = false;
	      var containers = MapWrapper.get(this._valueViewContainers, value);
	      if (isBlank(containers)) {
	        this._useDefault = true;
	        containers = normalizeBlank(MapWrapper.get(this._valueViewContainers, _whenDefault));
	      }
	      this._activateViewContainers(containers);
	      this._switchValue = value;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(Switch, "annotations", { get: function get() {
	    return [new Decorator({
	      selector: '[switch]',
	      bind: { 'value': 'switch' }
	    })];
	  } });
	Object.defineProperty(Switch.prototype._onWhenValueChanged, "parameters", { get: function get() {
	    return [[], [], [ViewContainer]];
	  } });
	Object.defineProperty(Switch.prototype._activateViewContainers, "parameters", { get: function get() {
	    return [[assert.genericType(List, ViewContainer)]];
	  } });
	Object.defineProperty(Switch.prototype._registerViewContainer, "parameters", { get: function get() {
	    return [[], [ViewContainer]];
	  } });
	Object.defineProperty(Switch.prototype._deregisterViewContainer, "parameters", { get: function get() {
	    return [[], [ViewContainer]];
	  } });
	var SwitchWhen = function SwitchWhen(el, viewContainer, sswitch) {
	  assert.argumentTypes(el, NgElement, viewContainer, ViewContainer, sswitch, Switch);
	  this._value = _whenDefault;
	  this._switch = sswitch;
	  this._viewContainer = viewContainer;
	};
	$traceurRuntime.createClass(SwitchWhen, Object.defineProperties({}, {
	  when: {
	    set: function set(value) {
	      this._switch._onWhenValueChanged(this._value, value, this._viewContainer);
	      this._value = value;
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(SwitchWhen, "annotations", { get: function get() {
	    return [new Viewport({
	      selector: '[switch-when]',
	      bind: { 'when': 'switch-when' }
	    })];
	  } });
	Object.defineProperty(SwitchWhen, "parameters", { get: function get() {
	    return [[NgElement], [ViewContainer], [Switch, new Parent()]];
	  } });
	var SwitchDefault = function SwitchDefault(viewContainer, sswitch) {
	  assert.argumentTypes(viewContainer, ViewContainer, sswitch, Switch);
	  sswitch._registerViewContainer(_whenDefault, viewContainer);
	};
	$traceurRuntime.createClass(SwitchDefault, {}, {});
	Object.defineProperty(SwitchDefault, "annotations", { get: function get() {
	    return [new Viewport({ selector: '[switch-default]' })];
	  } });
	Object.defineProperty(SwitchDefault, "parameters", { get: function get() {
	    return [[ViewContainer], [Switch, new Parent()]];
	  } });
	var _whenDefault = new Object();
	//# sourceMappingURL=switch.js.map

	//# sourceMappingURL=./switch.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var $__src_47_forms_47_model__, $__src_47_forms_47_directives__, $__src_47_forms_47_validators__, $__src_47_forms_47_validator_95_directives__, $__src_47_forms_47_form_95_builder__;
	var $__src_47_forms_47_model__ = ($__src_47_forms_47_model__ = __webpack_require__(105), $__src_47_forms_47_model__ && $__src_47_forms_47_model__.__esModule && $__src_47_forms_47_model__ || { "default": $__src_47_forms_47_model__ });
	var $__src_47_forms_47_directives__ = ($__src_47_forms_47_directives__ = __webpack_require__(107), $__src_47_forms_47_directives__ && $__src_47_forms_47_directives__.__esModule && $__src_47_forms_47_directives__ || { "default": $__src_47_forms_47_directives__ });
	var $__src_47_forms_47_validators__ = ($__src_47_forms_47_validators__ = __webpack_require__(106), $__src_47_forms_47_validators__ && $__src_47_forms_47_validators__.__esModule && $__src_47_forms_47_validators__ || { "default": $__src_47_forms_47_validators__ });
	var $__src_47_forms_47_validator_95_directives__ = ($__src_47_forms_47_validator_95_directives__ = __webpack_require__(108), $__src_47_forms_47_validator_95_directives__ && $__src_47_forms_47_validator_95_directives__.__esModule && $__src_47_forms_47_validator_95_directives__ || { "default": $__src_47_forms_47_validator_95_directives__ });
	var $__src_47_forms_47_form_95_builder__ = ($__src_47_forms_47_form_95_builder__ = __webpack_require__(109), $__src_47_forms_47_form_95_builder__ && $__src_47_forms_47_form_95_builder__.__esModule && $__src_47_forms_47_form_95_builder__ || { "default": $__src_47_forms_47_form_95_builder__ });
	module.exports = $traceurRuntime.exportStar({ __esModule: true }, $__src_47_forms_47_model__, $__src_47_forms_47_directives__, $__src_47_forms_47_validators__, $__src_47_forms_47_validator_95_directives__, $__src_47_forms_47_form_95_builder__);
	//# sourceMappingURL=forms.js.map

	//# sourceMappingURL=./forms.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  VALID: { get: function get() {
	      return VALID;
	    } },
	  INVALID: { get: function get() {
	      return INVALID;
	    } },
	  AbstractControl: { get: function get() {
	      return AbstractControl;
	    } },
	  Control: { get: function get() {
	      return Control;
	    } },
	  ControlGroup: { get: function get() {
	      return ControlGroup;
	    } },
	  ControlArray: { get: function get() {
	      return ControlArray;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_async__, $__angular2_47_src_47_facade_47_collection__, $__validators__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_async__ = __webpack_require__(19), $__angular2_47_src_47_facade_47_async__ && $__angular2_47_src_47_facade_47_async__.__esModule && $__angular2_47_src_47_facade_47_async__ || { "default": $__angular2_47_src_47_facade_47_async__ }),
	    Observable = $__2.Observable,
	    ObservableController = $__2.ObservableController,
	    ObservableWrapper = $__2.ObservableWrapper;
	var $__3 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    StringMap = $__3.StringMap,
	    StringMapWrapper = $__3.StringMapWrapper,
	    ListWrapper = $__3.ListWrapper,
	    List = $__3.List;
	var Validators = ($__validators__ = __webpack_require__(106), $__validators__ && $__validators__.__esModule && $__validators__ || { "default": $__validators__ }).Validators;
	var VALID = "VALID";
	var INVALID = "INVALID";
	var AbstractControl = function AbstractControl(validator) {
	  assert.argumentTypes(validator, Function);
	  this.validator = validator;
	  this._pristine = true;
	};
	$traceurRuntime.createClass(AbstractControl, Object.defineProperties({
	  setParent: function setParent(parent) {
	    this._parent = parent;
	  },
	  _updateParent: function _updateParent() {
	    if (isPresent(this._parent)) {
	      this._parent._updateValue();
	    }
	  }
	}, {
	  value: {
	    get: function get() {
	      return assert.returnType(this._value, assert.type.any);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  status: {
	    get: function get() {
	      return assert.returnType(this._status, assert.type.string);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  valid: {
	    get: function get() {
	      return assert.returnType(this._status === VALID, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  errors: {
	    get: function get() {
	      return assert.returnType(this._errors, StringMap);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  pristine: {
	    get: function get() {
	      return assert.returnType(this._pristine, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  },
	  dirty: {
	    get: function get() {
	      return assert.returnType(!this.pristine, assert.type.boolean);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(AbstractControl, "parameters", { get: function get() {
	    return [[Function]];
	  } });
	var Control = function Control(value) {
	  var validator = arguments[1] !== void 0 ? arguments[1] : Validators.nullValidator;
	  assert.argumentTypes(value, assert.type.any, validator, Function);
	  $traceurRuntime.superConstructor($Control).call(this, validator);
	  this._setValueErrorsStatus(value);
	  this._valueChangesController = ObservableWrapper.createController();
	  this.valueChanges = ObservableWrapper.createObservable(this._valueChangesController);
	};
	var $Control = Control;
	$traceurRuntime.createClass(Control, {
	  updateValue: function updateValue(value) {
	    assert.argumentTypes(value, assert.type.any);
	    this._setValueErrorsStatus(value);
	    this._pristine = false;
	    ObservableWrapper.callNext(this._valueChangesController, this._value);
	    this._updateParent();
	  },
	  _setValueErrorsStatus: function _setValueErrorsStatus(value) {
	    this._value = value;
	    this._errors = this.validator(this);
	    this._status = isPresent(this._errors) ? INVALID : VALID;
	  }
	}, {}, AbstractControl);
	Object.defineProperty(Control, "parameters", { get: function get() {
	    return [[assert.type.any], [Function]];
	  } });
	Object.defineProperty(Control.prototype.updateValue, "parameters", { get: function get() {
	    return [[assert.type.any]];
	  } });
	var ControlGroup = function ControlGroup(controls) {
	  var optionals = arguments[1] !== void 0 ? arguments[1] : null;
	  var validator = arguments[2] !== void 0 ? arguments[2] : Validators.group;
	  assert.argumentTypes(controls, StringMap, optionals, StringMap, validator, Function);
	  $traceurRuntime.superConstructor($ControlGroup).call(this, validator);
	  this.controls = controls;
	  this._optionals = isPresent(optionals) ? optionals : {};
	  this._valueChangesController = ObservableWrapper.createController();
	  this.valueChanges = ObservableWrapper.createObservable(this._valueChangesController);
	  this._setParentForControls();
	  this._setValueErrorsStatus();
	};
	var $ControlGroup = ControlGroup;
	$traceurRuntime.createClass(ControlGroup, {
	  include: function include(controlName) {
	    assert.argumentTypes(controlName, assert.type.string);
	    StringMapWrapper.set(this._optionals, controlName, true);
	    this._updateValue();
	  },
	  exclude: function exclude(controlName) {
	    assert.argumentTypes(controlName, assert.type.string);
	    StringMapWrapper.set(this._optionals, controlName, false);
	    this._updateValue();
	  },
	  contains: function contains(controlName) {
	    assert.argumentTypes(controlName, assert.type.string);
	    var c = StringMapWrapper.contains(this.controls, controlName);
	    return assert.returnType(c && this._included(controlName), assert.type.boolean);
	  },
	  _setParentForControls: function _setParentForControls() {
	    var $__5 = this;
	    StringMapWrapper.forEach(this.controls, function (control, name) {
	      control.setParent($__5);
	    });
	  },
	  _updateValue: function _updateValue() {
	    this._setValueErrorsStatus();
	    this._pristine = false;
	    ObservableWrapper.callNext(this._valueChangesController, this._value);
	    this._updateParent();
	  },
	  _setValueErrorsStatus: function _setValueErrorsStatus() {
	    this._value = this._reduceValue();
	    this._errors = this.validator(this);
	    this._status = isPresent(this._errors) ? INVALID : VALID;
	  },
	  _reduceValue: function _reduceValue() {
	    return this._reduceChildren({}, function (acc, control, name) {
	      acc[name] = control.value;
	      return acc;
	    });
	  },
	  _reduceChildren: function _reduceChildren(initValue, fn) {
	    var $__5 = this;
	    assert.argumentTypes(initValue, assert.type.any, fn, Function);
	    var res = initValue;
	    StringMapWrapper.forEach(this.controls, function (control, name) {
	      if ($__5._included(name)) {
	        res = fn(res, control, name);
	      }
	    });
	    return res;
	  },
	  _included: function _included(controlName) {
	    assert.argumentTypes(controlName, assert.type.string);
	    var isOptional = StringMapWrapper.contains(this._optionals, controlName);
	    return assert.returnType(!isOptional || StringMapWrapper.get(this._optionals, controlName), assert.type.boolean);
	  }
	}, {}, AbstractControl);
	Object.defineProperty(ControlGroup, "parameters", { get: function get() {
	    return [[StringMap], [StringMap], [Function]];
	  } });
	Object.defineProperty(ControlGroup.prototype.include, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype.exclude, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype.contains, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype._reduceChildren, "parameters", { get: function get() {
	    return [[assert.type.any], [Function]];
	  } });
	Object.defineProperty(ControlGroup.prototype._included, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var ControlArray = function ControlArray(controls) {
	  var validator = arguments[1] !== void 0 ? arguments[1] : Validators.array;
	  assert.argumentTypes(controls, assert.genericType(List, AbstractControl), validator, Function);
	  $traceurRuntime.superConstructor($ControlArray).call(this, validator);
	  this.controls = controls;
	  this._valueChangesController = ObservableWrapper.createController();
	  this.valueChanges = ObservableWrapper.createObservable(this._valueChangesController);
	  this._setParentForControls();
	  this._setValueErrorsStatus();
	};
	var $ControlArray = ControlArray;
	$traceurRuntime.createClass(ControlArray, Object.defineProperties({
	  at: function at(index) {
	    assert.argumentTypes(index, assert.type.number);
	    return assert.returnType(this.controls[index], AbstractControl);
	  },
	  push: function push(control) {
	    assert.argumentTypes(control, AbstractControl);
	    ListWrapper.push(this.controls, control);
	    control.setParent(this);
	    this._updateValue();
	  },
	  insert: function insert(index, control) {
	    assert.argumentTypes(index, assert.type.number, control, AbstractControl);
	    ListWrapper.insert(this.controls, index, control);
	    control.setParent(this);
	    this._updateValue();
	  },
	  removeAt: function removeAt(index) {
	    assert.argumentTypes(index, assert.type.number);
	    ListWrapper.removeAt(this.controls, index);
	    this._updateValue();
	  },

	  _updateValue: function _updateValue() {
	    this._setValueErrorsStatus();
	    this._pristine = false;
	    ObservableWrapper.callNext(this._valueChangesController, this._value);
	    this._updateParent();
	  },
	  _setParentForControls: function _setParentForControls() {
	    var $__5 = this;
	    ListWrapper.forEach(this.controls, function (control) {
	      control.setParent($__5);
	    });
	  },
	  _setValueErrorsStatus: function _setValueErrorsStatus() {
	    this._value = ListWrapper.map(this.controls, function (c) {
	      return c.value;
	    });
	    this._errors = this.validator(this);
	    this._status = isPresent(this._errors) ? INVALID : VALID;
	  }
	}, {
	  length: {
	    get: function get() {
	      return assert.returnType(this.controls.length, assert.type.number);
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {}, AbstractControl);
	Object.defineProperty(ControlArray, "parameters", { get: function get() {
	    return [[assert.genericType(List, AbstractControl)], [Function]];
	  } });
	Object.defineProperty(ControlArray.prototype.at, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	Object.defineProperty(ControlArray.prototype.push, "parameters", { get: function get() {
	    return [[AbstractControl]];
	  } });
	Object.defineProperty(ControlArray.prototype.insert, "parameters", { get: function get() {
	    return [[assert.type.number], [AbstractControl]];
	  } });
	Object.defineProperty(ControlArray.prototype.removeAt, "parameters", { get: function get() {
	    return [[assert.type.number]];
	  } });
	//# sourceMappingURL=model.js.map

	//# sourceMappingURL=./model.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  Validators: { get: function get() {
	      return Validators;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__model__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__1.isBlank,
	    isPresent = $__1.isPresent;
	var $__2 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    List = $__2.List,
	    ListWrapper = $__2.ListWrapper,
	    StringMapWrapper = $__2.StringMapWrapper;
	var modelModule = ($__model__ = __webpack_require__(105), $__model__ && $__model__.__esModule && $__model__ || { "default": $__model__ });
	var Validators = function Validators() {
	  ;
	};
	var $Validators = Validators;
	$traceurRuntime.createClass(Validators, {}, {
	  required: function required(c) {
	    assert.argumentTypes(c, modelModule.Control);
	    return isBlank(c.value) || c.value == "" ? { "required": true } : null;
	  },
	  nullValidator: function nullValidator(c) {
	    assert.argumentTypes(c, assert.type.any);
	    return null;
	  },
	  compose: function compose(validators) {
	    assert.argumentTypes(validators, assert.genericType(List, Function));
	    return assert.returnType(function (c) {
	      assert.argumentTypes(c, modelModule.Control);
	      var res = ListWrapper.reduce(validators, function (res, validator) {
	        var errors = validator(c);
	        return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
	      }, {});
	      return StringMapWrapper.isEmpty(res) ? null : res;
	    }, Function);
	  },
	  group: function group(c) {
	    assert.argumentTypes(c, modelModule.ControlGroup);
	    var res = {};
	    StringMapWrapper.forEach(c.controls, function (control, name) {
	      if (c.contains(name) && isPresent(control.errors)) {
	        $Validators._mergeErrors(control, res);
	      }
	    });
	    return StringMapWrapper.isEmpty(res) ? null : res;
	  },
	  array: function array(c) {
	    assert.argumentTypes(c, modelModule.ControlArray);
	    var res = {};
	    ListWrapper.forEach(c.controls, function (control) {
	      if (isPresent(control.errors)) {
	        $Validators._mergeErrors(control, res);
	      }
	    });
	    return StringMapWrapper.isEmpty(res) ? null : res;
	  },
	  _mergeErrors: function _mergeErrors(control, res) {
	    StringMapWrapper.forEach(control.errors, function (value, error) {
	      if (!StringMapWrapper.contains(res, error)) {
	        res[error] = [];
	      }
	      ListWrapper.push(res[error], control);
	    });
	  }
	});
	Object.defineProperty(Validators.required, "parameters", { get: function get() {
	    return [[modelModule.Control]];
	  } });
	Object.defineProperty(Validators.nullValidator, "parameters", { get: function get() {
	    return [[assert.type.any]];
	  } });
	Object.defineProperty(Validators.compose, "parameters", { get: function get() {
	    return [[assert.genericType(List, Function)]];
	  } });
	Object.defineProperty(Validators.group, "parameters", { get: function get() {
	    return [[modelModule.ControlGroup]];
	  } });
	Object.defineProperty(Validators.array, "parameters", { get: function get() {
	    return [[modelModule.ControlArray]];
	  } });
	//# sourceMappingURL=validators.js.map

	//# sourceMappingURL=./validators.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  DefaultValueAccessor: { get: function get() {
	      return DefaultValueAccessor;
	    } },
	  CheckboxControlValueAccessor: { get: function get() {
	      return CheckboxControlValueAccessor;
	    } },
	  ControlDirective: { get: function get() {
	      return ControlDirective;
	    } },
	  ControlGroupDirective: { get: function get() {
	      return ControlGroupDirective;
	    } },
	  FormDirectives: { get: function get() {
	      return FormDirectives;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_angular2__, $__angular2_47_di__, $__angular2_47_src_47_facade_47_lang__, $__angular2_47_src_47_facade_47_collection__, $__model__, $__validators__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_angular2__ = __webpack_require__(1), $__angular2_47_angular2__ && $__angular2_47_angular2__.__esModule && $__angular2_47_angular2__ || { "default": $__angular2_47_angular2__ }),
	    Template = $__1.Template,
	    Component = $__1.Component,
	    Decorator = $__1.Decorator,
	    Ancestor = $__1.Ancestor,
	    onChange = $__1.onChange,
	    PropertySetter = $__1.PropertySetter;
	var Optional = ($__angular2_47_di__ = __webpack_require__(9), $__angular2_47_di__ && $__angular2_47_di__.__esModule && $__angular2_47_di__ || { "default": $__angular2_47_di__ }).Optional;
	var $__3 = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }),
	    isBlank = $__3.isBlank,
	    isPresent = $__3.isPresent,
	    isString = $__3.isString,
	    CONST = $__3.CONST;
	var $__4 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    StringMapWrapper = $__4.StringMapWrapper,
	    ListWrapper = $__4.ListWrapper;
	var $__5 = ($__model__ = __webpack_require__(105), $__model__ && $__model__.__esModule && $__model__ || { "default": $__model__ }),
	    ControlGroup = $__5.ControlGroup,
	    Control = $__5.Control;
	var Validators = ($__validators__ = __webpack_require__(106), $__validators__ && $__validators__.__esModule && $__validators__ || { "default": $__validators__ }).Validators;
	var DefaultValueAccessor = function DefaultValueAccessor(setValueProperty) {
	  assert.argumentTypes(setValueProperty, Function);
	  this._setValueProperty = setValueProperty;
	  this.onChange = function (_) {};
	};
	$traceurRuntime.createClass(DefaultValueAccessor, { writeValue: function writeValue(value) {
	    this._setValueProperty(value);
	  } }, {});
	Object.defineProperty(DefaultValueAccessor, "annotations", { get: function get() {
	    return [new Decorator({
	      selector: '[control]',
	      events: {
	        'change': 'onChange($event.target.value)',
	        'input': 'onChange($event.target.value)'
	      }
	    })];
	  } });
	Object.defineProperty(DefaultValueAccessor, "parameters", { get: function get() {
	    return [[Function, new PropertySetter('value')]];
	  } });
	var CheckboxControlValueAccessor = function CheckboxControlValueAccessor(cd, setCheckedProperty) {
	  assert.argumentTypes(cd, ControlDirective, setCheckedProperty, Function);
	  this._setCheckedProperty = setCheckedProperty;
	  this.onChange = function (_) {};
	  cd.valueAccessor = this;
	};
	$traceurRuntime.createClass(CheckboxControlValueAccessor, { writeValue: function writeValue(value) {
	    this._setCheckedProperty(value);
	  } }, {});
	Object.defineProperty(CheckboxControlValueAccessor, "annotations", { get: function get() {
	    return [new Decorator({
	      selector: 'input[type=checkbox]',
	      events: { 'change': 'onChange($event.target.checked)' }
	    })];
	  } });
	Object.defineProperty(CheckboxControlValueAccessor, "parameters", { get: function get() {
	    return [[ControlDirective], [Function, new PropertySetter('checked')]];
	  } });
	var ControlDirective = function ControlDirective(groupDirective, valueAccessor) {
	  assert.argumentTypes(groupDirective, ControlGroupDirective, valueAccessor, DefaultValueAccessor);
	  this._groupDirective = groupDirective;
	  this.controlOrName = null;
	  this.valueAccessor = valueAccessor;
	  this.validator = Validators.nullValidator;
	};
	$traceurRuntime.createClass(ControlDirective, {
	  onChange: function onChange(_) {
	    this._initialize();
	  },
	  _initialize: function _initialize() {
	    if (isPresent(this._groupDirective)) {
	      this._groupDirective.addDirective(this);
	    }
	    var c = this._control();
	    c.validator = Validators.compose([c.validator, this.validator]);
	    this._updateDomValue();
	    this._setUpUpdateControlValue();
	  },
	  _updateDomValue: function _updateDomValue() {
	    this.valueAccessor.writeValue(this._control().value);
	  },
	  _setUpUpdateControlValue: function _setUpUpdateControlValue() {
	    var $__7 = this;
	    this.valueAccessor.onChange = function (newValue) {
	      return $__7._control().updateValue(newValue);
	    };
	  },
	  _control: function _control() {
	    if (isString(this.controlOrName)) {
	      return this._groupDirective.findControl(this.controlOrName);
	    } else {
	      return this.controlOrName;
	    }
	  }
	}, {});
	Object.defineProperty(ControlDirective, "annotations", { get: function get() {
	    return [new Decorator({
	      lifecycle: [onChange],
	      selector: '[control]',
	      bind: { 'controlOrName': 'control' }
	    })];
	  } });
	Object.defineProperty(ControlDirective, "parameters", { get: function get() {
	    return [[ControlGroupDirective, new Optional(), new Ancestor()], [DefaultValueAccessor]];
	  } });
	var ControlGroupDirective = function ControlGroupDirective(groupDirective) {
	  assert.argumentTypes(groupDirective, $ControlGroupDirective);
	  this._groupDirective = groupDirective;
	  this._directives = ListWrapper.create();
	};
	var $ControlGroupDirective = ControlGroupDirective;
	$traceurRuntime.createClass(ControlGroupDirective, Object.defineProperties({
	  _updateDomValue: function _updateDomValue() {
	    ListWrapper.forEach(this._directives, function (cd) {
	      return cd._updateDomValue();
	    });
	  },
	  addDirective: function addDirective(c) {
	    assert.argumentTypes(c, ControlDirective);
	    ListWrapper.push(this._directives, c);
	  },
	  findControl: function findControl(name) {
	    assert.argumentTypes(name, assert.type.string);
	    return assert.returnType(this._getControlGroup().controls[name], assert.type.any);
	  },
	  _getControlGroup: function _getControlGroup() {
	    if (isPresent(this._controlGroupName)) {
	      return assert.returnType(this._groupDirective.findControl(this._controlGroupName), ControlGroup);
	    } else {
	      return assert.returnType(this._controlGroup, ControlGroup);
	    }
	  }
	}, {
	  controlGroup: {
	    set: function set(controlGroup) {
	      if (isString(controlGroup)) {
	        this._controlGroupName = controlGroup;
	      } else {
	        this._controlGroup = controlGroup;
	      }
	      this._updateDomValue();
	    },
	    configurable: true,
	    enumerable: true
	  }
	}), {});
	Object.defineProperty(ControlGroupDirective, "annotations", { get: function get() {
	    return [new Decorator({
	      selector: '[control-group]',
	      bind: { 'controlGroup': 'control-group' }
	    })];
	  } });
	Object.defineProperty(ControlGroupDirective, "parameters", { get: function get() {
	    return [[ControlGroupDirective, new Optional(), new Ancestor()]];
	  } });
	Object.defineProperty(ControlGroupDirective.prototype.addDirective, "parameters", { get: function get() {
	    return [[ControlDirective]];
	  } });
	Object.defineProperty(ControlGroupDirective.prototype.findControl, "parameters", { get: function get() {
	    return [[assert.type.string]];
	  } });
	var FormDirectives = [ControlGroupDirective, ControlDirective, CheckboxControlValueAccessor, DefaultValueAccessor];
	//# sourceMappingURL=directives.js.map

	//# sourceMappingURL=./directives.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  RequiredValidatorDirective: { get: function get() {
	      return RequiredValidatorDirective;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_angular2__, $__angular2_47_forms__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var Decorator = ($__angular2_47_angular2__ = __webpack_require__(1), $__angular2_47_angular2__ && $__angular2_47_angular2__.__esModule && $__angular2_47_angular2__ || { "default": $__angular2_47_angular2__ }).Decorator;
	var $__2 = ($__angular2_47_forms__ = __webpack_require__(104), $__angular2_47_forms__ && $__angular2_47_forms__.__esModule && $__angular2_47_forms__ || { "default": $__angular2_47_forms__ }),
	    ControlDirective = $__2.ControlDirective,
	    Validators = $__2.Validators;
	var RequiredValidatorDirective = function RequiredValidatorDirective(c) {
	  assert.argumentTypes(c, ControlDirective);
	  c.validator = Validators.compose([c.validator, Validators.required]);
	};
	$traceurRuntime.createClass(RequiredValidatorDirective, {}, {});
	Object.defineProperty(RequiredValidatorDirective, "annotations", { get: function get() {
	    return [new Decorator({ selector: '[required]' })];
	  } });
	Object.defineProperty(RequiredValidatorDirective, "parameters", { get: function get() {
	    return [[ControlDirective]];
	  } });
	//# sourceMappingURL=validator_directives.js.map

	//# sourceMappingURL=./validator_directives.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperties(module.exports, {
	  FormBuilder: { get: function get() {
	      return FormBuilder;
	    } },
	  __esModule: { value: true }
	});
	var $__rtts_95_assert_47_rtts_95_assert__, $__angular2_47_src_47_facade_47_collection__, $__angular2_47_src_47_facade_47_lang__, $__model__;
	var assert = ($__rtts_95_assert_47_rtts_95_assert__ = __webpack_require__(3), $__rtts_95_assert_47_rtts_95_assert__ && $__rtts_95_assert_47_rtts_95_assert__.__esModule && $__rtts_95_assert_47_rtts_95_assert__ || { "default": $__rtts_95_assert_47_rtts_95_assert__ }).assert;
	var $__1 = ($__angular2_47_src_47_facade_47_collection__ = __webpack_require__(7), $__angular2_47_src_47_facade_47_collection__ && $__angular2_47_src_47_facade_47_collection__.__esModule && $__angular2_47_src_47_facade_47_collection__ || { "default": $__angular2_47_src_47_facade_47_collection__ }),
	    StringMapWrapper = $__1.StringMapWrapper,
	    ListWrapper = $__1.ListWrapper,
	    List = $__1.List;
	var isPresent = ($__angular2_47_src_47_facade_47_lang__ = __webpack_require__(6), $__angular2_47_src_47_facade_47_lang__ && $__angular2_47_src_47_facade_47_lang__.__esModule && $__angular2_47_src_47_facade_47_lang__ || { "default": $__angular2_47_src_47_facade_47_lang__ }).isPresent;
	var modelModule = ($__model__ = __webpack_require__(105), $__model__ && $__model__.__esModule && $__model__ || { "default": $__model__ });
	var FormBuilder = function FormBuilder() {
	  ;
	};
	$traceurRuntime.createClass(FormBuilder, {
	  group: function group(controlsConfig) {
	    var extra = arguments[1] !== void 0 ? arguments[1] : null;
	    var controls = this._reduceControls(controlsConfig);
	    var optionals = isPresent(extra) ? StringMapWrapper.get(extra, "optionals") : null;
	    var validator = isPresent(extra) ? StringMapWrapper.get(extra, "validator") : null;
	    if (isPresent(validator)) {
	      return assert.returnType(new modelModule.ControlGroup(controls, optionals, validator), modelModule.ControlGroup);
	    } else {
	      return assert.returnType(new modelModule.ControlGroup(controls, optionals), modelModule.ControlGroup);
	    }
	  },
	  control: function control(value) {
	    var validator = arguments[1] !== void 0 ? arguments[1] : null;
	    assert.argumentTypes(value, assert.type.any, validator, Function);
	    if (isPresent(validator)) {
	      return assert.returnType(new modelModule.Control(value, validator), modelModule.Control);
	    } else {
	      return assert.returnType(new modelModule.Control(value), modelModule.Control);
	    }
	  },
	  array: function array(controlsConfig) {
	    var validator = arguments[1] !== void 0 ? arguments[1] : null;
	    var $__3 = this;
	    var controls = ListWrapper.map(controlsConfig, function (c) {
	      return $__3._createControl(c);
	    });
	    if (isPresent(validator)) {
	      return assert.returnType(new modelModule.ControlArray(controls, validator), modelModule.ControlArray);
	    } else {
	      return assert.returnType(new modelModule.ControlArray(controls), modelModule.ControlArray);
	    }
	  },
	  _reduceControls: function _reduceControls(controlsConfig) {
	    var $__3 = this;
	    var controls = {};
	    StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	      controls[controlName] = $__3._createControl(controlConfig);
	    });
	    return controls;
	  },
	  _createControl: function _createControl(controlConfig) {
	    if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
	      return controlConfig;
	    } else if (ListWrapper.isList(controlConfig)) {
	      var value = ListWrapper.get(controlConfig, 0);
	      var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	      return this.control(value, validator);
	    } else {
	      return this.control(controlConfig);
	    }
	  }
	}, {});
	Object.defineProperty(FormBuilder.prototype.control, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	Object.defineProperty(FormBuilder.prototype.array, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	//# sourceMappingURL=form_builder.js.map

	//# sourceMappingURL=./form_builder.map

/***/ },
/* 110 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	var AppComponent = ng.core.Component({
		selector: 'my-app',
		template: '<h1>HAY LAYDEE</h1>'
	}).Class({
		constructor: function constructor() {}
	});

	exports['default'] = AppComponent;
	module.exports = exports['default'];

/***/ }
/******/ ]);